{"ast":null,"code":"var _jsxFileName = \"/Users/eyo/Desktop/project-expenseTracker-main/src/components/MainContent/Chart/ChartMain/ChartMain.js\",\n    _s = $RefreshSig$();\n\nimport { useRef, useEffect, useContext } from \"react\";\nimport ExpenseDataContext from \"../../../../store/expenseData/expenseData--context\";\nimport style from \"./ChartMain.module.css\";\nimport Chart from \"chart.js/auto\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst dateOptObj = {\n  month: \"short\"\n};\n\nfunction ChartMain(props) {\n  _s();\n\n  const chartRef = useRef(null);\n  const {\n    EXPENSE_DATA\n  } = useContext(ExpenseDataContext);\n  let labels = [],\n      labels1 = [],\n      data = [];\n\n  if (props.chartData) {\n    const standardLabels = createLabelsArr(props.chartData.timeDuration, props.chartData.startingDate);\n    console.log(standardLabels); // labels = standardLabels.map((label) => )\n    // if (\n    //   props.chartData.timeDuration === \"6\" ||\n    //   props.chartData.timeDuration === \"12\"\n    // ) {\n    //   labels1 = labels.map((label) =>\n    //     new Intl.DateTimeFormat(\"en-US\", dateOptObj).format(\n    //       new Date(2020, label.slice(0, 2) - 1, label.slice(2) - 0)\n    //     )\n    //   );\n    // }\n    // data = createDataArr(\n    //   standardLabels,\n    //   EXPENSE_DATA,\n    //   props.chartData?.startingDate,\n    //   props.chartData?.mainCategory,\n    //   props.chartData?.subCategory,\n    //   props.chartData?.timeDuration\n    // );\n  }\n\n  const dataObj = {\n    labels: labels,\n    datasets: [{\n      label: \"My First Dataset\",\n      data: data,\n      backgroundColor: [\"rgba(255, 99, 132, 0.2)\", \"rgba(255, 159, 64, 0.2)\", \"rgba(255, 205, 86, 0.2)\", \"rgba(75, 192, 192, 0.2)\", \"rgba(54, 162, 235, 0.2)\", \"rgba(153, 102, 255, 0.2)\", \"rgba(201, 203, 207, 0.2)\"],\n      borderColor: [\"rgb(255, 99, 132)\", \"rgb(255, 159, 64)\", \"rgb(255, 205, 86)\", \"rgb(75, 192, 192)\", \"rgb(54, 162, 235)\", \"rgb(153, 102, 255)\", \"rgb(201, 203, 207)\"],\n      borderWidth: 1\n    }]\n  };\n  const config = {\n    type: \"bar\",\n    data: dataObj,\n    options: {\n      scales: {\n        y: {\n          beginAtZero: true\n        }\n      }\n    }\n  }; // useEffect(() => {\n  //   const chart = new Chart(chartRef.current, config);\n  //   return function cleanUp() {\n  //     chart.destroy();\n  //   };\n  // }, [labels]);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: style.chartMain,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ChartMain, \"+o1nGUf0gmfc6lFgmRh5QYfQCMo=\");\n\n_c = ChartMain;\nexport default ChartMain; // function createDataArr(\n//   standardLabels,\n//   expensData,\n//   start,\n//   mainCategory,\n//   subCategory,\n//   timeDuration\n// ) {\n//   // const year = new Date(start).getFullYear();\n//   // const startingDate = `${year}-${labels[0]?.slice(0, 2)}-${labels[0]?.slice(\n//   //   2\n//   // )}`;\n//   // const endingDate = `${year}-${labels[labels.length - 1]?.slice(\n//   //   0,\n//   //   2\n//   // )}-${labels[labels.length - 1]?.slice(2)}`;\n//   const numStartingDate = Number(new Date(standardLabels[0]));\n//   const numEndingDate = Number(\n//     new Date(standardLabels[standardLabels.length - 1])\n//   );\n//   const filteredData = expensData\n//     .filter(\n//       (element) =>\n//         Number(new Date(element.time)) >= numStartingDate &&\n//         Number(new Date(element.time)) <= numEndingDate\n//     )\n//     .sort(\n//       (elementA, elementB) =>\n//         Number(new Date(elementA.time)) - Number(new Date(elementB.time))\n//     );\n//   const data = [];\n//   // month base\n//   if (timeDuration === \"6\" || timeDuration === \"12\") {\n//     if (mainCategory === \"income\" && subCategory.length === 3) {\n//       const labelsLength = labels.length;\n//       let indexLabel = 0;\n//       let indexData = 0;\n//       let indexCurrentDate = true;\n//       let currentMonth;\n//       let currentAmount = 0;\n//       while (indexLabel < labelsLength) {\n//         // keep adding if it's still at current date(time)\n//         while (indexCurrentDate) {\n//           currentMonth = new Intl.DateTimeFormat(\"en-US\", dateOptObj).format(\n//             new Date(filteredData[indexData]?.time)\n//           );\n//           // check date(time)\n//           if (currentMonth === labels1[indexLabel]) {\n//             // check main category\n//             if (filteredData[indexData].category === \"income\") {\n//               currentAmount += Number(filteredData[indexData].price);\n//             }\n//             indexData++;\n//           } else indexCurrentDate = false;\n//         }\n//         data.push(currentAmount);\n//         currentAmount = 0;\n//         indexCurrentDate = true;\n//         indexLabel++;\n//       }\n//     }\n//     if (mainCategory === \"expense\" && subCategory.length === 6) {\n//       const labelsLength = labels.length;\n//       let indexLabel = 0;\n//       let indexData = 0;\n//       let indexCurrentDate = true;\n//       let currentMonth;\n//       let currentAmount = 0;\n//       while (indexLabel < labelsLength) {\n//         // keep adding if it's still at current date(time)\n//         while (indexCurrentDate) {\n//           console.log(filteredData);\n//           if (!filteredData[indexData]?.time)\n//             currentMonth = new Intl.DateTimeFormat(\"en-US\", dateOptObj).format(\n//               new Date(filteredData[indexData]?.time)\n//             );\n//           console.log(currentMonth);\n//           if (currentMonth === labels1[indexLabel]) {\n//             // check main category\n//             if (filteredData[indexData].category === \"income\") {\n//               currentAmount += Number(filteredData[indexData].price);\n//             }\n//             indexData++;\n//           } else indexCurrentDate = false;\n//         }\n//         data.push(currentAmount);\n//         currentAmount = 0;\n//         indexCurrentDate = true;\n//         indexLabel++;\n//       }\n//     }\n//   }\n//   // day base\n//   else {\n//     if (mainCategory === \"income\" && subCategory.length === 3) {\n//       const labelsLength = labels.length;\n//       let indexLabel = 0;\n//       let indexData = 0;\n//       let indexCurrentDate = true;\n//       let currentDate;\n//       let currentAmount = 0;\n//       while (indexLabel < labelsLength) {\n//         currentDate = `${year}-${labels[indexLabel].slice(0, 2)}-${labels[\n//           indexLabel\n//         ].slice(2)}`;\n//         // keep adding if it's still at current date(time)\n//         if (indexData < filteredData.length - 1) {\n//           while (indexCurrentDate) {\n//             // check date(time)\n//             if (filteredData[indexData].time === currentDate) {\n//               // check main category\n//               if (filteredData[indexData].category === \"income\") {\n//                 currentAmount += Number(filteredData[indexData].price);\n//               }\n//               indexData++;\n//             } else indexCurrentDate = false;\n//           }\n//         }\n//         data.push(currentAmount);\n//         currentAmount = 0;\n//         indexCurrentDate = true;\n//         indexLabel++;\n//       }\n//     }\n//     if (mainCategory === \"expense\" && subCategory.length === 6) {\n//       const labelsLength = labels.length;\n//       let indexLabel = 0;\n//       let indexData = 0;\n//       let indexCurrentDate = true;\n//       let currentDate;\n//       let currentAmount = 0;\n//       while (indexLabel < labelsLength) {\n//         currentDate = `${year}-${labels[indexLabel].slice(0, 2)}-${labels[\n//           indexLabel\n//         ].slice(2)}`;\n//         // keep adding if it's still at current date(time)\n//         while (indexCurrentDate) {\n//           // check date(time)\n//           if (filteredData[indexData]?.time === currentDate) {\n//             // check main category\n//             if (filteredData[indexData].category === \"expense\") {\n//               currentAmount += Number(filteredData[indexData].price);\n//             }\n//             indexData++;\n//           } else indexCurrentDate = false;\n//         }\n//         data.push(currentAmount);\n//         currentAmount = 0;\n//         indexCurrentDate = true;\n//         indexLabel++;\n//       }\n//     }\n//   }\n//   // console.log(filteredData);\n//   console.log(labels);\n//   console.log(data);\n//   // console.log(data);\n//   return data;\n// }\n\nfunction createLabelsArr(duration, startingDate) {\n  const today = new Date(startingDate);\n  let labels = []; // one week\n\n  if (duration === \"7\") {\n    createLabelsArrHelper(labels, 7, 1, \"day\", today);\n  }\n\n  if (duration === \"14\") {\n    createLabelsArrHelper(labels, 14, 1, \"day\", today);\n  }\n\n  if (duration === \"30\") {\n    createLabelsArrHelper(labels, 30, 1, \"day\", today);\n  }\n\n  if (duration === \"90\") {\n    createLabelsArrHelper(labels, 30, 3, \"day\", today);\n  }\n\n  if (duration === \"6\") {\n    createLabelsArrHelper(labels, 6, 1, \"month\", today);\n  }\n\n  if (duration === \"12\") {\n    createLabelsArrHelper(labels, 12, 1, \"month\", today);\n  }\n\n  return labels;\n}\n\nfunction createLabelsArrHelper(labels, duration, incrementAmount, dayMonth, today) {\n  let tmpDay = today;\n  let day;\n  let month;\n  let year = today.getFullYear();\n  let changeYear = false; // if it's increment by month, the day is never change\n  // we could put it outisde for-loop\n\n  if (dayMonth === \"month\") {\n    if (tmpDay.getDate() < 10) day = `0${tmpDay.getDate()}`;else day = tmpDay.getDate();\n  }\n\n  for (let i = 0; i < duration; i++) {\n    // incremenet by month\n    if (dayMonth === \"month\") tmpDay.setMonth(tmpDay.getMonth() + incrementAmount); // increment by day\n\n    if (dayMonth === \"day\") {\n      tmpDay.setDate(tmpDay.getDate() + incrementAmount); // day will change, so put this inside for-loop\n\n      if (tmpDay.getDate() < 10) day = `0${tmpDay.getDate()}`;else day = tmpDay.getDate();\n    }\n\n    if (tmpDay.getMonth() + 1 < 10) month = `0${tmpDay.getMonth() + 1}`;else month = tmpDay.getMonth() + 1; // increment year\n\n    if (changeYear) {\n      year++;\n      changeYear = false;\n    }\n\n    if (tmpDay.getMonth() === 11) changeYear = true;\n    labels.push(`${year}-${month}-${day}`);\n  }\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"ChartMain\");","map":{"version":3,"sources":["/Users/eyo/Desktop/project-expenseTracker-main/src/components/MainContent/Chart/ChartMain/ChartMain.js"],"names":["useRef","useEffect","useContext","ExpenseDataContext","style","Chart","dateOptObj","month","ChartMain","props","chartRef","EXPENSE_DATA","labels","labels1","data","chartData","standardLabels","createLabelsArr","timeDuration","startingDate","console","log","dataObj","datasets","label","backgroundColor","borderColor","borderWidth","config","type","options","scales","y","beginAtZero","chartMain","duration","today","Date","createLabelsArrHelper","incrementAmount","dayMonth","tmpDay","day","year","getFullYear","changeYear","getDate","i","setMonth","getMonth","setDate","push"],"mappings":";;;AAAA,SAASA,MAAT,EAAiBC,SAAjB,EAA4BC,UAA5B,QAA8C,OAA9C;AACA,OAAOC,kBAAP,MAA+B,oDAA/B;AACA,OAAOC,KAAP,MAAkB,wBAAlB;AACA,OAAOC,KAAP,MAAkB,eAAlB;;AAEA,MAAMC,UAAU,GAAG;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAAnB;;AAEA,SAASC,SAAT,CAAmBC,KAAnB,EAA0B;AAAA;;AACxB,QAAMC,QAAQ,GAAGV,MAAM,CAAC,IAAD,CAAvB;AACA,QAAM;AAAEW,IAAAA;AAAF,MAAmBT,UAAU,CAACC,kBAAD,CAAnC;AAEA,MAAIS,MAAM,GAAG,EAAb;AAAA,MACEC,OAAO,GAAG,EADZ;AAAA,MAEEC,IAAI,GAAG,EAFT;;AAIA,MAAIL,KAAK,CAACM,SAAV,EAAqB;AACnB,UAAMC,cAAc,GAAGC,eAAe,CACpCR,KAAK,CAACM,SAAN,CAAgBG,YADoB,EAEpCT,KAAK,CAACM,SAAN,CAAgBI,YAFoB,CAAtC;AAKAC,IAAAA,OAAO,CAACC,GAAR,CAAYL,cAAZ,EANmB,CAQnB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD;;AAED,QAAMM,OAAO,GAAG;AACdV,IAAAA,MAAM,EAAEA,MADM;AAEdW,IAAAA,QAAQ,EAAE,CACR;AACEC,MAAAA,KAAK,EAAE,kBADT;AAEEV,MAAAA,IAAI,EAAEA,IAFR;AAGEW,MAAAA,eAAe,EAAE,CACf,yBADe,EAEf,yBAFe,EAGf,yBAHe,EAIf,yBAJe,EAKf,yBALe,EAMf,0BANe,EAOf,0BAPe,CAHnB;AAYEC,MAAAA,WAAW,EAAE,CACX,mBADW,EAEX,mBAFW,EAGX,mBAHW,EAIX,mBAJW,EAKX,mBALW,EAMX,oBANW,EAOX,oBAPW,CAZf;AAqBEC,MAAAA,WAAW,EAAE;AArBf,KADQ;AAFI,GAAhB;AA6BA,QAAMC,MAAM,GAAG;AACbC,IAAAA,IAAI,EAAE,KADO;AAEbf,IAAAA,IAAI,EAAEQ,OAFO;AAGbQ,IAAAA,OAAO,EAAE;AACPC,MAAAA,MAAM,EAAE;AACNC,QAAAA,CAAC,EAAE;AACDC,UAAAA,WAAW,EAAE;AADZ;AADG;AADD;AAHI,GAAf,CApEwB,CAgFxB;AACA;AAEA;AACA;AACA;AACA;;AAEA,sBACE;AAAK,IAAA,SAAS,EAAE7B,KAAK,CAAC8B,SAAtB;AAAA,2BACE;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;;GA7FQ1B,S;;KAAAA,S;AA+FT,eAAeA,SAAfeAAT,CAAyBkB,QAAzB,EAAmChB,YAAnC,EAAiD;AAC/C,QAAMiB,KAAK,GAAG,IAAIC,IAAJ,CAASlB,YAAT,CAAd;AAEA,MAAIP,MAAM,GAAG,EAAb,CAH+C,CAK/C;;AACA,MAAIuB,QAAQ,KAAK,GAAjB,EAAsB;AACpBG,IAAAA,qBAAqB,CAAC1B,MAAD,EAAS,CAAT,EAAY,CAAZ,EAAe,KAAf,EAAsBwB,KAAtB,CAArB;AACD;;AAED,MAAID,QAAQ,KAAK,IAAjB,EAAuB;AACrBG,IAAAA,qBAAqB,CAAC1B,MAAD,EAAS,EAAT,EAAa,CAAb,EAAgB,KAAhB,EAAuBwB,KAAvB,CAArB;AACD;;AAED,MAAID,QAAQ,KAAK,IAAjB,EAAuB;AACrBG,IAAAA,qBAAqB,CAAC1B,MAAD,EAAS,EAAT,EAAa,CAAb,EAAgB,KAAhB,EAAuBwB,KAAvB,CAArB;AACD;;AAED,MAAID,QAAQ,KAAK,IAAjB,EAAuB;AACrBG,IAAAA,qBAAqB,CAAC1B,MAAD,EAAS,EAAT,EAAa,CAAb,EAAgB,KAAhB,EAAuBwB,KAAvB,CAArB;AACD;;AAED,MAAID,QAAQ,KAAK,GAAjB,EAAsB;AACpBG,IAAAA,qBAAqB,CAAC1B,MAAD,EAAS,CAAT,EAAY,CAAZ,EAAe,OAAf,EAAwBwB,KAAxB,CAArB;AACD;;AAED,MAAID,QAAQ,KAAK,IAAjB,EAAuB;AACrBG,IAAAA,qBAAqB,CAAC1B,MAAD,EAAS,EAAT,EAAa,CAAb,EAAgB,OAAhB,EAAyBwB,KAAzB,CAArB;AACD;;AAED,SAAOxB,MAAP;AACD;;AAED,SAAS0B,qBAAT,CACE1B,MADF,EAEEuB,QAFF,EAGEI,eAHF,EAIEC,QAJF,EAKEJ,KALF,EAME;AACA,MAAIK,MAAM,GAAGL,KAAb;AACA,MAAIM,GAAJ;AACA,MAAInC,KAAJ;AACA,MAAIoC,IAAI,GAAGP,KAAK,CAACQ,WAAN,EAAX;AACA,MAAIC,UAAU,GAAG,KAAjB,CALA,CAOA;AACA;;AACA,MAAIL,QAAQ,KAAK,OAAjB,EAA0B;AACxB,QAAIC,MAAM,CAACK,OAAP,KAAmB,EAAvB,EAA2BJ,GAAG,GAAI,IAAGD,MAAM,CAACK,OAAP,EAAiB,EAA3B,CAA3B,KACKJ,GAAG,GAAGD,MAAM,CAACK,OAAP,EAAN;AACN;;AAED,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGZ,QAApB,EAA8BY,CAAC,EAA/B,EAAmC;AACjC;AACA,QAAIP,QAAQ,KAAK,OAAjB,EACEC,MAAM,CAACO,QAAP,CAAgBP,MAAM,CAACQ,QAAP,KAAoBV,eAApC,EAH+B,CAKjC;;AACA,QAAIC,QAAQ,KAAK,KAAjB,EAAwB;AACtBC,MAAAA,MAAM,CAACS,OAAP,CAAeT,MAAM,CAACK,OAAP,KAAmBP,eAAlC,EADsB,CAGtB;;AACA,UAAIE,MAAM,CAACK,OAAP,KAAmB,EAAvB,EAA2BJ,GAAG,GAAI,IAAGD,MAAM,CAACK,OAAP,EAAiB,EAA3B,CAA3B,KACKJ,GAAG,GAAGD,MAAM,CAACK,OAAP,EAAN;AACN;;AAED,QAAIL,MAAM,CAACQ,QAAP,KAAoB,CAApB,GAAwB,EAA5B,EAAgC1C,KAAK,GAAI,IAAGkC,MAAM,CAACQ,QAAP,KAAoB,CAAE,EAAlC,CAAhC,KACK1C,KAAK,GAAGkC,MAAM,CAACQ,QAAP,KAAoB,CAA5B,CAf4B,CAiBjC;;AACA,QAAIJ,UAAJ,EAAgB;AACdF,MAAAA,IAAI;AACJE,MAAAA,UAAU,GAAG,KAAb;AACD;;AACD,QAAIJ,MAAM,CAACQ,QAAP,OAAsB,EAA1B,EAA8BJ,UAAU,GAAG,IAAb;AAE9BjC,IAAAA,MAAM,CAACuC,IAAP,CAAa,GAAER,IAAK,IAAGpC,KAAM,IAAGmC,GAAI,EAApC;AACD;AACF","sourcesContent":["import { useRef, useEffect, useContext } from \"react\";\nimport ExpenseDataContext from \"../../../../store/expenseData/expenseData--context\";\nimport style from \"./ChartMain.module.css\";\nimport Chart from \"chart.js/auto\";\n\nconst dateOptObj = { month: \"short\" };\n\nfunction ChartMain(props) {\n  const chartRef = useRef(null);\n  const { EXPENSE_DATA } = useContext(ExpenseDataContext);\n\n  let labels = [],\n    labels1 = [],\n    data = [];\n\n  if (props.chartData) {\n    const standardLabels = createLabelsArr(\n      props.chartData.timeDuration,\n      props.chartData.startingDate\n    );\n\n    console.log(standardLabels);\n\n    // labels = standardLabels.map((label) => )\n\n    // if (\n    //   props.chartData.timeDuration === \"6\" ||\n    //   props.chartData.timeDuration === \"12\"\n    // ) {\n    //   labels1 = labels.map((label) =>\n    //     new Intl.DateTimeFormat(\"en-US\", dateOptObj).format(\n    //       new Date(2020, label.slice(0, 2) - 1, label.slice(2) - 0)\n    //     )\n    //   );\n    // }\n\n    // data = createDataArr(\n    //   standardLabels,\n    //   EXPENSE_DATA,\n    //   props.chartData?.startingDate,\n    //   props.chartData?.mainCategory,\n    //   props.chartData?.subCategory,\n    //   props.chartData?.timeDuration\n    // );\n  }\n\n  const dataObj = {\n    labels: labels,\n    datasets: [\n      {\n        label: \"My First Dataset\",\n        data: data,\n        backgroundColor: [\n          \"rgba(255, 99, 132, 0.2)\",\n          \"rgba(255, 159, 64, 0.2)\",\n          \"rgba(255, 205, 86, 0.2)\",\n          \"rgba(75, 192, 192, 0.2)\",\n          \"rgba(54, 162, 235, 0.2)\",\n          \"rgba(153, 102, 255, 0.2)\",\n          \"rgba(201, 203, 207, 0.2)\",\n        ],\n        borderColor: [\n          \"rgb(255, 99, 132)\",\n          \"rgb(255, 159, 64)\",\n          \"rgb(255, 205, 86)\",\n          \"rgb(75, 192, 192)\",\n          \"rgb(54, 162, 235)\",\n          \"rgb(153, 102, 255)\",\n          \"rgb(201, 203, 207)\",\n        ],\n        borderWidth: 1,\n      },\n    ],\n  };\n\n  const config = {\n    type: \"bar\",\n    data: dataObj,\n    options: {\n      scales: {\n        y: {\n          beginAtZero: true,\n        },\n      },\n    },\n  };\n\n  // useEffect(() => {\n  //   const chart = new Chart(chartRef.current, config);\n\n  //   return function cleanUp() {\n  //     chart.destroy();\n  //   };\n  // }, [labels]);\n\n  return (\n    <div className={style.chartMain}>\n      <div>{/* <canvas ref={chartRef}></canvas> */}</div>\n    </div>\n  );\n}\n\nexport default ChartMain;\n\n// function createDataArr(\n//   standardLabels,\n//   expensData,\n//   start,\n//   mainCategory,\n//   subCategory,\n//   timeDuration\n// ) {\n//   // const year = new Date(start).getFullYear();\n//   // const startingDate = `${year}-${labels[0]?.slice(0, 2)}-${labels[0]?.slice(\n//   //   2\n//   // )}`;\n//   // const endingDate = `${year}-${labels[labels.length - 1]?.slice(\n//   //   0,\n//   //   2\n//   // )}-${labels[labels.length - 1]?.slice(2)}`;\n\n//   const numStartingDate = Number(new Date(standardLabels[0]));\n//   const numEndingDate = Number(\n//     new Date(standardLabels[standardLabels.length - 1])\n//   );\n\n//   const filteredData = expensData\n//     .filter(\n//       (element) =>\n//         Number(new Date(element.time)) >= numStartingDate &&\n//         Number(new Date(element.time)) <= numEndingDate\n//     )\n//     .sort(\n//       (elementA, elementB) =>\n//         Number(new Date(elementA.time)) - Number(new Date(elementB.time))\n//     );\n\n//   const data = [];\n//   // month base\n//   if (timeDuration === \"6\" || timeDuration === \"12\") {\n//     if (mainCategory === \"income\" && subCategory.length === 3) {\n//       const labelsLength = labels.length;\n//       let indexLabel = 0;\n//       let indexData = 0;\n//       let indexCurrentDate = true;\n//       let currentMonth;\n//       let currentAmount = 0;\n\n//       while (indexLabel < labelsLength) {\n//         // keep adding if it's still at current date(time)\n//         while (indexCurrentDate) {\n//           currentMonth = new Intl.DateTimeFormat(\"en-US\", dateOptObj).format(\n//             new Date(filteredData[indexData]?.time)\n//           );\n//           // check date(time)\n//           if (currentMonth === labels1[indexLabel]) {\n//             // check main category\n//             if (filteredData[indexData].category === \"income\") {\n//               currentAmount += Number(filteredData[indexData].price);\n//             }\n\n//             indexData++;\n//           } else indexCurrentDate = false;\n//         }\n\n//         data.push(currentAmount);\n\n//         currentAmount = 0;\n//         indexCurrentDate = true;\n//         indexLabel++;\n//       }\n//     }\n\n//     if (mainCategory === \"expense\" && subCategory.length === 6) {\n//       const labelsLength = labels.length;\n//       let indexLabel = 0;\n//       let indexData = 0;\n//       let indexCurrentDate = true;\n//       let currentMonth;\n//       let currentAmount = 0;\n\n//       while (indexLabel < labelsLength) {\n//         // keep adding if it's still at current date(time)\n//         while (indexCurrentDate) {\n//           console.log(filteredData);\n//           if (!filteredData[indexData]?.time)\n//             currentMonth = new Intl.DateTimeFormat(\"en-US\", dateOptObj).format(\n//               new Date(filteredData[indexData]?.time)\n//             );\n//           console.log(currentMonth);\n\n//           if (currentMonth === labels1[indexLabel]) {\n//             // check main category\n//             if (filteredData[indexData].category === \"income\") {\n//               currentAmount += Number(filteredData[indexData].price);\n//             }\n\n//             indexData++;\n//           } else indexCurrentDate = false;\n//         }\n\n//         data.push(currentAmount);\n\n//         currentAmount = 0;\n//         indexCurrentDate = true;\n//         indexLabel++;\n//       }\n//     }\n//   }\n//   // day base\n//   else {\n//     if (mainCategory === \"income\" && subCategory.length === 3) {\n//       const labelsLength = labels.length;\n//       let indexLabel = 0;\n//       let indexData = 0;\n//       let indexCurrentDate = true;\n//       let currentDate;\n//       let currentAmount = 0;\n\n//       while (indexLabel < labelsLength) {\n//         currentDate = `${year}-${labels[indexLabel].slice(0, 2)}-${labels[\n//           indexLabel\n//         ].slice(2)}`;\n\n//         // keep adding if it's still at current date(time)\n//         if (indexData < filteredData.length - 1) {\n//           while (indexCurrentDate) {\n//             // check date(time)\n//             if (filteredData[indexData].time === currentDate) {\n//               // check main category\n//               if (filteredData[indexData].category === \"income\") {\n//                 currentAmount += Number(filteredData[indexData].price);\n//               }\n\n//               indexData++;\n//             } else indexCurrentDate = false;\n//           }\n//         }\n\n//         data.push(currentAmount);\n\n//         currentAmount = 0;\n//         indexCurrentDate = true;\n//         indexLabel++;\n//       }\n//     }\n\n//     if (mainCategory === \"expense\" && subCategory.length === 6) {\n//       const labelsLength = labels.length;\n//       let indexLabel = 0;\n//       let indexData = 0;\n//       let indexCurrentDate = true;\n//       let currentDate;\n//       let currentAmount = 0;\n\n//       while (indexLabel < labelsLength) {\n//         currentDate = `${year}-${labels[indexLabel].slice(0, 2)}-${labels[\n//           indexLabel\n//         ].slice(2)}`;\n\n//         // keep adding if it's still at current date(time)\n\n//         while (indexCurrentDate) {\n//           // check date(time)\n//           if (filteredData[indexData]?.time === currentDate) {\n//             // check main category\n//             if (filteredData[indexData].category === \"expense\") {\n//               currentAmount += Number(filteredData[indexData].price);\n//             }\n\n//             indexData++;\n//           } else indexCurrentDate = false;\n//         }\n\n//         data.push(currentAmount);\n\n//         currentAmount = 0;\n//         indexCurrentDate = true;\n//         indexLabel++;\n//       }\n//     }\n//   }\n//   // console.log(filteredData);\n\n//   console.log(labels);\n//   console.log(data);\n//   // console.log(data);\n//   return data;\n// }\n\nfunction createLabelsArr(duration, startingDate) {\n  const today = new Date(startingDate);\n\n  let labels = [];\n\n  // one week\n  if (duration === \"7\") {\n    createLabelsArrHelper(labels, 7, 1, \"day\", today);\n  }\n\n  if (duration === \"14\") {\n    createLabelsArrHelper(labels, 14, 1, \"day\", today);\n  }\n\n  if (duration === \"30\") {\n    createLabelsArrHelper(labels, 30, 1, \"day\", today);\n  }\n\n  if (duration === \"90\") {\n    createLabelsArrHelper(labels, 30, 3, \"day\", today);\n  }\n\n  if (duration === \"6\") {\n    createLabelsArrHelper(labels, 6, 1, \"month\", today);\n  }\n\n  if (duration === \"12\") {\n    createLabelsArrHelper(labels, 12, 1, \"month\", today);\n  }\n\n  return labels;\n}\n\nfunction createLabelsArrHelper(\n  labels,\n  duration,\n  incrementAmount,\n  dayMonth,\n  today\n) {\n  let tmpDay = today;\n  let day;\n  let month;\n  let year = today.getFullYear();\n  let changeYear = false;\n\n  // if it's increment by month, the day is never change\n  // we could put it outisde for-loop\n  if (dayMonth === \"month\") {\n    if (tmpDay.getDate() < 10) day = `0${tmpDay.getDate()}`;\n    else day = tmpDay.getDate();\n  }\n\n  for (let i = 0; i < duration; i++) {\n    // incremenet by month\n    if (dayMonth === \"month\")\n      tmpDay.setMonth(tmpDay.getMonth() + incrementAmount);\n\n    // increment by day\n    if (dayMonth === \"day\") {\n      tmpDay.setDate(tmpDay.getDate() + incrementAmount);\n\n      // day will change, so put this inside for-loop\n      if (tmpDay.getDate() < 10) day = `0${tmpDay.getDate()}`;\n      else day = tmpDay.getDate();\n    }\n\n    if (tmpDay.getMonth() + 1 < 10) month = `0${tmpDay.getMonth() + 1}`;\n    else month = tmpDay.getMonth() + 1;\n\n    // increment year\n    if (changeYear) {\n      year++;\n      changeYear = false;\n    }\n    if (tmpDay.getMonth() === 11) changeYear = true;\n\n    labels.push(`${year}-${month}-${day}`);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}