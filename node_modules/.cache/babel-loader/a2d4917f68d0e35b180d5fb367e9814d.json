{"ast":null,"code":"var _jsxFileName = \"/Users/eyo/Desktop/project-expenseTracker-main/src/store/searchListData/SearchListDataProvider.js\",\n    _s = $RefreshSig$();\n\nimport { useReducer, useContext } from \"react\";\nimport ExpenseDataContext from \"../expenseData/expenseData--context\";\nimport SearchListDataContext from \"./searchListData--context\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet orginalObj;\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case \"ADD\":\n      {\n        const value = action.value;\n        const newObj = { ...state.constraintObj\n        };\n        newObj[`${action.id}-${action.value}`] = value;\n        return {\n          expenseData: reducerHelperFunction(newObj, orginalObj),\n          constraintObj: newObj\n        };\n      }\n\n    case \"REMOVE\":\n      {\n        const id = `${action.id}-${action.value}`;\n        const newObj = { ...state.constraintObj\n        };\n        delete newObj[id];\n        let newState;\n        if (Object.keys(newObj).length === 0) newState = orginalObj;else {\n          newState = reducerHelperFunction(newObj, orginalObj);\n        }\n        return {\n          expenseData: newState,\n          constraintObj: newObj\n        };\n      }\n\n    case \"SEARCH\":\n      {\n        let newState;\n        if (action.value.length === 0) newState = orginalObj;else {\n          newState = state.expenseData.filter(element => element.description.includes(action.value));\n        }\n        return {\n          expenseData: newState,\n          constraintObj: state.constraintObj\n        };\n      }\n\n    case \"SORT_TIME\":\n      {\n        let newState;\n        if (action.sort) newState = state.expenseData.sort((elementA, elementB) => Number(new Date(elementA.time)) - Number(new Date(elementB.time)));else newState = state.expenseData.sort((elementA, elementB) => Number(new Date(elementB.time)) - Number(new Date(elementA.time)));\n        return {\n          expenseData: newState,\n          constraintObj: state.constraintObj\n        };\n      }\n\n    case \"SORT_PRICE\":\n      {\n        let newState;\n        if (action.sort) newState = state.expenseData.sort((elementA, elementB) => Number(elementA.price) - Number(elementB.price));else newState = state.expenseData.sort((elementA, elementB) => Number(elementB.price) - Number(elementA.price));\n        return {\n          expenseData: newState,\n          constraintObj: state.constraintObj\n        };\n      }\n\n    case \"SORT_CATEGORY\":\n      {\n        const incomeDataArr = state.expenseData.filter(element => element.category === \"income\");\n        const expenseDataArr = state.expenseData.filter(element => element.category === \"expense\");\n        let newState;\n        if (action.sort) newState = [...incomeDataArr, ...expenseDataArr];else newState = [...expenseDataArr, ...incomeDataArr];\n        return {\n          expenseData: newState,\n          constraintObj: state.constraintObj\n        };\n      }\n\n    case \"DELETE\":\n      {\n        const newState = state.expenseData.filter(element => element.id !== action.id);\n        return { ...state,\n          expenseData: newState\n        };\n      }\n\n    default:\n      return state;\n  }\n}\n\nfunction SearchListDataProvider(props) {\n  _s();\n\n  const expenseDataCtx = useContext(ExpenseDataContext);\n  const [filteredData, setFilteredData] = useReducer(reducer, {\n    constraintObj: {},\n    expenseData: expenseDataCtx.expenseData\n  });\n  orginalObj = expenseDataCtx.expenseData;\n  const SearchListDataContextInitialObject = {\n    setFilteredData,\n    expenseData: filteredData.expenseData\n  };\n  return /*#__PURE__*/_jsxDEV(SearchListDataContext.Provider, {\n    value: SearchListDataContextInitialObject,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 130,\n    columnNumber: 5\n  }, this);\n}\n\n_s(SearchListDataProvider, \"nNHwEjELBJjjnLv8Smj1ouxyjYs=\");\n\n_c = SearchListDataProvider;\nexport default SearchListDataProvider;\n\nfunction filterTime(data, filterArr) {\n  return data; // no filter, just return all data\n\n  if (filterArr.length === 0) return data;\n  const date = new Date();\n  let dayArr = [Infinity, 0];\n  let monthArr = [Infinity, 0];\n  let yearArr = [];\n  let tmpA, tmpB, tmpC;\n  filterArr.forEach(element => {\n    if (element[0] === \"d\") {\n      [tmpA, tmpB, tmpC] = element.split(\",\");\n      if (Number(tmpC) < dayArr[0]) dayArr[0] = Number(tmpC);\n      if (Number(tmpB) > dayArr[1]) dayArr[1] = Number(tmpB);\n    }\n\n    if (element[0] === \"m\") {\n      [tmpA, tmpB, tmpC] = element.split(\",\");\n      if (Number(tmpC) < monthArr[0]) monthArr[0] = Number(tmpC);\n      if (Number(tmpB) > monthArr[1]) monthArr[1] = Number(tmpB);\n    }\n\n    if (element[0] === \"y\") yearArr.push(element.split(\",\")[1]);\n  });\n  let filteredData = []; // if only having day-base array, then check 1) year 2) month 3) range of day\n\n  if (monthArr[0] === Infinity && monthArr[1] === 0 && yearArr.length === 0) {\n    filteredData = data.filter(element => Number(element.time.slice(0, 4)) === date.getFullYear() && Number(element.time.slice(5, 7)) === date.getMonth() + 1 && Number(element.time.slice(8)) <= dayArr[1] && Number(element.time.slice(8)) >= dayArr[0]);\n  } // if having month-base array and not having year-base array, then we only need to check 1) year 2) month\n\n\n  if (monthArr[0] !== Infinity && monthArr[1] !== 0 && yearArr.length === 0) {\n    filteredData = data.filter(element => Number(element.time.slice(0, 4)) === date.getFullYear() && Number(element.time.slice(5, 7)) <= Number(monthArr[1]) && Number(element.time.slice(5, 7)) >= Number(monthArr[0]));\n  } // if having year-base array, then only need to check 1) year\n\n\n  if (yearArr.length !== 0) {\n    filteredData = data.filter(element => yearArr.includes(element.time.slice(0, 4)));\n  }\n\n  return filteredData;\n}\n\nfunction filterTime1(data, filterArr) {\n  console.log(\"aa\");\n  console.log(data);\n  console.log(filterArr);\n}\n\nfunction filterCategory(data, filterArr) {\n  if (filterArr.length === 0) return data;\n  return data.filter(element => filterArr.includes(element.mainCate));\n}\n\nfunction filterPrice(data, filterArr) {\n  if (filterArr.length === 0) return data;\n  let min = Infinity;\n  let max = 0;\n  let tmpMin;\n  let tmpMax;\n  const newFilterArr = filterArr.map(arr => arr.split(\",\"));\n  newFilterArr.forEach(element => {\n    [tmpMin, tmpMax] = element;\n    if (Number(tmpMin) < min) min = Number(tmpMin);\n    if (Number(tmpMax) > max) max = Number(tmpMax);\n  });\n  return data.filter(element => Number(element.price) >= Number(min) && Number(element.price) <= Number(max));\n}\n\nfunction reducerHelperFunction(newObj, expenseData) {\n  let currentType;\n  let currentKey;\n  let timeArr = [];\n  let priceArr = [];\n  let categoryArr = [];\n\n  for (const key of Object.keys(newObj)) {\n    [currentType, currentKey] = key.split(\"-\");\n    if (currentType === \"category\") categoryArr.push(currentKey);else if (currentType === \"time\") timeArr.push(currentKey);else priceArr.push(currentKey);\n  }\n\n  filterTime1(expenseData, timeArr);\n  return filterCategory(filterPrice(filterTime(expenseData, timeArr), priceArr), categoryArr);\n}\n/*\nfunction reducer(state, action) {\n  switch (action.type) {\n    case \"TIME\": {\n      return reducerTime(state, action);\n    }\n\n    case \"PRICE\": {\n      return reducerPrice(state, action);\n    }\n\n    case \"CATEGORY\": {\n      return reducerCategory(state, action);\n    }\n\n    default:\n      break;\n  }\n}\n\nfunction reducerCategory(state, action) {\n  let newState;\n  let totalCount = state.checkTotalCount;\n  let categoryCount = state.checkCategoryCount;\n\n  if (action.checked) {\n    if (totalCount === 0) {\n      totalCount++;\n      categoryCount++;\n\n      newState = state.expenseData.filter(\n        (element) => element.mainCate === action.value\n      );\n    } else {\n      totalCount++;\n      categoryCount++;\n\n      if (state.checkPriceCount !== 0 || state.checkTimeCount !== 0) {\n        newState = state.expenseData.filter(\n          (element) => element.mainCate === action.value\n        );\n      } else {\n        const concatArr = orginalObj.filter(\n          (element) => element.mainCate === action.value\n        );\n\n        newState = state.expenseData.concat(concatArr);\n      }\n    }\n  } else {\n    totalCount--;\n    categoryCount--;\n\n    if (totalCount === 0) newState = orginalObj;\n    else {\n      newState = state.expenseData.filter(\n        (element) => element.mainCate !== action.value\n      );\n    }\n  }\n\n  return {\n    checkTotalCount: totalCount,\n    checkTimeCount: state.checkTimeCount,\n    checkPriceCount: state.checkPriceCount,\n    checkCategoryCount: categoryCount,\n    expenseData: newState,\n  };\n}\n\nfunction reducerPrice(state, action) {\n  const [lowestPrice, highestPrice] = action.value.split(\",\");\n  let newState;\n  let totalCount = state.checkTotalCount;\n  let priceCount = state.checkPriceCount;\n\n  if (action.checked) {\n    if (totalCount === 0) {\n      totalCount++;\n      priceCount++;\n\n      newState = state.expenseData.filter(\n        (element) =>\n          Number(element.price) >= lowestPrice &&\n          Number(element.price) <= highestPrice\n      );\n    } else {\n      totalCount++;\n      priceCount++;\n\n      if (state.checkTimeCount !== 0 || state.checkCategoryCount !== 0) {\n        newState = state.expenseData.filter(\n          (element) =>\n            Number(element.price) >= lowestPrice &&\n            Number(element.price) <= highestPrice\n        );\n      } else {\n        const concatArr = orginalObj.filter(\n          (element) =>\n            Number(element.price) >= lowestPrice &&\n            Number(element.price) <= highestPrice\n        );\n\n        newState = state.expenseData.concat(concatArr);\n      }\n    }\n  } else {\n    totalCount--;\n    priceCount--;\n\n    if (totalCount === 0) newState = orginalObj;\n    else {\n      newState = state.expenseData.filter(\n        (element) =>\n          Number(element.price) < lowestPrice ||\n          Number(element.price) > highestPrice\n      );\n    }\n  }\n\n  return {\n    checkTotalCount: totalCount,\n    checkTimeCount: state.checkTimeCount,\n    checkPriceCount: priceCount,\n    checkCategoryCount: state.checkCategoryCount,\n    expenseData: newState,\n  };\n}\n\nfunction reducerTime(state, action) {\n  let dateArr = [];\n  let newState;\n\n  // days\n  if (action.value < 30) {\n    const currenDate = date.getDate();\n\n    if (action.value === 0) dateArr.push(currenDate);\n    else\n      for (let i = 1; i <= action.value; i++) {\n        dateArr.push(currenDate - i);\n      }\n\n    if (action.checked) {\n      newState = state.expenseData.filter(\n        (element) =>\n          dateArr.includes(Number(element.time.slice(8))) &&\n          Number(element.time.slice(5, 7)) === date.getMonth() + 1\n      );\n    } else {\n      const concatArr = orginalObj.filter(\n        (element) =>\n          !dateArr.includes(Number(element.time.slice(8))) ||\n          !(Number(element.time.slice(5, 7)) === date.getMonth() + 1)\n      );\n\n      newState = state.expenseData.concat(concatArr);\n    }\n  }\n  // months\n  else if (action.value === 30 || action.value === 90) {\n    if (action.value === 30) dateArr.push(date.getMonth());\n    else {\n      for (let i = 0; i < 3; i++) {\n        dateArr.push(date.getMonth() - i);\n      }\n    }\n\n    if (action.checked) {\n      newState = state.expenseData.filter((element) =>\n        dateArr.includes(Number(element.time.slice(5, 7)))\n      );\n    } else {\n      const concatArr = orginalObj.filter(\n        (element) => !dateArr.includes(Number(element.time.slice(5, 7)))\n      );\n\n      newState = state.expenseData.concat(concatArr);\n    }\n  }\n  // years\n  else {\n    dateArr.push(date.getFullYear() - 1);\n\n    if (action.checked) {\n      newState = state.expenseData.filter((element) =>\n        dateArr.includes(Number(element.time.slice(0, 4)))\n      );\n    } else {\n      const concatArr = orginalObj.filter(\n        (element) => !dateArr.includes(Number(element.time.slice(0, 4)))\n      );\n\n      newState = state.expenseData.concat(concatArr);\n    }\n  }\n\n  return { ...state, expenseData: newState };\n}\n\nconst checkboxTime = [\n  { category: \"time\", text: \"today\", value: 0, checked: false },\n  { category: \"time\", text: \"yesterady\", value: 1, checked: false },\n  { category: \"time\", text: \"three days ago\", value: 3, checked: false },\n  { category: \"time\", text: \"a week ago\", value: 7, checked: false },\n  { category: \"time\", text: \"a month ago\", value: 30, checked: false },\n  { category: \"time\", text: \"three months ago\", value: 90, checked: false },\n  { category: \"time\", text: \"a year ago\", value: 100, checked: false },\n  { category: \"price\", text: \"0 ~ $100\", value: [0, 100], checked: false },\n  { category: \"price\", text: \"$100 ~ $300\", value: [100, 300], checked: false },\n  { category: \"price\", text: \"$300 ~ $500\", value: [300, 500], checked: false },\n  {\n    category: \"price\",\n    text: \"$500 ~ $1000\",\n    value: [500, 1000],\n    checked: false,\n  },\n  {\n    category: \"price\",\n    text: \"above $1000\",\n    value: [1000, Infinity],\n    checked: false,\n  },\n];\n\n*/\n\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchListDataProvider\");","map":{"version":3,"sources":["/Users/eyo/Desktop/project-expenseTracker-main/src/store/searchListData/SearchListDataProvider.js"],"names":["useReducer","useContext","ExpenseDataContext","SearchListDataContext","orginalObj","reducer","state","action","type","value","newObj","constraintObj","id","expenseData","reducerHelperFunction","newState","Object","keys","length","filter","element","description","includes","sort","elementA","elementB","Number","Date","time","price","incomeDataArr","category","expenseDataArr","SearchListDataProvider","props","expenseDataCtx","filteredData","setFilteredData","SearchListDataContextInitialObject","children","filterTime","data","filterArr","date","dayArr","Infinity","monthArr","yearArr","tmpA","tmpB","tmpC","forEach","split","push","slice","getFullYear","getMonth","filterTime1","console","log","filterCategory","mainCate","filterPrice","min","max","tmpMin","tmpMax","newFilterArr","map","arr","currentType","currentKey","timeArr","priceArr","categoryArr","key"],"mappings":"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":["import { useReducer, useContext } from \"react\";\nimport ExpenseDataContext from \"../expenseData/expenseData--context\";\nimport SearchListDataContext from \"./searchListData--context\";\n\nlet orginalObj;\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case \"ADD\": {\n      const value = action.value;\n\n      const newObj = { ...state.constraintObj };\n      newObj[`${action.id}-${action.value}`] = value;\n\n      return {\n        expenseData: reducerHelperFunction(newObj, orginalObj),\n        constraintObj: newObj,\n      };\n    }\n\n    case \"REMOVE\": {\n      const id = `${action.id}-${action.value}`;\n\n      const newObj = { ...state.constraintObj };\n\n      delete newObj[id];\n\n      let newState;\n      if (Object.keys(newObj).length === 0) newState = orginalObj;\n      else {\n        newState = reducerHelperFunction(newObj, orginalObj);\n      }\n\n      return { expenseData: newState, constraintObj: newObj };\n    }\n\n    case \"SEARCH\": {\n      let newState;\n\n      if (action.value.length === 0) newState = orginalObj;\n      else {\n        newState = state.expenseData.filter((element) =>\n          element.description.includes(action.value)\n        );\n      }\n\n      return { expenseData: newState, constraintObj: state.constraintObj };\n    }\n\n    case \"SORT_TIME\": {\n      let newState;\n\n      if (action.sort)\n        newState = state.expenseData.sort(\n          (elementA, elementB) =>\n            Number(new Date(elementA.time)) - Number(new Date(elementB.time))\n        );\n      else\n        newState = state.expenseData.sort(\n          (elementA, elementB) =>\n            Number(new Date(elementB.time)) - Number(new Date(elementA.time))\n        );\n\n      return { expenseData: newState, constraintObj: state.constraintObj };\n    }\n\n    case \"SORT_PRICE\": {\n      let newState;\n\n      if (action.sort)\n        newState = state.expenseData.sort(\n          (elementA, elementB) =>\n            Number(elementA.price) - Number(elementB.price)\n        );\n      else\n        newState = state.expenseData.sort(\n          (elementA, elementB) =>\n            Number(elementB.price) - Number(elementA.price)\n        );\n\n      return { expenseData: newState, constraintObj: state.constraintObj };\n    }\n\n    case \"SORT_CATEGORY\": {\n      const incomeDataArr = state.expenseData.filter(\n        (element) => element.category === \"income\"\n      );\n\n      const expenseDataArr = state.expenseData.filter(\n        (element) => element.category === \"expense\"\n      );\n\n      let newState;\n\n      if (action.sort) newState = [...incomeDataArr, ...expenseDataArr];\n      else newState = [...expenseDataArr, ...incomeDataArr];\n\n      return { expenseData: newState, constraintObj: state.constraintObj };\n    }\n\n    case \"DELETE\": {\n      const newState = state.expenseData.filter(\n        (element) => element.id !== action.id\n      );\n\n      return { ...state, expenseData: newState };\n    }\n\n    default:\n      return state;\n  }\n}\n\nfunction SearchListDataProvider(props) {\n  const expenseDataCtx = useContext(ExpenseDataContext);\n\n  const [filteredData, setFilteredData] = useReducer(reducer, {\n    constraintObj: {},\n    expenseData: expenseDataCtx.expenseData,\n  });\n\n  orginalObj = expenseDataCtx.expenseData;\n\n  const SearchListDataContextInitialObject = {\n    setFilteredData,\n    expenseData: filteredData.expenseData,\n  };\n\n  return (\n    <SearchListDataContext.Provider value={SearchListDataContextInitialObject}>\n      {props.children}\n    </SearchListDataContext.Provider>\n  );\n}\n\nexport default SearchListDataProvider;\n\nfunction filterTime(data, filterArr) {\n  return data;\n  // no filter, just return all data\n  if (filterArr.length === 0) return data;\n\n  const date = new Date();\n  let dayArr = [Infinity, 0];\n  let monthArr = [Infinity, 0];\n  let yearArr = [];\n  let tmpA, tmpB, tmpC;\n\n  filterArr.forEach((element) => {\n    if (element[0] === \"d\") {\n      [tmpA, tmpB, tmpC] = element.split(\",\");\n\n      if (Number(tmpC) < dayArr[0]) dayArr[0] = Number(tmpC);\n      if (Number(tmpB) > dayArr[1]) dayArr[1] = Number(tmpB);\n    }\n    if (element[0] === \"m\") {\n      [tmpA, tmpB, tmpC] = element.split(\",\");\n\n      if (Number(tmpC) < monthArr[0]) monthArr[0] = Number(tmpC);\n      if (Number(tmpB) > monthArr[1]) monthArr[1] = Number(tmpB);\n    }\n    if (element[0] === \"y\") yearArr.push(element.split(\",\")[1]);\n  });\n\n  let filteredData = [];\n\n  // if only having day-base array, then check 1) year 2) month 3) range of day\n  if (monthArr[0] === Infinity && monthArr[1] === 0 && yearArr.length === 0) {\n    filteredData = data.filter(\n      (element) =>\n        Number(element.time.slice(0, 4)) === date.getFullYear() &&\n        Number(element.time.slice(5, 7)) === date.getMonth() + 1 &&\n        Number(element.time.slice(8)) <= dayArr[1] &&\n        Number(element.time.slice(8)) >= dayArr[0]\n    );\n  }\n\n  // if having month-base array and not having year-base array, then we only need to check 1) year 2) month\n  if (monthArr[0] !== Infinity && monthArr[1] !== 0 && yearArr.length === 0) {\n    filteredData = data.filter(\n      (element) =>\n        Number(element.time.slice(0, 4)) === date.getFullYear() &&\n        Number(element.time.slice(5, 7)) <= Number(monthArr[1]) &&\n        Number(element.time.slice(5, 7)) >= Number(monthArr[0])\n    );\n  }\n\n  // if having year-base array, then only need to check 1) year\n  if (yearArr.length !== 0) {\n    filteredData = data.filter((element) =>\n      yearArr.includes(element.time.slice(0, 4))\n    );\n  }\n\n  return filteredData;\n}\n\nfunction filterTime1(data, filterArr) {\n  console.log(\"aa\");\n  console.log(data);\n\n  console.log(filterArr);\n}\n\nfunction filterCategory(data, filterArr) {\n  if (filterArr.length === 0) return data;\n\n  return data.filter((element) => filterArr.includes(element.mainCate));\n}\n\nfunction filterPrice(data, filterArr) {\n  if (filterArr.length === 0) return data;\n\n  let min = Infinity;\n  let max = 0;\n  let tmpMin;\n  let tmpMax;\n  const newFilterArr = filterArr.map((arr) => arr.split(\",\"));\n  newFilterArr.forEach((element) => {\n    [tmpMin, tmpMax] = element;\n\n    if (Number(tmpMin) < min) min = Number(tmpMin);\n    if (Number(tmpMax) > max) max = Number(tmpMax);\n  });\n\n  return data.filter(\n    (element) =>\n      Number(element.price) >= Number(min) &&\n      Number(element.price) <= Number(max)\n  );\n}\n\nfunction reducerHelperFunction(newObj, expenseData) {\n  let currentType;\n  let currentKey;\n  let timeArr = [];\n  let priceArr = [];\n  let categoryArr = [];\n\n  for (const key of Object.keys(newObj)) {\n    [currentType, currentKey] = key.split(\"-\");\n\n    if (currentType === \"category\") categoryArr.push(currentKey);\n    else if (currentType === \"time\") timeArr.push(currentKey);\n    else priceArr.push(currentKey);\n  }\n\n  filterTime1(expenseData, timeArr);\n\n  return filterCategory(\n    filterPrice(filterTime(expenseData, timeArr), priceArr),\n    categoryArr\n  );\n}\n/*\nfunction reducer(state, action) {\n  switch (action.type) {\n    case \"TIME\": {\n      return reducerTime(state, action);\n    }\n\n    case \"PRICE\": {\n      return reducerPrice(state, action);\n    }\n\n    case \"CATEGORY\": {\n      return reducerCategory(state, action);\n    }\n\n    default:\n      break;\n  }\n}\n\nfunction reducerCategory(state, action) {\n  let newState;\n  let totalCount = state.checkTotalCount;\n  let categoryCount = state.checkCategoryCount;\n\n  if (action.checked) {\n    if (totalCount === 0) {\n      totalCount++;\n      categoryCount++;\n\n      newState = state.expenseData.filter(\n        (element) => element.mainCate === action.value\n      );\n    } else {\n      totalCount++;\n      categoryCount++;\n\n      if (state.checkPriceCount !== 0 || state.checkTimeCount !== 0) {\n        newState = state.expenseData.filter(\n          (element) => element.mainCate === action.value\n        );\n      } else {\n        const concatArr = orginalObj.filter(\n          (element) => element.mainCate === action.value\n        );\n\n        newState = state.expenseData.concat(concatArr);\n      }\n    }\n  } else {\n    totalCount--;\n    categoryCount--;\n\n    if (totalCount === 0) newState = orginalObj;\n    else {\n      newState = state.expenseData.filter(\n        (element) => element.mainCate !== action.value\n      );\n    }\n  }\n\n  return {\n    checkTotalCount: totalCount,\n    checkTimeCount: state.checkTimeCount,\n    checkPriceCount: state.checkPriceCount,\n    checkCategoryCount: categoryCount,\n    expenseData: newState,\n  };\n}\n\nfunction reducerPrice(state, action) {\n  const [lowestPrice, highestPrice] = action.value.split(\",\");\n  let newState;\n  let totalCount = state.checkTotalCount;\n  let priceCount = state.checkPriceCount;\n\n  if (action.checked) {\n    if (totalCount === 0) {\n      totalCount++;\n      priceCount++;\n\n      newState = state.expenseData.filter(\n        (element) =>\n          Number(element.price) >= lowestPrice &&\n          Number(element.price) <= highestPrice\n      );\n    } else {\n      totalCount++;\n      priceCount++;\n\n      if (state.checkTimeCount !== 0 || state.checkCategoryCount !== 0) {\n        newState = state.expenseData.filter(\n          (element) =>\n            Number(element.price) >= lowestPrice &&\n            Number(element.price) <= highestPrice\n        );\n      } else {\n        const concatArr = orginalObj.filter(\n          (element) =>\n            Number(element.price) >= lowestPrice &&\n            Number(element.price) <= highestPrice\n        );\n\n        newState = state.expenseData.concat(concatArr);\n      }\n    }\n  } else {\n    totalCount--;\n    priceCount--;\n\n    if (totalCount === 0) newState = orginalObj;\n    else {\n      newState = state.expenseData.filter(\n        (element) =>\n          Number(element.price) < lowestPrice ||\n          Number(element.price) > highestPrice\n      );\n    }\n  }\n\n  return {\n    checkTotalCount: totalCount,\n    checkTimeCount: state.checkTimeCount,\n    checkPriceCount: priceCount,\n    checkCategoryCount: state.checkCategoryCount,\n    expenseData: newState,\n  };\n}\n\nfunction reducerTime(state, action) {\n  let dateArr = [];\n  let newState;\n\n  // days\n  if (action.value < 30) {\n    const currenDate = date.getDate();\n\n    if (action.value === 0) dateArr.push(currenDate);\n    else\n      for (let i = 1; i <= action.value; i++) {\n        dateArr.push(currenDate - i);\n      }\n\n    if (action.checked) {\n      newState = state.expenseData.filter(\n        (element) =>\n          dateArr.includes(Number(element.time.slice(8))) &&\n          Number(element.time.slice(5, 7)) === date.getMonth() + 1\n      );\n    } else {\n      const concatArr = orginalObj.filter(\n        (element) =>\n          !dateArr.includes(Number(element.time.slice(8))) ||\n          !(Number(element.time.slice(5, 7)) === date.getMonth() + 1)\n      );\n\n      newState = state.expenseData.concat(concatArr);\n    }\n  }\n  // months\n  else if (action.value === 30 || action.value === 90) {\n    if (action.value === 30) dateArr.push(date.getMonth());\n    else {\n      for (let i = 0; i < 3; i++) {\n        dateArr.push(date.getMonth() - i);\n      }\n    }\n\n    if (action.checked) {\n      newState = state.expenseData.filter((element) =>\n        dateArr.includes(Number(element.time.slice(5, 7)))\n      );\n    } else {\n      const concatArr = orginalObj.filter(\n        (element) => !dateArr.includes(Number(element.time.slice(5, 7)))\n      );\n\n      newState = state.expenseData.concat(concatArr);\n    }\n  }\n  // years\n  else {\n    dateArr.push(date.getFullYear() - 1);\n\n    if (action.checked) {\n      newState = state.expenseData.filter((element) =>\n        dateArr.includes(Number(element.time.slice(0, 4)))\n      );\n    } else {\n      const concatArr = orginalObj.filter(\n        (element) => !dateArr.includes(Number(element.time.slice(0, 4)))\n      );\n\n      newState = state.expenseData.concat(concatArr);\n    }\n  }\n\n  return { ...state, expenseData: newState };\n}\n\nconst checkboxTime = [\n  { category: \"time\", text: \"today\", value: 0, checked: false },\n  { category: \"time\", text: \"yesterady\", value: 1, checked: false },\n  { category: \"time\", text: \"three days ago\", value: 3, checked: false },\n  { category: \"time\", text: \"a week ago\", value: 7, checked: false },\n  { category: \"time\", text: \"a month ago\", value: 30, checked: false },\n  { category: \"time\", text: \"three months ago\", value: 90, checked: false },\n  { category: \"time\", text: \"a year ago\", value: 100, checked: false },\n  { category: \"price\", text: \"0 ~ $100\", value: [0, 100], checked: false },\n  { category: \"price\", text: \"$100 ~ $300\", value: [100, 300], checked: false },\n  { category: \"price\", text: \"$300 ~ $500\", value: [300, 500], checked: false },\n  {\n    category: \"price\",\n    text: \"$500 ~ $1000\",\n    value: [500, 1000],\n    checked: false,\n  },\n  {\n    category: \"price\",\n    text: \"above $1000\",\n    value: [1000, Infinity],\n    checked: false,\n  },\n];\n\n*/\n"]},"metadata":{},"sourceType":"module"}