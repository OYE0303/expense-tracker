{"ast":null,"code":"import createPreAccAmount from \"./createPreAccAmount\";\n\nfunction createChartDataArr(labels, expenseData) {\n  const finalDataArr = [];\n  labels.forEach(label => {\n    const curAccAmount = createPreAccAmount(\"income\", expenseData, label) - createPreAccAmount(\"expense\", expenseData, label);\n    finalDataArr.push(curAccAmount);\n  });\n  console.log(expenseData);\n  return finalDataArr;\n}\n\nfunction test(labels, expenseData) {\n  const finalDataArr = [];\n  console.log(labels);\n  console.log(expenseData);\n  let curAccAmount = 0;\n  let expensDataIndex = 0;\n  let labelIndex = 0;\n  let curLabelTime = Number(new Date(labels[0]));\n\n  while (expensDataIndex < expenseData.length) {\n    const data = expenseData[expensDataIndex];\n\n    if (Number(new Date(data.time)) > curLabelTime) {\n      labelIndex++;\n      curLabelTime = Number(new Date(labels[labelIndex]));\n      finalDataArr.push(curAccAmount);\n    } else {\n      curAccAmount += Number(data.price);\n      expensDataIndex++;\n    }\n  }\n\n  finalDataArr.push(curAccAmount);\n  return finalDataArr;\n}\n\nconst ggg = [{\n  category: \"expense\",\n  mainCate: \"food\",\n  subCate: \"breakfast\",\n  time: \"2021-09-15\",\n  price: \"100\"\n}, {\n  category: \"expense\",\n  mainCate: \"food\",\n  subCate: \"breakfast\",\n  time: \"2021-09-15\",\n  price: \"200\"\n}, {\n  category: \"expense\",\n  mainCate: \"food\",\n  subCate: \"breakfast\",\n  time: \"2021-09-15\",\n  price: \"300\"\n}, {\n  category: \"expense\",\n  mainCate: \"food\",\n  subCate: \"breakfast\",\n  time: \"2021-09-16\",\n  price: \"100\"\n}, {\n  category: \"expense\",\n  mainCate: \"food\",\n  subCate: \"breakfast\",\n  time: \"2021-09-16\",\n  price: \"200\"\n}, {\n  category: \"expense\",\n  mainCate: \"food\",\n  subCate: \"breakfast\",\n  time: \"2021-09-16\",\n  price: \"300\"\n}, {\n  category: \"expense\",\n  mainCate: \"food\",\n  subCate: \"breakfast\",\n  time: \"2021-09-17\",\n  price: \"100\"\n}, {\n  category: \"expense\",\n  mainCate: \"food\",\n  subCate: \"breakfast\",\n  time: \"2021-09-17\",\n  price: \"200\"\n}, {\n  category: \"expense\",\n  mainCate: \"food\",\n  subCate: \"breakfast\",\n  time: \"2021-09-17\",\n  price: \"300\"\n}, {\n  category: \"expense\",\n  mainCate: \"food\",\n  subCate: \"breakfast\",\n  time: \"2021-09-18\",\n  price: \"400\"\n}, {\n  category: \"expense\",\n  mainCate: \"food\",\n  subCate: \"breakfast\",\n  time: \"2021-09-19\",\n  price: \"500\"\n}, {\n  category: \"expense\",\n  mainCate: \"food\",\n  subCate: \"breakfast\",\n  time: \"2021-09-20\",\n  price: \"600\"\n}, {\n  category: \"expense\",\n  mainCate: \"food\",\n  subCate: \"breakfast\",\n  time: \"2021-09-21\",\n  price: \"700\"\n}];\nconsole.log(test([\"2021-09-15\", \"2021-09-16\", \"2021-09-17\", \"2021-09-18\", \"2021-09-19\", \"2021-09-20\", \"2021-09-21\"], ggg));\nexport default createChartDataArr;\n/*\nfunction createChartDataArr1(labels, expenseData) {\n  const newExpenseData = createFilteredData(labels, expenseData);\n\n  const prevTotalAccAmount =\n    createPreAccAmount(\"income\", expenseData, labels[0]) -\n    createPreAccAmount(\"expense\", expenseData, labels[0]);\n\n  const newExpenseDataExpense = newExpenseData.filter(\n    (element) => element.category === \"expense\"\n  );\n  const newExpenseDataIncome = newExpenseData.filter(\n    (element) => element.category === \"income\"\n  );\n\n  const dataArrExpense = createDataArrAccount(labels, newExpenseDataExpense);\n  const dataArrIncome = createDataArrAccount(labels, newExpenseDataIncome);\n\n  const finalDataArr = [];\n\n  dataArrExpense.forEach((expense, index) => {\n    finalDataArr.push(dataArrIncome[index] - expense + prevTotalAccAmount);\n  });\n\n  return finalDataArr;\n}\n*/\n\n/*\nfunction createDataArrAccount(labels, expensData) {\n  const data = [];\n  let indexCurrentDate = true;\n  let currentAmount = 0;\n  let indexData = 0;\n  let yearLabel, monthLabel, dayLabel, yearDate, monthData, dayData;\n\n  for (let i = 0; i < labels.length; i++) {\n    yearLabel = labels[i].slice(0, 4);\n    monthLabel = labels[i].slice(5, 7);\n    dayLabel = labels[i].slice(8);\n\n    while (indexCurrentDate) {\n      yearDate = expensData[indexData]?.time.slice(0, 4);\n      monthData = expensData[indexData]?.time.slice(5, 7);\n      dayData = expensData[indexData]?.time.slice(8);\n\n      if (\n        yearLabel === yearDate &&\n        monthLabel === monthData &&\n        dayLabel >= dayData\n      ) {\n        currentAmount += Number(expensData[indexData].price);\n        indexData++;\n      } else indexCurrentDate = false;\n    }\n\n    data.push(currentAmount);\n    indexCurrentDate = true;\n  }\n\n  return data;\n}\n\n*/","map":{"version":3,"sources":["/Users/eyo/Desktop/project-expenseTracker-main/src/Others/CreateAccountData/CreateChartDataArr.js"],"names":["createPreAccAmount","createChartDataArr","labels","expenseData","finalDataArr","forEach","label","curAccAmount","push","console","log","test","expensDataIndex","labelIndex","curLabelTime","Number","Date","length","data","time","price","ggg","category","mainCate","subCate"],"mappings":"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","sourcesContent":["import createPreAccAmount from \"./createPreAccAmount\";\n\nfunction createChartDataArr(labels, expenseData) {\n  const finalDataArr = [];\n\n  labels.forEach((label) => {\n    const curAccAmount =\n      createPreAccAmount(\"income\", expenseData, label) -\n      createPreAccAmount(\"expense\", expenseData, label);\n\n    finalDataArr.push(curAccAmount);\n  });\n\n  console.log(expenseData);\n\n  return finalDataArr;\n}\n\nfunction test(labels, expenseData) {\n  const finalDataArr = [];\n\n  console.log(labels);\n  console.log(expenseData);\n\n  let curAccAmount = 0;\n  let expensDataIndex = 0;\n  let labelIndex = 0;\n\n  let curLabelTime = Number(new Date(labels[0]));\n\n  while (expensDataIndex < expenseData.length) {\n    const data = expenseData[expensDataIndex];\n\n    if (Number(new Date(data.time)) > curLabelTime) {\n      labelIndex++;\n      curLabelTime = Number(new Date(labels[labelIndex]));\n      finalDataArr.push(curAccAmount);\n    } else {\n      curAccAmount += Number(data.price);\n      expensDataIndex++;\n    }\n  }\n\n  finalDataArr.push(curAccAmount);\n\n  return finalDataArr;\n}\n\nconst ggg = [\n  {\n    category: \"expense\",\n    mainCate: \"food\",\n    subCate: \"breakfast\",\n    time: \"2021-09-15\",\n    price: \"100\",\n  },\n  {\n    category: \"expense\",\n    mainCate: \"food\",\n    subCate: \"breakfast\",\n    time: \"2021-09-15\",\n    price: \"200\",\n  },\n  {\n    category: \"expense\",\n    mainCate: \"food\",\n    subCate: \"breakfast\",\n    time: \"2021-09-15\",\n    price: \"300\",\n  },\n  {\n    category: \"expense\",\n    mainCate: \"food\",\n    subCate: \"breakfast\",\n    time: \"2021-09-16\",\n    price: \"100\",\n  },\n  {\n    category: \"expense\",\n    mainCate: \"food\",\n    subCate: \"breakfast\",\n    time: \"2021-09-16\",\n    price: \"200\",\n  },\n  {\n    category: \"expense\",\n    mainCate: \"food\",\n    subCate: \"breakfast\",\n    time: \"2021-09-16\",\n    price: \"300\",\n  },\n  {\n    category: \"expense\",\n    mainCate: \"food\",\n    subCate: \"breakfast\",\n    time: \"2021-09-17\",\n    price: \"100\",\n  },\n  {\n    category: \"expense\",\n    mainCate: \"food\",\n    subCate: \"breakfast\",\n    time: \"2021-09-17\",\n    price: \"200\",\n  },\n  {\n    category: \"expense\",\n    mainCate: \"food\",\n    subCate: \"breakfast\",\n    time: \"2021-09-17\",\n    price: \"300\",\n  },\n\n  {\n    category: \"expense\",\n    mainCate: \"food\",\n    subCate: \"breakfast\",\n    time: \"2021-09-18\",\n    price: \"400\",\n  },\n\n  {\n    category: \"expense\",\n    mainCate: \"food\",\n    subCate: \"breakfast\",\n    time: \"2021-09-19\",\n    price: \"500\",\n  },\n  {\n    category: \"expense\",\n    mainCate: \"food\",\n    subCate: \"breakfast\",\n    time: \"2021-09-20\",\n    price: \"600\",\n  },\n  {\n    category: \"expense\",\n    mainCate: \"food\",\n    subCate: \"breakfast\",\n    time: \"2021-09-21\",\n    price: \"700\",\n  },\n];\n\nconsole.log(\n  test(\n    [\n      \"2021-09-15\",\n      \"2021-09-16\",\n      \"2021-09-17\",\n      \"2021-09-18\",\n      \"2021-09-19\",\n      \"2021-09-20\",\n      \"2021-09-21\",\n    ],\n    ggg\n  )\n);\n\nexport default createChartDataArr;\n\n/*\nfunction createChartDataArr1(labels, expenseData) {\n  const newExpenseData = createFilteredData(labels, expenseData);\n\n  const prevTotalAccAmount =\n    createPreAccAmount(\"income\", expenseData, labels[0]) -\n    createPreAccAmount(\"expense\", expenseData, labels[0]);\n\n  const newExpenseDataExpense = newExpenseData.filter(\n    (element) => element.category === \"expense\"\n  );\n  const newExpenseDataIncome = newExpenseData.filter(\n    (element) => element.category === \"income\"\n  );\n\n  const dataArrExpense = createDataArrAccount(labels, newExpenseDataExpense);\n  const dataArrIncome = createDataArrAccount(labels, newExpenseDataIncome);\n\n  const finalDataArr = [];\n\n  dataArrExpense.forEach((expense, index) => {\n    finalDataArr.push(dataArrIncome[index] - expense + prevTotalAccAmount);\n  });\n\n  return finalDataArr;\n}\n*/\n\n/*\nfunction createDataArrAccount(labels, expensData) {\n  const data = [];\n  let indexCurrentDate = true;\n  let currentAmount = 0;\n  let indexData = 0;\n  let yearLabel, monthLabel, dayLabel, yearDate, monthData, dayData;\n\n  for (let i = 0; i < labels.length; i++) {\n    yearLabel = labels[i].slice(0, 4);\n    monthLabel = labels[i].slice(5, 7);\n    dayLabel = labels[i].slice(8);\n\n    while (indexCurrentDate) {\n      yearDate = expensData[indexData]?.time.slice(0, 4);\n      monthData = expensData[indexData]?.time.slice(5, 7);\n      dayData = expensData[indexData]?.time.slice(8);\n\n      if (\n        yearLabel === yearDate &&\n        monthLabel === monthData &&\n        dayLabel >= dayData\n      ) {\n        currentAmount += Number(expensData[indexData].price);\n        indexData++;\n      } else indexCurrentDate = false;\n    }\n\n    data.push(currentAmount);\n    indexCurrentDate = true;\n  }\n\n  return data;\n}\n\n*/\n"]},"metadata":{},"sourceType":"module"}