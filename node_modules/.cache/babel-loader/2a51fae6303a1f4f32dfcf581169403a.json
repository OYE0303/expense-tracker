{"ast":null,"code":"import createWeeklyData from \"../createWeeklyData\";\nimport createDateStringFormat from \"../CreateDateStringFormat/CreateDateStringFormat\";\nimport createYearMonthDay from \"../CreateYearMonthDay/createYearMonthDay\";\n\nfunction createAccountCardPreData(type, date) {\n  if (type === \"week\") {\n    const labels = [\"SUN\", \"MON\", \"TUE\", \"WED\", \"THR\", \"FRI\", \"SAT\"];\n    const weeklyDataArr = createWeeklyData(date);\n    const startingDateOfWeek = weeklyDataArr[0];\n    const endingDateOfWeek = weeklyDataArr[weeklyDataArr.length - 1];\n    const startingDateOfWeekStr = createDateStringFormat(startingDateOfWeek.dateObj);\n    const endingDateOfWeekStr = createDateStringFormat(endingDateOfWeek.dateObj);\n    return [startingDateOfWeek.dateObj, endingDateOfWeek.dateObj, startingDateOfWeekStr, endingDateOfWeekStr, labels];\n  } else {\n    const [year, month] = createYearMonthDay(date);\n    const startingDateOfMonth = new Date(year, month - 1, 1); // last 1 gives us the next month of first day, now it's give us the first day of current month\n\n    const endingDateOfMonth = new Date(year, month, 0);\n    const startingDateOfMonthStr = createDateStringFormat(startingDateOfMonth);\n    const endingDateOfMonthStr = createDateStringFormat(endingDateOfMonth);\n    return [startingDateOfMonth, endingDateOfMonth, startingDateOfMonthStr, endingDateOfMonthStr];\n  }\n}\n\nexport default createAccountCardPreData;","map":{"version":3,"sources":["/Users/eyo/Desktop/expense-tracker/src/Others/CreateAccountCardData/createAccountCardPreData.js"],"names":["createWeeklyData","createDateStringFormat","createYearMonthDay","createAccountCardPreData","type","date","labels","weeklyDataArr","startingDateOfWeek","endingDateOfWeek","length","startingDateOfWeekStr","dateObj","endingDateOfWeekStr","year","month","startingDateOfMonth","Date","endingDateOfMonth","startingDateOfMonthStr","endingDateOfMonthStr"],"mappings":"AAAA,OAAOA,gBAAP,MAA6B,qBAA7B;AACA,OAAOC,sBAAP,MAAmC,kDAAnC;AACA,OAAOC,kBAAP,MAA+B,0CAA/B;;AAEA,SAASC,wBAAT,CAAkCC,IAAlC,EAAwCC,IAAxC,EAA8C;AAC5C,MAAID,IAAI,KAAK,MAAb,EAAqB;AACnB,UAAME,MAAM,GAAG,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,EAAsB,KAAtB,EAA6B,KAA7B,EAAoC,KAApC,EAA2C,KAA3C,CAAf;AAEA,UAAMC,aAAa,GAAGP,gBAAgB,CAACK,IAAD,CAAtC;AACA,UAAMG,kBAAkB,GAAGD,aAAa,CAAC,CAAD,CAAxC;AACA,UAAME,gBAAgB,GAAGF,aAAa,CAACA,aAAa,CAACG,MAAd,GAAuB,CAAxB,CAAtC;AAEA,UAAMC,qBAAqB,GAAGV,sBAAsB,CAClDO,kBAAkB,CAACI,OAD+B,CAApD;AAGA,UAAMC,mBAAmB,GAAGZ,sBAAsB,CAChDQ,gBAAgB,CAACG,OAD+B,CAAlD;AAIA,WAAO,CACLJ,kBAAkB,CAACI,OADd,EAELH,gBAAgB,CAACG,OAFZ,EAGLD,qBAHK,EAILE,mBAJK,EAKLP,MALK,CAAP;AAOD,GArBD,MAqBO;AACL,UAAM,CAACQ,IAAD,EAAOC,KAAP,IAAgBb,kBAAkB,CAACG,IAAD,CAAxC;AACA,UAAMW,mBAAmB,GAAG,IAAIC,IAAJ,CAASH,IAAT,EAAeC,KAAK,GAAG,CAAvB,EAA0B,CAA1B,CAA5B,CAFK,CAEqD;;AAC1D,UAAMG,iBAAiB,GAAG,IAAID,IAAJ,CAASH,IAAT,EAAeC,KAAf,EAAsB,CAAtB,CAA1B;AAEA,UAAMI,sBAAsB,GAAGlB,sBAAsB,CAACe,mBAAD,CAArD;AACA,UAAMI,oBAAoB,GAAGnB,sBAAsB,CAACiB,iBAAD,CAAnD;AAEA,WAAO,CACLF,mBADK,EAELE,iBAFK,EAGLC,sBAHK,EAILC,oBAJK,CAAP;AAMD;AACF;;AAED,eAAejB,wBAAf","sourcesContent":["import createWeeklyData from \"../createWeeklyData\";\nimport createDateStringFormat from \"../CreateDateStringFormat/CreateDateStringFormat\";\nimport createYearMonthDay from \"../CreateYearMonthDay/createYearMonthDay\";\n\nfunction createAccountCardPreData(type, date) {\n  if (type === \"week\") {\n    const labels = [\"SUN\", \"MON\", \"TUE\", \"WED\", \"THR\", \"FRI\", \"SAT\"];\n\n    const weeklyDataArr = createWeeklyData(date);\n    const startingDateOfWeek = weeklyDataArr[0];\n    const endingDateOfWeek = weeklyDataArr[weeklyDataArr.length - 1];\n\n    const startingDateOfWeekStr = createDateStringFormat(\n      startingDateOfWeek.dateObj\n    );\n    const endingDateOfWeekStr = createDateStringFormat(\n      endingDateOfWeek.dateObj\n    );\n\n    return [\n      startingDateOfWeek.dateObj,\n      endingDateOfWeek.dateObj,\n      startingDateOfWeekStr,\n      endingDateOfWeekStr,\n      labels,\n    ];\n  } else {\n    const [year, month] = createYearMonthDay(date);\n    const startingDateOfMonth = new Date(year, month - 1, 1); // last 1 gives us the next month of first day, now it's give us the first day of current month\n    const endingDateOfMonth = new Date(year, month, 0);\n\n    const startingDateOfMonthStr = createDateStringFormat(startingDateOfMonth);\n    const endingDateOfMonthStr = createDateStringFormat(endingDateOfMonth);\n\n    return [\n      startingDateOfMonth,\n      endingDateOfMonth,\n      startingDateOfMonthStr,\n      endingDateOfMonthStr,\n    ];\n  }\n}\n\nexport default createAccountCardPreData;\n"]},"metadata":{},"sourceType":"module"}