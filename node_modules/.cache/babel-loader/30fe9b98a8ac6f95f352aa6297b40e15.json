{"ast":null,"code":"var _jsxFileName = \"/Users/eyo/Desktop/expense-tracker/src/components/UI/SmallChart/SmallChart.js\",\n    _s = $RefreshSig$();\n\nimport { useRef, useEffect, useState, useContext } from \"react\";\nimport ExpenseDataContext from \"../../../store/expenseData/expenseData--context\";\nimport EditModalContext from \"../../../store/editModal/editModal--context\";\nimport Card from \"../Card/Card\";\nimport Select from \"../Select/Select\";\nimport style from \"./SmallChart.module.css\";\nimport Chart from \"chart.js/auto\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction SmallChart(props) {\n  _s();\n\n  const {\n    expenseData\n  } = useContext(ExpenseDataContext);\n  const [editModal] = useContext(EditModalContext);\n  const [chartState, setChartState] = useState(0);\n  const chartRef = useRef(null);\n  const configArr = [props.configBar, props.configPie];\n\n  function selectChangeHandler(e) {\n    setChartState(e.target.value);\n  }\n\n  useEffect(() => {\n    const chart = new Chart(chartRef.current, configArr[chartState]);\n    return function cleanUp() {\n      chart.destroy();\n    };\n  }, [chartState, expenseData, editModal, props.startingDateString]); // pie chart need more height\n\n  const classNameChart = chartState === \"1\" ? `${style[\"chart__container\"]} ${style[\"chart--pie\"]} ` : `${style[\"chart__container\"]} `;\n  return /*#__PURE__*/_jsxDEV(Card, {\n    className: style[\"chart__section\"],\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: style[\"title__section\"],\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"chart\",\n        className: style.label,\n        children: \"Chart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Select, {\n        name: \"chart\",\n        id: \"chart\",\n        onChange: selectChangeHandler,\n        className: style.select,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"0\",\n          children: \"bar chart\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"1\",\n          children: \"pie chart\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classNameChart,\n      children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: chartRef,\n        height: \"200\",\n        width: \"auto\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n}\n\n_s(SmallChart, \"0h8wEV4yJ9FSudarP91c/r6ES9U=\");\n\n_c = SmallChart;\nexport default SmallChart;\n/*\nwe want to re-create the chart when\n1. user choose different kind of chart (bar or pie)\n2. user add or remove the (new) data\n3. user edit the existing data\n4. user click the next or last month arrow button in Calendar Section\n(we use props.startingDateString as index)\n*/\n\nvar _c;\n\n$RefreshReg$(_c, \"SmallChart\");","map":{"version":3,"sources":["/Users/eyo/Desktop/expense-tracker/src/components/UI/SmallChart/SmallChart.js"],"names":["useRef","useEffect","useState","useContext","ExpenseDataContext","EditModalContext","Card","Select","style","Chart","SmallChart","props","expenseData","editModal","chartState","setChartState","chartRef","configArr","configBar","configPie","selectChangeHandler","e","target","value","chart","current","cleanUp","destroy","startingDateString","classNameChart","label","select"],"mappings":";;;AAAA,SAASA,MAAT,EAAiBC,SAAjB,EAA4BC,QAA5B,EAAsCC,UAAtC,QAAwD,OAAxD;AACA,OAAOC,kBAAP,MAA+B,iDAA/B;AACA,OAAOC,gBAAP,MAA6B,6CAA7B;AACA,OAAOC,IAAP,MAAiB,cAAjB;AACA,OAAOC,MAAP,MAAmB,kBAAnB;AACA,OAAOC,KAAP,MAAkB,yBAAlB;AACA,OAAOC,KAAP,MAAkB,eAAlB;;;AAEA,SAASC,UAAT,CAAoBC,KAApB,EAA2B;AAAA;;AACzB,QAAM;AAAEC,IAAAA;AAAF,MAAkBT,UAAU,CAACC,kBAAD,CAAlC;AACA,QAAM,CAACS,SAAD,IAAcV,UAAU,CAACE,gBAAD,CAA9B;AACA,QAAM,CAACS,UAAD,EAAaC,aAAb,IAA8Bb,QAAQ,CAAC,CAAD,CAA5C;AACA,QAAMc,QAAQ,GAAGhB,MAAM,CAAC,IAAD,CAAvB;AACA,QAAMiB,SAAS,GAAG,CAACN,KAAK,CAACO,SAAP,EAAkBP,KAAK,CAACQ,SAAxB,CAAlB;;AAEA,WAASC,mBAAT,CAA6BC,CAA7B,EAAgC;AAC9BN,IAAAA,aAAa,CAACM,CAAC,CAACC,MAAF,CAASC,KAAV,CAAb;AACD;;AAEDtB,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMuB,KAAK,GAAG,IAAIf,KAAJ,CAAUO,QAAQ,CAACS,OAAnB,EAA4BR,SAAS,CAACH,UAAD,CAArC,CAAd;AAEA,WAAO,SAASY,OAAT,GAAmB;AACxBF,MAAAA,KAAK,CAACG,OAAN;AACD,KAFD;AAGD,GANQ,EAMN,CAACb,UAAD,EAAaF,WAAb,EAA0BC,SAA1B,EAAqCF,KAAK,CAACiB,kBAA3C,CANM,CAAT,CAXyB,CAmBzB;;AACA,QAAMC,cAAc,GAClBf,UAAU,KAAK,GAAf,GACK,GAAEN,KAAK,CAAC,kBAAD,CAAqB,IAAGA,KAAK,CAAC,YAAD,CAAe,GADxD,GAEK,GAAEA,KAAK,CAAC,kBAAD,CAAqB,GAHnC;AAKA,sBACE,QAAC,IAAD;AAAM,IAAA,SAAS,EAAEA,KAAK,CAAC,gBAAD,CAAtB;AAAA,4BACE;AAAK,MAAA,SAAS,EAAEA,KAAK,CAAC,gBAAD,CAArB;AAAA,8BACE;AAAO,QAAA,OAAO,EAAC,OAAf;AAAuB,QAAA,SAAS,EAAEA,KAAK,CAACsB,KAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAIE,QAAC,MAAD;AACE,QAAA,IAAI,EAAC,OADP;AAEE,QAAA,EAAE,EAAC,OAFL;AAGE,QAAA,QAAQ,EAAEV,mBAHZ;AAIE,QAAA,SAAS,EAAEZ,KAAK,CAACuB,MAJnB;AAAA,gCAME;AAAQ,UAAA,KAAK,EAAC,GAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBANF,eAOE;AAAQ,UAAA,KAAK,EAAC,GAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAPF;AAAA;AAAA;AAAA;AAAA;AAAA,cAJF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAeE;AAAK,MAAA,SAAS,EAAEF,cAAhB;AAAA,6BACE;AAAQ,QAAA,GAAG,EAAEb,QAAb;AAAuB,QAAA,MAAM,EAAC,KAA9B;AAAoC,QAAA,KAAK,EAAC;AAA1C;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAfF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAqBD;;GA9CQN,U;;KAAAA,U;AAgDT,eAAeA,UAAf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { useRef, useEffect, useState, useContext } from \"react\";\nimport ExpenseDataContext from \"../../../store/expenseData/expenseData--context\";\nimport EditModalContext from \"../../../store/editModal/editModal--context\";\nimport Card from \"../Card/Card\";\nimport Select from \"../Select/Select\";\nimport style from \"./SmallChart.module.css\";\nimport Chart from \"chart.js/auto\";\n\nfunction SmallChart(props) {\n  const { expenseData } = useContext(ExpenseDataContext);\n  const [editModal] = useContext(EditModalContext);\n  const [chartState, setChartState] = useState(0);\n  const chartRef = useRef(null);\n  const configArr = [props.configBar, props.configPie];\n\n  function selectChangeHandler(e) {\n    setChartState(e.target.value);\n  }\n\n  useEffect(() => {\n    const chart = new Chart(chartRef.current, configArr[chartState]);\n\n    return function cleanUp() {\n      chart.destroy();\n    };\n  }, [chartState, expenseData, editModal, props.startingDateString]);\n\n  // pie chart need more height\n  const classNameChart =\n    chartState === \"1\"\n      ? `${style[\"chart__container\"]} ${style[\"chart--pie\"]} `\n      : `${style[\"chart__container\"]} `;\n\n  return (\n    <Card className={style[\"chart__section\"]}>\n      <div className={style[\"title__section\"]}>\n        <label htmlFor=\"chart\" className={style.label}>\n          Chart\n        </label>\n        <Select\n          name=\"chart\"\n          id=\"chart\"\n          onChange={selectChangeHandler}\n          className={style.select}\n        >\n          <option value=\"0\">bar chart</option>\n          <option value=\"1\">pie chart</option>\n        </Select>\n      </div>\n      <div className={classNameChart}>\n        <canvas ref={chartRef} height=\"200\" width=\"auto\"></canvas>\n      </div>\n    </Card>\n  );\n}\n\nexport default SmallChart;\n/*\nwe want to re-create the chart when\n1. user choose different kind of chart (bar or pie)\n2. user add or remove the (new) data\n3. user edit the existing data\n4. user click the next or last month arrow button in Calendar Section\n(we use props.startingDateString as index)\n*/\n"]},"metadata":{},"sourceType":"module"}