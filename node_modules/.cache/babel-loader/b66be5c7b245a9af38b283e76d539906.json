{"ast":null,"code":"var _jsxFileName = \"/Users/eyo/Desktop/project-expenseTracker-main/src/components/MainContent/Account/AccountOverview/AccountChart.js\",\n    _s = $RefreshSig$();\n\nimport { useRef, useEffect, useState, useContext } from \"react\";\nimport InputRadio from \"../../../UI/InputRadio/InputRadio\";\nimport ExpenseDataContext from \"../../../../store/expenseData/expenseData--context\";\nimport createDateFormat from \"../../../Others/createDateFormat\";\nimport createFilteredData from \"../../../Others/CreateChartData/createFilteredData\";\nimport style from \"./AccountChart.module.css\";\nimport Chart from \"chart.js/auto\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst labels = [\"MON\", \"TUE\", \"WED\", \"THR\", \"FRI\", \"SUN\", \"SAT\"];\nconst chartRadioArr = [\"1wk\", \"1mo\", \"3mo\", \"6mo\", \"1yr\", \"select date\"];\nconst TODAY = new Date();\n\nfunction AccountChart(props) {\n  _s();\n\n  const [chartData, setChartData] = useState();\n  const {\n    expenseData\n  } = useContext(ExpenseDataContext);\n  const chartRef = useRef(null);\n  useEffect(() => {\n    const [data, labels] = chartData;\n    const configArea = {\n      type: \"line\",\n      data: {\n        labels: labels,\n        datasets: [{\n          fill: {\n            target: \"origin\"\n          },\n          label: \"My First Dataset\",\n          data: data,\n          backgroundColor: [\"rgba(54, 162, 235, 0.2)\"],\n          borderColor: [\"rgb(54, 162, 235)\"],\n          borderWidth: 1,\n          pointBackgroundColor: [\"rgb(54, 162, 235)\"]\n        }]\n      },\n      options: {\n        elements: {\n          line: {\n            tension: 0.5\n          }\n        },\n        scales: {\n          y: {\n            beginAtZero: true\n          }\n        }\n      }\n    };\n    const chart = new Chart(chartRef.current, configArea);\n    return function cleanUp() {\n      chart.destroy();\n    };\n  }, [chartData]);\n\n  function chartRadioChangeHandler(e) {\n    const today = new Date();\n    const value = e.target.value;\n    if (value === \"1wk\") today.setDate(today.getDate() - 7);\n    if (value === \"1mo\") today.setMonth(today.getMonth() - 1);\n    if (value === \"3mo\") today.setMonth(today.getMonth() - 3);\n    if (value === \"6mo\") today.setMonth(today.getMonth() - 6);\n    if (value === \"1yr\") today.setFullYear(today.getFullYear() - 1);\n    const chartData = createChartDataArr(today, TODAY, expenseData);\n    setChartData(chartData);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: style[\"chart__container\"],\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      onChange: chartRadioChangeHandler,\n      className: style[\"radio__container\"],\n      children: chartRadioArr.map((element, index) => /*#__PURE__*/_jsxDEV(InputRadio, {\n        label: element,\n        id: element,\n        value: element,\n        name: \"chart__btn\",\n        defaultChecked: index === 0,\n        classLabel: style.label,\n        classInput: style.input,\n        classCheck: style.check\n      }, element, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: style.chart,\n      children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: chartRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n}\n\n_s(AccountChart, \"6msjCCl4TUwVpDWgCPVhZ1ogRZ0=\");\n\n_c = AccountChart;\nexport default AccountChart;\n\nfunction createChartDataArr(startDate, endDate, expenseData) {\n  const labels = createLabelsAccount(startDate, endDate);\n  const newExpenseData = createFilteredData(labels, expenseData);\n  const newExpenseDataExpense = newExpenseData.filter(element => element.category === \"expense\");\n  const newExpenseDataIncome = newExpenseData.filter(element => element.category === \"income\");\n  const dataArrExpense = createDataArrAccount(labels, newExpenseDataExpense);\n  const dataArrIncome = createDataArrAccount(labels, newExpenseDataIncome);\n  const finalDataArr = [];\n  dataArrExpense.forEach((expense, index) => {\n    finalDataArr.push(dataArrIncome[index] - expense);\n  });\n  return [finalDataArr, labels];\n}\n\nfunction createDataArrAccount(labels, expensData) {\n  const data = [];\n  let indexCurrentDate = true;\n  let currentAmount = 0;\n  let indexData = 0;\n  let yearLabel, monthLabel, dayLabel, yearDate, monthData, dayData;\n\n  for (let i = 0; i < labels.length; i++) {\n    yearLabel = labels[i].slice(0, 4);\n    monthLabel = labels[i].slice(5, 7);\n    dayLabel = labels[i].slice(8);\n\n    while (indexCurrentDate) {\n      var _expensData$indexData, _expensData$indexData2, _expensData$indexData3;\n\n      yearDate = (_expensData$indexData = expensData[indexData]) === null || _expensData$indexData === void 0 ? void 0 : _expensData$indexData.time.slice(0, 4);\n      monthData = (_expensData$indexData2 = expensData[indexData]) === null || _expensData$indexData2 === void 0 ? void 0 : _expensData$indexData2.time.slice(5, 7);\n      dayData = (_expensData$indexData3 = expensData[indexData]) === null || _expensData$indexData3 === void 0 ? void 0 : _expensData$indexData3.time.slice(8);\n\n      if (yearLabel === yearDate && monthLabel === monthData && dayLabel >= dayData) {\n        currentAmount += Number(expensData[indexData].price);\n        indexData++;\n      } else indexCurrentDate = false;\n    }\n\n    data.push(currentAmount);\n    indexCurrentDate = true;\n  }\n\n  return data;\n}\n\nfunction createLabelsAccount(startDate, endDate) {\n  const label = [];\n  const diff = Math.round((new Date(endDate).getTime() - new Date(startDate).getTime()) / (1000 * 3600 * 24));\n  let eachDiffAmount;\n  let lastDiffAmount = 0;\n  if (diff % 7 === 0) eachDiffAmount = diff / 7;else {\n    eachDiffAmount = (diff - diff % 7) / 7;\n    lastDiffAmount = diff - eachDiffAmount * 6;\n  }\n  let tmpDate;\n\n  for (let i = 0; i < 6; i++) {\n    tmpDate = new Date(startDate.setDate(startDate.getDate() + eachDiffAmount));\n    label.push(createDateFormat(tmpDate));\n  }\n\n  if (lastDiffAmount === 0) tmpDate = new Date(startDate.setDate(startDate.getDate() + eachDiffAmount));else tmpDate = new Date(startDate.setDate(startDate.getDate() + lastDiffAmount));\n  label.push(createDateFormat(tmpDate));\n  return label;\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"AccountChart\");","map":{"version":3,"sources":["/Users/eyo/Desktop/project-expenseTracker-main/src/components/MainContent/Account/AccountOverview/AccountChart.js"],"names":["useRef","useEffect","useState","useContext","InputRadio","ExpenseDataContext","createDateFormat","createFilteredData","style","Chart","labels","chartRadioArr","TODAY","Date","AccountChart","props","chartData","setChartData","expenseData","chartRef","data","configArea","type","datasets","fill","target","label","backgroundColor","borderColor","borderWidth","pointBackgroundColor","options","elements","line","tension","scales","y","beginAtZero","chart","current","cleanUp","destroy","chartRadioChangeHandler","e","today","value","setDate","getDate","setMonth","getMonth","setFullYear","getFullYear","createChartDataArr","map","element","index","input","check","startDate","endDate","createLabelsAccount","newExpenseData","newExpenseDataExpense","filter","category","newExpenseDataIncome","dataArrExpense","createDataArrAccount","dataArrIncome","finalDataArr","forEach","expense","push","expensData","indexCurrentDate","currentAmount","indexData","yearLabel","monthLabel","dayLabel","yearDate","monthData","dayData","i","length","slice","time","Number","price","diff","Math","round","getTime","eachDiffAmount","lastDiffAmount","tmpDate"],"mappings":"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","sourcesContent":["import { useRef, useEffect, useState, useContext } from \"react\";\nimport InputRadio from \"../../../UI/InputRadio/InputRadio\";\nimport ExpenseDataContext from \"../../../../store/expenseData/expenseData--context\";\nimport createDateFormat from \"../../../Others/createDateFormat\";\nimport createFilteredData from \"../../../Others/CreateChartData/createFilteredData\";\nimport style from \"./AccountChart.module.css\";\nimport Chart from \"chart.js/auto\";\n\nconst labels = [\"MON\", \"TUE\", \"WED\", \"THR\", \"FRI\", \"SUN\", \"SAT\"];\n\nconst chartRadioArr = [\"1wk\", \"1mo\", \"3mo\", \"6mo\", \"1yr\", \"select date\"];\n\nconst TODAY = new Date();\n\nfunction AccountChart(props) {\n  const [chartData, setChartData] = useState();\n  const { expenseData } = useContext(ExpenseDataContext);\n  const chartRef = useRef(null);\n\n  useEffect(() => {\n    const [data, labels] = chartData;\n    const configArea = {\n      type: \"line\",\n      data: {\n        labels: labels,\n        datasets: [\n          {\n            fill: {\n              target: \"origin\",\n            },\n            label: \"My First Dataset\",\n            data: data,\n            backgroundColor: [\"rgba(54, 162, 235, 0.2)\"],\n            borderColor: [\"rgb(54, 162, 235)\"],\n            borderWidth: 1,\n            pointBackgroundColor: [\"rgb(54, 162, 235)\"],\n          },\n        ],\n      },\n      options: {\n        elements: {\n          line: {\n            tension: 0.5,\n          },\n        },\n        scales: {\n          y: {\n            beginAtZero: true,\n          },\n        },\n      },\n    };\n    const chart = new Chart(chartRef.current, configArea);\n\n    return function cleanUp() {\n      chart.destroy();\n    };\n  }, [chartData]);\n\n  function chartRadioChangeHandler(e) {\n    const today = new Date();\n    const value = e.target.value;\n\n    if (value === \"1wk\") today.setDate(today.getDate() - 7);\n    if (value === \"1mo\") today.setMonth(today.getMonth() - 1);\n    if (value === \"3mo\") today.setMonth(today.getMonth() - 3);\n    if (value === \"6mo\") today.setMonth(today.getMonth() - 6);\n    if (value === \"1yr\") today.setFullYear(today.getFullYear() - 1);\n\n    const chartData = createChartDataArr(today, TODAY, expenseData);\n    setChartData(chartData);\n  }\n\n  return (\n    <div className={style[\"chart__container\"]}>\n      <div\n        onChange={chartRadioChangeHandler}\n        className={style[\"radio__container\"]}\n      >\n        {chartRadioArr.map((element, index) => (\n          <InputRadio\n            key={element}\n            label={element}\n            id={element}\n            value={element}\n            name=\"chart__btn\"\n            defaultChecked={index === 0}\n            classLabel={style.label}\n            classInput={style.input}\n            classCheck={style.check}\n          />\n        ))}\n      </div>\n      <div className={style.chart}>\n        <canvas ref={chartRef}></canvas>\n      </div>\n    </div>\n  );\n}\n\nexport default AccountChart;\n\nfunction createChartDataArr(startDate, endDate, expenseData) {\n  const labels = createLabelsAccount(startDate, endDate);\n  const newExpenseData = createFilteredData(labels, expenseData);\n\n  const newExpenseDataExpense = newExpenseData.filter(\n    (element) => element.category === \"expense\"\n  );\n\n  const newExpenseDataIncome = newExpenseData.filter(\n    (element) => element.category === \"income\"\n  );\n\n  const dataArrExpense = createDataArrAccount(labels, newExpenseDataExpense);\n  const dataArrIncome = createDataArrAccount(labels, newExpenseDataIncome);\n\n  const finalDataArr = [];\n\n  dataArrExpense.forEach((expense, index) => {\n    finalDataArr.push(dataArrIncome[index] - expense);\n  });\n\n  return [finalDataArr, labels];\n}\n\nfunction createDataArrAccount(labels, expensData) {\n  const data = [];\n  let indexCurrentDate = true;\n  let currentAmount = 0;\n  let indexData = 0;\n  let yearLabel, monthLabel, dayLabel, yearDate, monthData, dayData;\n\n  for (let i = 0; i < labels.length; i++) {\n    yearLabel = labels[i].slice(0, 4);\n    monthLabel = labels[i].slice(5, 7);\n    dayLabel = labels[i].slice(8);\n\n    while (indexCurrentDate) {\n      yearDate = expensData[indexData]?.time.slice(0, 4);\n      monthData = expensData[indexData]?.time.slice(5, 7);\n      dayData = expensData[indexData]?.time.slice(8);\n\n      if (\n        yearLabel === yearDate &&\n        monthLabel === monthData &&\n        dayLabel >= dayData\n      ) {\n        currentAmount += Number(expensData[indexData].price);\n        indexData++;\n      } else indexCurrentDate = false;\n    }\n\n    data.push(currentAmount);\n    indexCurrentDate = true;\n  }\n\n  return data;\n}\n\nfunction createLabelsAccount(startDate, endDate) {\n  const label = [];\n  const diff = Math.round(\n    (new Date(endDate).getTime() - new Date(startDate).getTime()) /\n      (1000 * 3600 * 24)\n  );\n\n  let eachDiffAmount;\n  let lastDiffAmount = 0;\n  if (diff % 7 === 0) eachDiffAmount = diff / 7;\n  else {\n    eachDiffAmount = (diff - (diff % 7)) / 7;\n    lastDiffAmount = diff - eachDiffAmount * 6;\n  }\n\n  let tmpDate;\n  for (let i = 0; i < 6; i++) {\n    tmpDate = new Date(startDate.setDate(startDate.getDate() + eachDiffAmount));\n    label.push(createDateFormat(tmpDate));\n  }\n\n  if (lastDiffAmount === 0)\n    tmpDate = new Date(startDate.setDate(startDate.getDate() + eachDiffAmount));\n  else\n    tmpDate = new Date(startDate.setDate(startDate.getDate() + lastDiffAmount));\n\n  label.push(createDateFormat(tmpDate));\n\n  return label;\n}\n"]},"metadata":{},"sourceType":"module"}