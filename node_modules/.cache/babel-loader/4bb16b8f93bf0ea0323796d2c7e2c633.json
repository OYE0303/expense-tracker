{"ast":null,"code":"var _jsxFileName = \"/Users/eyo/Desktop/expense-tracker/src/components/UI/AddDataForm/FormPrice.js\";\nimport FormContainer from \"./FormContainer\";\nimport Warning from \"../Warning/Warning\";\nimport { AiFillWarning } from \"react-icons/ai\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction FormPrice(props) {\n  /*\n  this validation is for UI (red outline)\n  we only want to show the red outline to user when\n  1) user has selected or touched the price input\n  2) user input the wrong input\n   Note that this validation has noting to do with the final validation which is controled the button\n   props.isValid is the validation to control that\n  */\n  const priceValid = props.isValid && props.priceTouch;\n  const classNameInput = priceValid ? `${props.classNameInputNonValid} ${props.classNameInput}` : `${props.classNameInput}`;\n  const classNameWarn = priceValid ? `${props.classNameWarn} ${props.classNameWarnShow}` : `${props.classNameWarn}`;\n  return /*#__PURE__*/_jsxDEV(FormContainer, {\n    className: props.classNameContainer,\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"price\",\n      className: props.classNameLabel,\n      children: \"price\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      onChange: props.priceChangeHandler,\n      onBlur: props.inputPriceTouchHandler,\n      type: \"number\",\n      className: classNameInput,\n      value: props.price,\n      id: \"price\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Warning, {\n      className: classNameWarn,\n      children: [\"price should be positive number\", \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: classNameWarn,\n      children: /*#__PURE__*/_jsxDEV(AiFillWarning, {\n        title: \"warning\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 37\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n}\n\n_c = FormPrice;\nexport default FormPrice;\n/*\n className={\n          props.isValid\n            ? `${props.classNameInput}`\n            : `${props.classNameInput} ${props.classnameInputNonValid}`\n        }\n*/\n\nvar _c;\n\n$RefreshReg$(_c, \"FormPrice\");","map":{"version":3,"sources":["/Users/eyo/Desktop/expense-tracker/src/components/UI/AddDataForm/FormPrice.js"],"names":["FormContainer","Warning","AiFillWarning","FormPrice","props","priceValid","isValid","priceTouch","classNameInput","classNameInputNonValid","classNameWarn","classNameWarnShow","classNameContainer","classNameLabel","priceChangeHandler","inputPriceTouchHandler","price"],"mappings":";AAAA,OAAOA,aAAP,MAA0B,iBAA1B;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,SAASC,aAAT,QAA8B,gBAA9B;;;AAEA,SAASC,SAAT,CAAmBC,KAAnB,EAA0B;AACxB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AAGE,QAAMC,UAAU,GAAGD,KAAK,CAACE,OAAN,IAAiBF,KAAK,CAACG,UAA1C;AAEA,QAAMC,cAAc,GAAGH,UAAU,GAC5B,GAAED,KAAK,CAACK,sBAAuB,IAAGL,KAAK,CAACI,cAAe,EAD3B,GAE5B,GAAEJ,KAAK,CAACI,cAAe,EAF5B;AAIA,QAAME,aAAa,GAAGL,UAAU,GAC3B,GAAED,KAAK,CAACM,aAAc,IAAGN,KAAK,CAACO,iBAAkB,EADtB,GAE3B,GAAEP,KAAK,CAACM,aAAc,EAF3B;AAIA,sBACE,QAAC,aAAD;AAAe,IAAA,SAAS,EAAEN,KAAK,CAACQ,kBAAhC;AAAA,4BACE;AAAO,MAAA,OAAO,EAAC,OAAf;AAAuB,MAAA,SAAS,EAAER,KAAK,CAACS,cAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAIE;AACE,MAAA,QAAQ,EAAET,KAAK,CAACU,kBADlB;AAEE,MAAA,MAAM,EAAEV,KAAK,CAACW,sBAFhB;AAGE,MAAA,IAAI,EAAC,QAHP;AAIE,MAAA,SAAS,EAAEP,cAJb;AAKE,MAAA,KAAK,EAAEJ,KAAK,CAACY,KALf;AAME,MAAA,EAAE,EAAC;AANL;AAAA;AAAA;AAAA;AAAA,YAJF,eAYE,QAAC,OAAD;AAAS,MAAA,SAAS,EAAEN,aAApB;AAAA,oDACkC,GADlC;AAAA;AAAA;AAAA;AAAA;AAAA,YAZF,eAeE;AAAG,MAAA,SAAS,EAAEA,aAAd;AAAA,6BAA8B,QAAC,aAAD;AAAe,QAAA,KAAK,EAAC;AAArB;AAAA;AAAA;AAAA;AAAA;AAA9B;AAAA;AAAA;AAAA;AAAA,YAfF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAmBD;;KAxCQP,S;AA0CT,eAAeA,SAAf;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import FormContainer from \"./FormContainer\";\nimport Warning from \"../Warning/Warning\";\nimport { AiFillWarning } from \"react-icons/ai\";\n\nfunction FormPrice(props) {\n  /*\n  this validation is for UI (red outline)\n  we only want to show the red outline to user when\n  1) user has selected or touched the price input\n  2) user input the wrong input\n\n  Note that this validation has noting to do with the final validation which is controled the button\n\n  props.isValid is the validation to control that\n  */\n  const priceValid = props.isValid && props.priceTouch;\n\n  const classNameInput = priceValid\n    ? `${props.classNameInputNonValid} ${props.classNameInput}`\n    : `${props.classNameInput}`;\n\n  const classNameWarn = priceValid\n    ? `${props.classNameWarn} ${props.classNameWarnShow}`\n    : `${props.classNameWarn}`;\n\n  return (\n    <FormContainer className={props.classNameContainer}>\n      <label htmlFor=\"price\" className={props.classNameLabel}>\n        price\n      </label>\n      <input\n        onChange={props.priceChangeHandler}\n        onBlur={props.inputPriceTouchHandler}\n        type=\"number\"\n        className={classNameInput}\n        value={props.price}\n        id=\"price\"\n      ></input>\n      <Warning className={classNameWarn}>\n        price should be positive number{\" \"}\n      </Warning>\n      <p className={classNameWarn}>{<AiFillWarning title=\"warning\" />}</p>\n    </FormContainer>\n  );\n}\n\nexport default FormPrice;\n/*\n className={\n          props.isValid\n            ? `${props.classNameInput}`\n            : `${props.classNameInput} ${props.classnameInputNonValid}`\n        }\n*/\n"]},"metadata":{},"sourceType":"module"}