{"ast":null,"code":"var _jsxFileName = \"/Users/eyo/Desktop/expense-tracker/src/components/MainContent/Chart/ChartPic/ChartPic.js\",\n    _s = $RefreshSig$();\n\nimport { useRef, useEffect, useContext } from \"react\";\nimport ExpenseDataContext from \"../../../../store/expenseData/expenseData--context\";\nimport CategoryContext from \"../../../../store/category/category--context\";\nimport DisplayThemeContext from \"../../../../store/displayTheme/displayTheme--context\";\nimport Chart from \"chart.js/auto\";\nimport createConfigObj from \"../../../../Others/CreateChartData/createConfigObj\";\nimport style from \"./ChartPic.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ChartPic(props) {\n  _s();\n\n  const chartRef = useRef(null);\n  const {\n    expenseData\n  } = useContext(ExpenseDataContext);\n  const {\n    categoryExpense,\n    categoryIncome\n  } = useContext(CategoryContext);\n  const {\n    displayTheme\n  } = useContext(DisplayThemeContext);\n  const config = createConfigObj(props.chartData.mainType, props.chartData.timeDuration, props.chartData.startingDate, props.chartData.endingDate, expenseData, props.chartData.mainCategory, props.chartData.subCategory, displayTheme, true, // show the label\n  Object.keys(categoryExpense), Object.keys(categoryIncome));\n  useEffect(() => {\n    const chart = new Chart(chartRef.current, config);\n    return function cleanUp() {\n      chart.destroy();\n    };\n  }, [props.chartData, config]);\n  let chartClassName = style[\"chart--bar\"];\n  if (props.chartData.mainType === \"category\") chartClassName = \"chart--pie\";\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `${style.chart} ${chartClassName}`,\n    children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: chartRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n} // className={style[charClassName]}\n\n\n_s(ChartPic, \"x9Y6P9FPUAjT2k239ho0ZRHQyTI=\");\n\n_c = ChartPic;\nexport default ChartPic;\n/*\n if (timeDuration === \"6\" || timeDuration === \"12\") {\n    if (mainCategory === \"income\" && subCategory.length === 3) {\n      const labelsLength = labels.length;\n      let indexLabel = 0;\n      let indexData = 0;\n      let indexCurrentDate = true;\n      let currentMonth;\n      let currentAmount = 0;\n\n      while (indexLabel < labelsLength) {\n        // keep adding if it's still at current date(time)\n        while (indexCurrentDate) {\n          currentMonth = new Intl.DateTimeFormat(\"en-US\", dateOptObj).format(\n            new Date(filteredData[indexData]?.time)\n          );\n          // check date(time)\n          if (currentMonth === labels1[indexLabel]) {\n            // check main category\n            if (filteredData[indexData].category === \"income\") {\n              currentAmount += Number(filteredData[indexData].price);\n            }\n\n            indexData++;\n          } else indexCurrentDate = false;\n        }\n\n        data.push(currentAmount);\n\n        currentAmount = 0;\n        indexCurrentDate = true;\n        indexLabel++;\n      }\n    }\n\n    if (mainCategory === \"expense\" && subCategory.length === 6) {\n      const labelsLength = labels.length;\n      let indexLabel = 0;\n      let indexData = 0;\n      let indexCurrentDate = true;\n      let currentMonth;\n      let currentAmount = 0;\n\n      while (indexLabel < labelsLength) {\n        // keep adding if it's still at current date(time)\n        while (indexCurrentDate) {\n          console.log(filteredData);\n          if (!filteredData[indexData]?.time)\n            currentMonth = new Intl.DateTimeFormat(\"en-US\", dateOptObj).format(\n              new Date(filteredData[indexData]?.time)\n            );\n          console.log(currentMonth);\n\n          if (currentMonth === labels1[indexLabel]) {\n            // check main category\n            if (filteredData[indexData].category === \"income\") {\n              currentAmount += Number(filteredData[indexData].price);\n            }\n\n            indexData++;\n          } else indexCurrentDate = false;\n        }\n\n        data.push(currentAmount);\n\n        currentAmount = 0;\n        indexCurrentDate = true;\n        indexLabel++;\n      }\n    }\n  }\n  // day base\n  else {\n    if (mainCategory === \"income\" && subCategory.length === 3) {\n      const labelsLength = labels.length;\n      let indexLabel = 0;\n      let indexData = 0;\n      let indexCurrentDate = true;\n      let currentDate;\n      let currentAmount = 0;\n\n      while (indexLabel < labelsLength) {\n        currentDate = `${year}-${labels[indexLabel].slice(0, 2)}-${labels[\n          indexLabel\n        ].slice(2)}`;\n\n        // keep adding if it's still at current date(time)\n        if (indexData < filteredData.length - 1) {\n          while (indexCurrentDate) {\n            // check date(time)\n            if (filteredData[indexData].time === currentDate) {\n              // check main category\n              if (filteredData[indexData].category === \"income\") {\n                currentAmount += Number(filteredData[indexData].price);\n              }\n\n              indexData++;\n            } else indexCurrentDate = false;\n          }\n        }\n\n        data.push(currentAmount);\n\n        currentAmount = 0;\n        indexCurrentDate = true;\n        indexLabel++;\n      }\n    }\n\n    if (mainCategory === \"expense\" && subCategory.length === 6) {\n      const labelsLength = labels.length;\n      let indexLabel = 0;\n      let indexData = 0;\n      let indexCurrentDate = true;\n      let currentDate;\n      let currentAmount = 0;\n\n      while (indexLabel < labelsLength) {\n        currentDate = `${year}-${labels[indexLabel].slice(0, 2)}-${labels[\n          indexLabel\n        ].slice(2)}`;\n\n        // keep adding if it's still at current date(time)\n\n        while (indexCurrentDate) {\n          // check date(time)\n          if (filteredData[indexData]?.time === currentDate) {\n            // check main category\n            if (filteredData[indexData].category === \"expense\") {\n              currentAmount += Number(filteredData[indexData].price);\n            }\n\n            indexData++;\n          } else indexCurrentDate = false;\n        }\n\n        data.push(currentAmount);\n\n        currentAmount = 0;\n        indexCurrentDate = true;\n        indexLabel++;\n      }\n    }\n  }\n*/\n\n/*\n  // let configPPP;\n  // if (props.chartData.mainType === \"time\") {\n  //   let labels = [],\n  //     data = [];\n\n  //   const standardLabels = createStandardLabelsArr(\n  //     props.chartData.timeDuration,\n  //     props.chartData.startingDate\n  //   );\n\n  //   labels = createLabelsArr(standardLabels, props.chartData.timeDuration);\n\n  //   data = createDataArr(\n  //     standardLabels,\n  //     createFilteredData(standardLabels, EXPENSE_DATA),\n  //     props.chartData.timeDuration,\n  //     props.chartData.mainCategory,\n  //     props.chartData.subCategory\n  //   );\n\n  //   const dataObj = {\n  //     labels: labels,\n  //     datasets: [\n  //       {\n  //         label: \"\",\n  //         data: data,\n  //         backgroundColor: [\n  //           \"rgba(255, 99, 132, 0.2)\",\n  //           \"rgba(255, 159, 64, 0.2)\",\n  //           \"rgba(255, 205, 86, 0.2)\",\n  //           \"rgba(75, 192, 192, 0.2)\",\n  //           \"rgba(54, 162, 235, 0.2)\",\n  //           \"rgba(153, 102, 255, 0.2)\",\n  //           \"rgba(201, 203, 207, 0.2)\",\n  //         ],\n  //         borderColor: [\n  //           \"rgb(255, 99, 132)\",\n  //           \"rgb(255, 159, 64)\",\n  //           \"rgb(255, 205, 86)\",\n  //           \"rgb(75, 192, 192)\",\n  //           \"rgb(54, 162, 235)\",\n  //           \"rgb(153, 102, 255)\",\n  //           \"rgb(201, 203, 207)\",\n  //         ],\n  //         borderWidth: 1,\n  //       },\n  //     ],\n  //   };\n\n  //   const config = {\n  //     type: \"bar\",\n  //     data: dataObj,\n  //     options: {\n  //       scales: {\n  //         y: {\n  //           beginAtZero: true,\n  //         },\n  //       },\n  //     },\n  //   };\n\n  //   configPPP = config;\n  // } else {\n  //   const filteredData = EXPENSE_DATA.filter(\n  //     (element) =>\n  //       Number(new Date(element.time)) >=\n  //         Number(new Date(props.chartData.startingDate)) &&\n  //       Number(new Date(element.time)) <=\n  //         Number(new Date(props.chartData.endingDate)) &&\n  //       element.category === props.chartData.mainCategory\n  //   );\n\n  //   const labels = props.chartData.subCategory;\n  //   let newFilteredData = [];\n  //   labels.forEach((label) => {\n  //     newFilteredData.push(\n  //       filteredData.filter((data) => data.mainCate === label)\n  //     );\n  //   });\n\n  //   let dataArr = [];\n  //   newFilteredData.forEach((data) => {\n  //     let dataTmp;\n\n  //     if (data.length > 0) {\n  //       dataTmp = data.reduce((acc, cur) => (acc += Number(cur.price)), 0);\n  //     } else dataTmp = 0;\n\n  //     dataArr.push(dataTmp);\n  //   });\n\n  //   const data1 = {\n  //     labels: labels,\n  //     datasets: [\n  //       {\n  //         label: \"My First Dataset\",\n  //         data: dataArr,\n  //         backgroundColor: [\n  //           \"rgb(255, 99, 132)\",\n  //           \"rgb(255, 159, 64)\",\n  //           \"rgb(255, 205, 86)\",\n  //           \"rgb(75, 192, 192)\",\n  //           \"rgb(54, 162, 235)\",\n  //           \"rgb(153, 102, 255)\",\n  //           \"rgb(201, 203, 207)\",\n  //         ],\n  //         hoverOffset: 4,\n  //       },\n  //     ],\n  //   };\n\n  //   const config1 = {\n  //     type: \"doughnut\",\n  //     data: data1,\n  //   };\n\n  //   configPPP = config1;\n\n  //   // console.log(da);\n\n  //   // console.log(labels);\n  // }\n\n*/\n\nvar _c;\n\n$RefreshReg$(_c, \"ChartPic\");","map":{"version":3,"sources":["/Users/eyo/Desktop/expense-tracker/src/components/MainContent/Chart/ChartPic/ChartPic.js"],"names":["useRef","useEffect","useContext","ExpenseDataContext","CategoryContext","DisplayThemeContext","Chart","createConfigObj","style","ChartPic","props","chartRef","expenseData","categoryExpense","categoryIncome","displayTheme","config","chartData","mainType","timeDuration","startingDate","endingDate","mainCategory","subCategory","Object","keys","chart","current","cleanUp","destroy","chartClassName"],"mappings":";;;AAAA,SAASA,MAAT,EAAiBC,SAAjB,EAA4BC,UAA5B,QAA8C,OAA9C;AACA,OAAOC,kBAAP,MAA+B,oDAA/B;AACA,OAAOC,eAAP,MAA4B,8CAA5B;AACA,OAAOC,mBAAP,MAAgC,sDAAhC;AACA,OAAOC,KAAP,MAAkB,eAAlB;AACA,OAAOC,eAAP,MAA4B,oDAA5B;AACA,OAAOC,KAAP,MAAkB,uBAAlB;;;AAEA,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AAAA;;AACvB,QAAMC,QAAQ,GAAGX,MAAM,CAAC,IAAD,CAAvB;AACA,QAAM;AAAEY,IAAAA;AAAF,MAAkBV,UAAU,CAACC,kBAAD,CAAlC;AACA,QAAM;AAAEU,IAAAA,eAAF;AAAmBC,IAAAA;AAAnB,MAAsCZ,UAAU,CAACE,eAAD,CAAtD;AACA,QAAM;AAAEW,IAAAA;AAAF,MAAmBb,UAAU,CAACG,mBAAD,CAAnC;AAEA,QAAMW,MAAM,GAAGT,eAAe,CAC5BG,KAAK,CAACO,SAAN,CAAgBC,QADY,EAE5BR,KAAK,CAACO,SAAN,CAAgBE,YAFY,EAG5BT,KAAK,CAACO,SAAN,CAAgBG,YAHY,EAI5BV,KAAK,CAACO,SAAN,CAAgBI,UAJY,EAK5BT,WAL4B,EAM5BF,KAAK,CAACO,SAAN,CAAgBK,YANY,EAO5BZ,KAAK,CAACO,SAAN,CAAgBM,WAPY,EAQ5BR,YAR4B,EAS5B,IAT4B,EAStB;AACNS,EAAAA,MAAM,CAACC,IAAP,CAAYZ,eAAZ,CAV4B,EAW5BW,MAAM,CAACC,IAAP,CAAYX,cAAZ,CAX4B,CAA9B;AAcAb,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMyB,KAAK,GAAG,IAAIpB,KAAJ,CAAUK,QAAQ,CAACgB,OAAnB,EAA4BX,MAA5B,CAAd;AAEA,WAAO,SAASY,OAAT,GAAmB;AACxBF,MAAAA,KAAK,CAACG,OAAN;AACD,KAFD;AAGD,GANQ,EAMN,CAACnB,KAAK,CAACO,SAAP,EAAkBD,MAAlB,CANM,CAAT;AAQA,MAAIc,cAAc,GAAGtB,KAAK,CAAC,YAAD,CAA1B;AACA,MAAIE,KAAK,CAACO,SAAN,CAAgBC,QAAhB,KAA6B,UAAjC,EAA6CY,cAAc,GAAG,YAAjB;AAE7C,sBACE;AAAK,IAAA,SAAS,EAAG,GAAEtB,KAAK,CAACkB,KAAM,IAAGI,cAAe,EAAjD;AAAA,2BACE;AAAQ,MAAA,GAAG,EAAEnB;AAAb;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,C,CAED;;;GAtCSF,Q;;KAAAA,Q;AAwCT,eAAeA,QAAfsourcesContent":["import { useRef, useEffect, useContext } from \"react\";\nimport ExpenseDataContext from \"../../../../store/expenseData/expenseData--context\";\nimport CategoryContext from \"../../../../store/category/category--context\";\nimport DisplayThemeContext from \"../../../../store/displayTheme/displayTheme--context\";\nimport Chart from \"chart.js/auto\";\nimport createConfigObj from \"../../../../Others/CreateChartData/createConfigObj\";\nimport style from \"./ChartPic.module.css\";\n\nfunction ChartPic(props) {\n  const chartRef = useRef(null);\n  const { expenseData } = useContext(ExpenseDataContext);\n  const { categoryExpense, categoryIncome } = useContext(CategoryContext);\n  const { displayTheme } = useContext(DisplayThemeContext);\n\n  const config = createConfigObj(\n    props.chartData.mainType,\n    props.chartData.timeDuration,\n    props.chartData.startingDate,\n    props.chartData.endingDate,\n    expenseData,\n    props.chartData.mainCategory,\n    props.chartData.subCategory,\n    displayTheme,\n    true, // show the label\n    Object.keys(categoryExpense),\n    Object.keys(categoryIncome)\n  );\n\n  useEffect(() => {\n    const chart = new Chart(chartRef.current, config);\n\n    return function cleanUp() {\n      chart.destroy();\n    };\n  }, [props.chartData, config]);\n\n  let chartClassName = style[\"chart--bar\"];\n  if (props.chartData.mainType === \"category\") chartClassName = \"chart--pie\";\n\n  return (\n    <div className={`${style.chart} ${chartClassName}`}>\n      <canvas ref={chartRef}></canvas>\n    </div>\n  );\n}\n\n// className={style[charClassName]}\n\nexport default ChartPic;\n\n/*\n if (timeDuration === \"6\" || timeDuration === \"12\") {\n    if (mainCategory === \"income\" && subCategory.length === 3) {\n      const labelsLength = labels.length;\n      let indexLabel = 0;\n      let indexData = 0;\n      let indexCurrentDate = true;\n      let currentMonth;\n      let currentAmount = 0;\n\n      while (indexLabel < labelsLength) {\n        // keep adding if it's still at current date(time)\n        while (indexCurrentDate) {\n          currentMonth = new Intl.DateTimeFormat(\"en-US\", dateOptObj).format(\n            new Date(filteredData[indexData]?.time)\n          );\n          // check date(time)\n          if (currentMonth === labels1[indexLabel]) {\n            // check main category\n            if (filteredData[indexData].category === \"income\") {\n              currentAmount += Number(filteredData[indexData].price);\n            }\n\n            indexData++;\n          } else indexCurrentDate = false;\n        }\n\n        data.push(currentAmount);\n\n        currentAmount = 0;\n        indexCurrentDate = true;\n        indexLabel++;\n      }\n    }\n\n    if (mainCategory === \"expense\" && subCategory.length === 6) {\n      const labelsLength = labels.length;\n      let indexLabel = 0;\n      let indexData = 0;\n      let indexCurrentDate = true;\n      let currentMonth;\n      let currentAmount = 0;\n\n      while (indexLabel < labelsLength) {\n        // keep adding if it's still at current date(time)\n        while (indexCurrentDate) {\n          console.log(filteredData);\n          if (!filteredData[indexData]?.time)\n            currentMonth = new Intl.DateTimeFormat(\"en-US\", dateOptObj).format(\n              new Date(filteredData[indexData]?.time)\n            );\n          console.log(currentMonth);\n\n          if (currentMonth === labels1[indexLabel]) {\n            // check main category\n            if (filteredData[indexData].category === \"income\") {\n              currentAmount += Number(filteredData[indexData].price);\n            }\n\n            indexData++;\n          } else indexCurrentDate = false;\n        }\n\n        data.push(currentAmount);\n\n        currentAmount = 0;\n        indexCurrentDate = true;\n        indexLabel++;\n      }\n    }\n  }\n  // day base\n  else {\n    if (mainCategory === \"income\" && subCategory.length === 3) {\n      const labelsLength = labels.length;\n      let indexLabel = 0;\n      let indexData = 0;\n      let indexCurrentDate = true;\n      let currentDate;\n      let currentAmount = 0;\n\n      while (indexLabel < labelsLength) {\n        currentDate = `${year}-${labels[indexLabel].slice(0, 2)}-${labels[\n          indexLabel\n        ].slice(2)}`;\n\n        // keep adding if it's still at current date(time)\n        if (indexData < filteredData.length - 1) {\n          while (indexCurrentDate) {\n            // check date(time)\n            if (filteredData[indexData].time === currentDate) {\n              // check main category\n              if (filteredData[indexData].category === \"income\") {\n                currentAmount += Number(filteredData[indexData].price);\n              }\n\n              indexData++;\n            } else indexCurrentDate = false;\n          }\n        }\n\n        data.push(currentAmount);\n\n        currentAmount = 0;\n        indexCurrentDate = true;\n        indexLabel++;\n      }\n    }\n\n    if (mainCategory === \"expense\" && subCategory.length === 6) {\n      const labelsLength = labels.length;\n      let indexLabel = 0;\n      let indexData = 0;\n      let indexCurrentDate = true;\n      let currentDate;\n      let currentAmount = 0;\n\n      while (indexLabel < labelsLength) {\n        currentDate = `${year}-${labels[indexLabel].slice(0, 2)}-${labels[\n          indexLabel\n        ].slice(2)}`;\n\n        // keep adding if it's still at current date(time)\n\n        while (indexCurrentDate) {\n          // check date(time)\n          if (filteredData[indexData]?.time === currentDate) {\n            // check main category\n            if (filteredData[indexData].category === \"expense\") {\n              currentAmount += Number(filteredData[indexData].price);\n            }\n\n            indexData++;\n          } else indexCurrentDate = false;\n        }\n\n        data.push(currentAmount);\n\n        currentAmount = 0;\n        indexCurrentDate = true;\n        indexLabel++;\n      }\n    }\n  }\n*/\n/*\n  // let configPPP;\n  // if (props.chartData.mainType === \"time\") {\n  //   let labels = [],\n  //     data = [];\n\n  //   const standardLabels = createStandardLabelsArr(\n  //     props.chartData.timeDuration,\n  //     props.chartData.startingDate\n  //   );\n\n  //   labels = createLabelsArr(standardLabels, props.chartData.timeDuration);\n\n  //   data = createDataArr(\n  //     standardLabels,\n  //     createFilteredData(standardLabels, EXPENSE_DATA),\n  //     props.chartData.timeDuration,\n  //     props.chartData.mainCategory,\n  //     props.chartData.subCategory\n  //   );\n\n  //   const dataObj = {\n  //     labels: labels,\n  //     datasets: [\n  //       {\n  //         label: \"\",\n  //         data: data,\n  //         backgroundColor: [\n  //           \"rgba(255, 99, 132, 0.2)\",\n  //           \"rgba(255, 159, 64, 0.2)\",\n  //           \"rgba(255, 205, 86, 0.2)\",\n  //           \"rgba(75, 192, 192, 0.2)\",\n  //           \"rgba(54, 162, 235, 0.2)\",\n  //           \"rgba(153, 102, 255, 0.2)\",\n  //           \"rgba(201, 203, 207, 0.2)\",\n  //         ],\n  //         borderColor: [\n  //           \"rgb(255, 99, 132)\",\n  //           \"rgb(255, 159, 64)\",\n  //           \"rgb(255, 205, 86)\",\n  //           \"rgb(75, 192, 192)\",\n  //           \"rgb(54, 162, 235)\",\n  //           \"rgb(153, 102, 255)\",\n  //           \"rgb(201, 203, 207)\",\n  //         ],\n  //         borderWidth: 1,\n  //       },\n  //     ],\n  //   };\n\n  //   const config = {\n  //     type: \"bar\",\n  //     data: dataObj,\n  //     options: {\n  //       scales: {\n  //         y: {\n  //           beginAtZero: true,\n  //         },\n  //       },\n  //     },\n  //   };\n\n  //   configPPP = config;\n  // } else {\n  //   const filteredData = EXPENSE_DATA.filter(\n  //     (element) =>\n  //       Number(new Date(element.time)) >=\n  //         Number(new Date(props.chartData.startingDate)) &&\n  //       Number(new Date(element.time)) <=\n  //         Number(new Date(props.chartData.endingDate)) &&\n  //       element.category === props.chartData.mainCategory\n  //   );\n\n  //   const labels = props.chartData.subCategory;\n  //   let newFilteredData = [];\n  //   labels.forEach((label) => {\n  //     newFilteredData.push(\n  //       filteredData.filter((data) => data.mainCate === label)\n  //     );\n  //   });\n\n  //   let dataArr = [];\n  //   newFilteredData.forEach((data) => {\n  //     let dataTmp;\n\n  //     if (data.length > 0) {\n  //       dataTmp = data.reduce((acc, cur) => (acc += Number(cur.price)), 0);\n  //     } else dataTmp = 0;\n\n  //     dataArr.push(dataTmp);\n  //   });\n\n  //   const data1 = {\n  //     labels: labels,\n  //     datasets: [\n  //       {\n  //         label: \"My First Dataset\",\n  //         data: dataArr,\n  //         backgroundColor: [\n  //           \"rgb(255, 99, 132)\",\n  //           \"rgb(255, 159, 64)\",\n  //           \"rgb(255, 205, 86)\",\n  //           \"rgb(75, 192, 192)\",\n  //           \"rgb(54, 162, 235)\",\n  //           \"rgb(153, 102, 255)\",\n  //           \"rgb(201, 203, 207)\",\n  //         ],\n  //         hoverOffset: 4,\n  //       },\n  //     ],\n  //   };\n\n  //   const config1 = {\n  //     type: \"doughnut\",\n  //     data: data1,\n  //   };\n\n  //   configPPP = config1;\n\n  //   // console.log(da);\n\n  //   // console.log(labels);\n  // }\n\n*/\n"]},"metadata":{},"sourceType":"module"}