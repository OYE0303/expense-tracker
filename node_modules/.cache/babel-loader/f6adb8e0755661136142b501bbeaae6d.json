{"ast":null,"code":"var _jsxFileName = \"/Users/eyo/Desktop/expense-tracker/src/components/UI/AddMainCategoryModal/AddMainCategoryModal.js\",\n    _s = $RefreshSig$();\n\nimport { useReducer, useContext } from \"react\";\nimport Modal from \"../Modal/Modal\";\nimport Title from \"../Title/Title\";\nimport Button from \"../Button/Button\";\nimport InputText from \"../InputText/InputText\";\nimport InputRadio from \"../InputRadio/InputRadio\";\nimport HorizontalLine from \"../HorizontalLine/HorizontalLine\";\nimport CategoryContext from \"../../../store/category/category--context\";\nimport Warning from \"../Warning/Warning\";\nimport style from \"./AddMainCategoryModal.module.css\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case \"NAME\":\n      {\n        const isDuplicate = state.categoryNameArr.includes(action.value);\n        const inputValid = action.value.trim().length > 0 && !isDuplicate;\n        return { ...state,\n          name: action.value,\n          inputValid,\n          isDuplicate,\n          isValid: inputValid && state.iconIndex\n        };\n      }\n\n    case \"ICON\":\n      {\n        return { ...state,\n          iconIndex: action.value,\n          isValid: state.inputValid && action.value\n        };\n      }\n\n    case \"TOUCH\":\n      {\n        return { ...state,\n          isTouch: true\n        };\n      }\n\n    default:\n      {\n        return state;\n      }\n  }\n}\n\nfunction AddMainCategoryModal(props) {\n  _s();\n\n  const {\n    addMainCategory,\n    iconArr,\n    categoryExpense,\n    categoryIncome\n  } = useContext(CategoryContext);\n  let categoryNameArr = Object.keys(categoryExpense);\n  if (props.type === \"income\") categoryNameArr = Object.keys(categoryIncome);\n  const [form, formDispatch] = useReducer(reducer, {\n    name: \"\",\n    iconIndex: false,\n    isValid: false,\n    inputValid: false,\n    isDuplicate: false,\n    isTouch: false,\n    categoryNameArr\n  });\n\n  function inputTextTouchHandler() {\n    formDispatch({\n      type: \"TOUCH\"\n    });\n  }\n\n  function inputTextChangeHandler(e) {\n    formDispatch({\n      type: \"NAME\",\n      value: e.target.value\n    });\n  }\n\n  function radioIconChangeHandler(e) {\n    console.log(e.target);\n    formDispatch({\n      type: \"ICON\",\n      value: e.target.value\n    });\n  } // Reference 1\n\n\n  function formSubmitHandler(e) {\n    e.preventDefault();\n    props.addMainCategoryModalToggler(null, form.name);\n    addMainCategory(form.name, form.iconIndex, props.type);\n  } // Reference 2\n\n\n  const warnningIndex = form.isDuplicate || form.isTouch && !form.inputValid; // Reference 3\n\n  const warnningText = form.isDuplicate ? \"duplicate category name is not allowed\" : \"empty is not allowed\";\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    classModal: style.modal,\n    children: [/*#__PURE__*/_jsxDEV(Title, {\n      className: style.title,\n      children: \"add main category\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(HorizontalLine, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: formSubmitHandler,\n      className: style.form,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: style.container,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: style[\"input__container\"],\n          children: /*#__PURE__*/_jsxDEV(InputText, {\n            name: \"maincategory\",\n            id: \"name\",\n            label: \"main category name\",\n            value: form.name,\n            classLabel: style.label,\n            classInput: warnningIndex ? `${style.input} input--invalid` : `${style.input}`,\n            onChange: inputTextChangeHandler,\n            onBlur: inputTextTouchHandler\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Warning, {\n          className: style.warning,\n          index: warnningIndex,\n          children: warnningText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: style[\"input__container\"],\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: `${style.label} capitalize`,\n          children: \"icon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: style[\"icon__container\"],\n          children: iconArr.map((element, index) => /*#__PURE__*/_jsxDEV(InputRadio, {\n            name: \"icon\",\n            label: element,\n            value: index,\n            classLabel: `${style.icon} transition--25`,\n            classContainer: style[\"radio__container\"],\n            classInput: style[\"input--icon\"],\n            onChange: radioIconChangeHandler,\n            checked: index + \"\" === form.iconIndex\n          }, uuidv4(), false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: style[\"btn__container\"],\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          onClick: props.addMainCategoryModalToggler,\n          className: `${style.btn} btn--valid uppercase transition--25`,\n          type: \"button\",\n          children: \"cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          disabled: !form.isValid,\n          className: `${style.btn} uppercase transition--25 ${form.isValid ? `btn--valid` : \"btn--invalid\"}`,\n          type: \"submit\",\n          children: \"add\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this);\n}\n\n_s(AddMainCategoryModal, \"fImDBd5wM1ZOyGsWxR84udWwiC0=\");\n\n_c = AddMainCategoryModal;\nexport default AddMainCategoryModal;\n/*\nReference 1\n\nNote that we need to do two things when form is submitted\n1) close the adding modal and add the category to the SettingCategory\n       (for the sake of immediate showing at that state)\n       (this is accomplished by props.addMainCategoryModalToggler)\n    \n2) truly add the category inside the category provider\n       (this is accomplished by addMainCategory)\n\nAgain, it seems we're doing duplicate work\nBut it's not\nFirst function is to make the UI immediately adding the new adding category\nSecond function is truly add the category where we storing all the category\n*/\n\n/*\nReference 2\nNote that have four diff indexes\n1. isDuplicate\n=> check if the input category name is duplicate\n=> for the purpose of showing different warnning text\n\n2. isTouch\n=> check if the user ever touch the text input\n=> for invalid UI\n\n3. inputValid\n=> check if input is valid\n=> length > 0 && non-duplicate\n=> for invalid UI\n\n4. isValid\n=> check if it's all valid\n=> include valid text input and user has choose the icon\n\nNote\nconst warnningIndex = form.isDuplicate || (form.isTouch && !form.inputValid);\n=> warnningIndex is only for invalid UI\n=> include red outline and warnning text\n=> has nothing to do with validation of button\n=> if form.isDuplicate is true, we certainly know one thing\n   -> the user is typing, and typing duplicate category name\n   -> immediately show the invalid UI\n=> if it's false, continue checking....\n=> if form.isTouch is false\n   -> it means user never touch the text input\n   -> there's no reason showing invalid UI before user touch the text input\n   -> so if it's false, we immediately decide to stop the condition and not show the invalid UI\n=> if form.isTouch is true\n   -> user has touch the text input, now we can check if input is valid\n   -> according to the condition of inputValid, we return true or false\n*/\n\n/*\nReferecne 3\nHere, the order DOES matter\nnote that there are only two reason for the input text invalid\n1. duplicate\n2. length === 0\n\nAnd because we don't have the independent index for length = 0, but\nwe do have the independent index for duplicate\nso if it's duplicate, we show duplicate warnning text\nif it's not duplicate, and still show the invalid UI\nthen we know it must be the situation of length is 0\n\nnote that here cannont put inputValid\nbecause inputValid is mixed length and duplicate\nhere we need the index to seperate both different factors for invalid \n*/\n\nvar _c;\n\n$RefreshReg$(_c, \"AddMainCategoryModal\");","map":{"version":3,"sources":["/Users/eyo/Desktop/expense-tracker/src/components/UI/AddMainCategoryModal/AddMainCategoryModal.js"],"names":["useReducer","useContext","Modal","Title","Button","InputText","InputRadio","HorizontalLine","CategoryContext","Warning","style","v4","uuidv4","reducer","state","action","type","isDuplicate","categoryNameArr","includes","value","inputValid","trim","length","name","isValid","iconIndex","isTouch","AddMainCategoryModal","props","addMainCategory","iconArr","categoryExpense","categoryIncome","Object","keys","form","formDispatch","inputTextTouchHandler","inputTextChangeHandler","e","target","radioIconChangeHandler","console","log","formSubmitHandler","preventDefault","addMainCategoryModalToggler","warnningIndex","warnningText","modal","title","container","label","input","warning","map","element","index","icon","btn"],"mappings":"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","sourcesContent":["import { useReducer, useContext } from \"react\";\nimport Modal from \"../Modal/Modal\";\nimport Title from \"../Title/Title\";\nimport Button from \"../Button/Button\";\nimport InputText from \"../InputText/InputText\";\nimport InputRadio from \"../InputRadio/InputRadio\";\nimport HorizontalLine from \"../HorizontalLine/HorizontalLine\";\nimport CategoryContext from \"../../../store/category/category--context\";\nimport Warning from \"../Warning/Warning\";\nimport style from \"./AddMainCategoryModal.module.css\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case \"NAME\": {\n      const isDuplicate = state.categoryNameArr.includes(action.value);\n      const inputValid = action.value.trim().length > 0 && !isDuplicate;\n\n      return {\n        ...state,\n        name: action.value,\n        inputValid,\n        isDuplicate,\n        isValid: inputValid && state.iconIndex,\n      };\n    }\n\n    case \"ICON\": {\n      return {\n        ...state,\n        iconIndex: action.value,\n        isValid: state.inputValid && action.value,\n      };\n    }\n\n    case \"TOUCH\": {\n      return { ...state, isTouch: true };\n    }\n\n    default: {\n      return state;\n    }\n  }\n}\n\nfunction AddMainCategoryModal(props) {\n  const { addMainCategory, iconArr, categoryExpense, categoryIncome } =\n    useContext(CategoryContext);\n\n  let categoryNameArr = Object.keys(categoryExpense);\n  if (props.type === \"income\") categoryNameArr = Object.keys(categoryIncome);\n\n  const [form, formDispatch] = useReducer(reducer, {\n    name: \"\",\n    iconIndex: false,\n    isValid: false,\n    inputValid: false,\n    isDuplicate: false,\n    isTouch: false,\n    categoryNameArr,\n  });\n\n  function inputTextTouchHandler() {\n    formDispatch({ type: \"TOUCH\" });\n  }\n\n  function inputTextChangeHandler(e) {\n    formDispatch({ type: \"NAME\", value: e.target.value });\n  }\n\n  function radioIconChangeHandler(e) {\n    console.log(e.target);\n    formDispatch({ type: \"ICON\", value: e.target.value });\n  }\n\n  // Reference 1\n  function formSubmitHandler(e) {\n    e.preventDefault();\n\n    props.addMainCategoryModalToggler(null, form.name);\n    addMainCategory(form.name, form.iconIndex, props.type);\n  }\n\n  // Reference 2\n  const warnningIndex = form.isDuplicate || (form.isTouch && !form.inputValid);\n\n  // Reference 3\n  const warnningText = form.isDuplicate\n    ? \"duplicate category name is not allowed\"\n    : \"empty is not allowed\";\n\n  return (\n    <Modal classModal={style.modal}>\n      <Title className={style.title}>add main category</Title>\n      <HorizontalLine />\n      <form onSubmit={formSubmitHandler} className={style.form}>\n        <div className={style.container}>\n          <div className={style[\"input__container\"]}>\n            <InputText\n              name=\"maincategory\"\n              id=\"name\"\n              label=\"main category name\"\n              value={form.name}\n              classLabel={style.label}\n              classInput={\n                warnningIndex\n                  ? `${style.input} input--invalid`\n                  : `${style.input}`\n              }\n              onChange={inputTextChangeHandler}\n              onBlur={inputTextTouchHandler}\n            />\n          </div>\n          <Warning className={style.warning} index={warnningIndex}>\n            {warnningText}\n          </Warning>\n        </div>\n        <div className={style[\"input__container\"]}>\n          <p className={`${style.label} capitalize`}>icon</p>\n          <div className={style[\"icon__container\"]}>\n            {iconArr.map((element, index) => (\n              <InputRadio\n                key={uuidv4()}\n                name=\"icon\"\n                label={element}\n                value={index}\n                classLabel={`${style.icon} transition--25`}\n                classContainer={style[\"radio__container\"]}\n                classInput={style[\"input--icon\"]}\n                onChange={radioIconChangeHandler}\n                checked={index + \"\" === form.iconIndex}\n              />\n            ))}\n          </div>\n        </div>\n        <div className={style[\"btn__container\"]}>\n          <Button\n            onClick={props.addMainCategoryModalToggler}\n            className={`${style.btn} btn--valid uppercase transition--25`}\n            type=\"button\"\n          >\n            cancel\n          </Button>\n          <Button\n            disabled={!form.isValid}\n            className={`${style.btn} uppercase transition--25 ${\n              form.isValid ? `btn--valid` : \"btn--invalid\"\n            }`}\n            type=\"submit\"\n          >\n            add\n          </Button>\n        </div>\n      </form>\n    </Modal>\n  );\n}\n\nexport default AddMainCategoryModal;\n\n/*\nReference 1\n\nNote that we need to do two things when form is submitted\n1) close the adding modal and add the category to the SettingCategory\n       (for the sake of immediate showing at that state)\n       (this is accomplished by props.addMainCategoryModalToggler)\n    \n2) truly add the category inside the category provider\n       (this is accomplished by addMainCategory)\n\nAgain, it seems we're doing duplicate work\nBut it's not\nFirst function is to make the UI immediately adding the new adding category\nSecond function is truly add the category where we storing all the category\n*/\n/*\nReference 2\nNote that have four diff indexes\n1. isDuplicate\n=> check if the input category name is duplicate\n=> for the purpose of showing different warnning text\n\n2. isTouch\n=> check if the user ever touch the text input\n=> for invalid UI\n\n3. inputValid\n=> check if input is valid\n=> length > 0 && non-duplicate\n=> for invalid UI\n\n4. isValid\n=> check if it's all valid\n=> include valid text input and user has choose the icon\n\nNote\nconst warnningIndex = form.isDuplicate || (form.isTouch && !form.inputValid);\n=> warnningIndex is only for invalid UI\n=> include red outline and warnning text\n=> has nothing to do with validation of button\n=> if form.isDuplicate is true, we certainly know one thing\n   -> the user is typing, and typing duplicate category name\n   -> immediately show the invalid UI\n=> if it's false, continue checking....\n=> if form.isTouch is false\n   -> it means user never touch the text input\n   -> there's no reason showing invalid UI before user touch the text input\n   -> so if it's false, we immediately decide to stop the condition and not show the invalid UI\n=> if form.isTouch is true\n   -> user has touch the text input, now we can check if input is valid\n   -> according to the condition of inputValid, we return true or false\n*/\n\n/*\nReferecne 3\nHere, the order DOES matter\nnote that there are only two reason for the input text invalid\n1. duplicate\n2. length === 0\n\nAnd because we don't have the independent index for length = 0, but\nwe do have the independent index for duplicate\nso if it's duplicate, we show duplicate warnning text\nif it's not duplicate, and still show the invalid UI\nthen we know it must be the situation of length is 0\n\nnote that here cannont put inputValid\nbecause inputValid is mixed length and duplicate\nhere we need the index to seperate both different factors for invalid \n*/\n"]},"metadata":{},"sourceType":"module"}