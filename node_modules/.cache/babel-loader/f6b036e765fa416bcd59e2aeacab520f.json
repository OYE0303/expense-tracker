{"ast":null,"code":"var _jsxFileName = \"/Users/eyo/Desktop/expense-tracker/src/components/UI/SmallChart/SmallChart.js\",\n    _s = $RefreshSig$();\n\nimport { useRef, useEffect, useState, useContext } from \"react\";\nimport ExpenseDataContext from \"../../../store/expenseData/expenseData--context\";\nimport EditModalContext from \"../../../store/editModal/editModal--context\";\nimport Card from \"../Card/Card\";\nimport Title from \"../Title/Title\";\nimport Select from \"../Select/Select\";\nimport style from \"./SmallChart.module.css\";\nimport Chart from \"chart.js/auto\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction SmallChart(props) {\n  _s();\n\n  const {\n    expenseData\n  } = useContext(ExpenseDataContext);\n  const [editModal] = useContext(EditModalContext);\n  const [chartState, setChartState] = useState(0);\n  const chartRef = useRef(null);\n  const configArr = [props.configBar, props.configPie];\n\n  function selectChangeHandler(e) {\n    setChartState(e.target.value);\n  }\n\n  function createChart(id, type, options) {\n    var data = {\n      labels: [\"January\", \"February\", \"March\"],\n      datasets: [{\n        label: \"My First dataset\",\n        data: [50445, 33655, 15900],\n        backgroundColor: [\"#FF6384\", \"#36A2EB\", \"#FFCE56\"]\n      }]\n    };\n    new Chart(chartRef.current, {\n      type: type,\n      data: data,\n      options: options\n    });\n  }\n\n  createChart(\"pie\" + \"-canvas2\", \"pie\", {\n    responsive: true,\n    maintainAspectRatio: false,\n    plugins: {\n      labels: {\n        render: \"percentage\",\n        fontColor: [\"green\", \"white\", \"red\"],\n        precision: 2\n      }\n    }\n  });\n  /*\n  we want to re-create the chart when\n  1. user choose different kind of chart (bar or pie)\n  2. user add or remove the (new) data\n  3. user edit the existing data\n  */\n  // useEffect(() => {\n  //   const chart = new Chart(chartRef.current, configArr[chartState]);\n  //   return function cleanUp() {\n  //     chart.destroy();\n  //   };\n  // }, [chartState, expenseData, editModal]);\n\n  return /*#__PURE__*/_jsxDEV(Card, {\n    className: style[\"chart__section\"],\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: style[\"title__section\"],\n      children: [/*#__PURE__*/_jsxDEV(Title, {\n        className: style.title,\n        children: \"Chart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Select, {\n        onChange: selectChangeHandler,\n        className: style.select,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"0\",\n          children: \"bar chart\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"1\",\n          children: \"pie chart\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: style[\"chart__container\"],\n      children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: chartRef,\n        className: chartState === \"1\" ? `${style[\"chart--pie\"]}` : `${style[\"chart\"]}`,\n        height: \"200\",\n        width: \"auto\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n}\n\n_s(SmallChart, \"9mBlm439QzvYyEB8eTQ0p2hkM/M=\");\n\n_c = SmallChart;\nexport default SmallChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"SmallChart\");","map":{"version":3,"sources":["/Users/eyo/Desktop/expense-tracker/src/components/UI/SmallChart/SmallChart.js"],"names":["useRef","useEffect","useState","useContext","ExpenseDataContext","EditModalContext","Card","Title","Select","style","Chart","SmallChart","props","expenseData","editModal","chartState","setChartState","chartRef","configArr","configBar","configPie","selectChangeHandler","e","target","value","createChart","id","type","options","data","labels","datasets","label","backgroundColor","current","responsive","maintainAspectRatio","plugins","render","fontColor","precision","title","select"],"mappings":"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","sourcesContent":["import { useRef, useEffect, useState, useContext } from \"react\";\nimport ExpenseDataContext from \"../../../store/expenseData/expenseData--context\";\nimport EditModalContext from \"../../../store/editModal/editModal--context\";\nimport Card from \"../Card/Card\";\nimport Title from \"../Title/Title\";\nimport Select from \"../Select/Select\";\nimport style from \"./SmallChart.module.css\";\nimport Chart from \"chart.js/auto\";\n\nfunction SmallChart(props) {\n  const { expenseData } = useContext(ExpenseDataContext);\n  const [editModal] = useContext(EditModalContext);\n  const [chartState, setChartState] = useState(0);\n  const chartRef = useRef(null);\n  const configArr = [props.configBar, props.configPie];\n\n  function selectChangeHandler(e) {\n    setChartState(e.target.value);\n  }\n\n  function createChart(id, type, options) {\n    var data = {\n      labels: [\"January\", \"February\", \"March\"],\n      datasets: [\n        {\n          label: \"My First dataset\",\n          data: [50445, 33655, 15900],\n          backgroundColor: [\"#FF6384\", \"#36A2EB\", \"#FFCE56\"],\n        },\n      ],\n    };\n\n    new Chart(chartRef.current, {\n      type: type,\n      data: data,\n      options: options,\n    });\n  }\n\n  createChart(\"pie\" + \"-canvas2\", \"pie\", {\n    responsive: true,\n    maintainAspectRatio: false,\n    plugins: {\n      labels: {\n        render: \"percentage\",\n        fontColor: [\"green\", \"white\", \"red\"],\n        precision: 2,\n      },\n    },\n  });\n\n  /*\n  we want to re-create the chart when\n  1. user choose different kind of chart (bar or pie)\n  2. user add or remove the (new) data\n  3. user edit the existing data\n  */\n  // useEffect(() => {\n  //   const chart = new Chart(chartRef.current, configArr[chartState]);\n\n  //   return function cleanUp() {\n  //     chart.destroy();\n  //   };\n  // }, [chartState, expenseData, editModal]);\n\n  return (\n    <Card className={style[\"chart__section\"]}>\n      <div className={style[\"title__section\"]}>\n        <Title className={style.title}>Chart</Title>\n        <Select onChange={selectChangeHandler} className={style.select}>\n          <option value=\"0\">bar chart</option>\n          <option value=\"1\">pie chart</option>\n        </Select>\n      </div>\n      <div className={style[\"chart__container\"]}>\n        <canvas\n          ref={chartRef}\n          className={\n            chartState === \"1\" ? `${style[\"chart--pie\"]}` : `${style[\"chart\"]}`\n          }\n          height=\"200\"\n          width=\"auto\"\n        ></canvas>\n      </div>\n    </Card>\n  );\n}\n\nexport default SmallChart;\n"]},"metadata":{},"sourceType":"module"}