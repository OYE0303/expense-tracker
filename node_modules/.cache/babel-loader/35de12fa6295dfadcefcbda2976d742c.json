{"ast":null,"code":"var _jsxFileName = \"/Users/eyo/Desktop/expense-tracker/src/components/MainContent/Chart/ChartPic/ChartPic.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useRef, useEffect, useContext } from \"react\";\nimport ExpenseDataContext from \"../../../../store/expenseData/expenseData--context\";\nimport CategoryContext from \"../../../../store/category/category--context\";\nimport DisplayThemeContext from \"../../../../store/displayTheme/displayTheme--context\";\nimport Chart from \"chart.js/auto\";\nimport createConfigObj from \"../../../../Others/CreateChartData/createConfigObj\";\nimport createFinalDataArr from \"../../../../Others/CreateChartData/createFinalDataArr\";\nimport style from \"./ChartPic.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ChartPic(props) {\n  _s();\n\n  const chartRef = useRef(null);\n  const {\n    expenseData\n  } = useContext(ExpenseDataContext);\n  const {\n    categoryExpense,\n    categoryIncome\n  } = useContext(CategoryContext);\n  const {\n    displayTheme\n  } = useContext(DisplayThemeContext);\n  const configtest = createConfigObj(createFinalDataArr(props.chartData.mainType, props.chartData.timeDuration, props.chartData.startingDate, props.chartData.endingDate, expenseData, props.chartData.mainCategory, props.chartData.subCategory, displayTheme, true, // show the label\n  Object.keys(categoryExpense), Object.keys(categoryIncome)), displayTheme);\n  const config = createConfigObj(props.chartData.mainType, props.chartData.timeDuration, props.chartData.startingDate, props.chartData.endingDate, expenseData, props.chartData.mainCategory, props.chartData.subCategory, displayTheme, true, // show the label\n  Object.keys(categoryExpense), Object.keys(categoryIncome));\n  useEffect(() => {\n    const chart = new Chart(chartRef.current, config);\n    return function cleanUp() {\n      chart.destroy();\n    };\n  }, [props.chartData, config]);\n  let chartClassName = style[\"chart--bar\"];\n  if (props.chartData.mainType === \"category\") chartClassName = style[\"chart--pie\"];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `${style.chart} ${chartClassName}`,\n    children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: chartRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n} // Reference 1\n\n\n_s(ChartPic, \"x9Y6P9FPUAjT2k239ho0ZRHQyTI=\");\n\n_c = ChartPic;\nexport default _c2 = /*#__PURE__*/React.memo(ChartPic);\n/*\nIn the parent function (Chart)\nThe component will re-render when the size is changing\nAvoid multiple and meaningless re-render, use React.memo()\n*/\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ChartPic\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/Users/eyo/Desktop/expense-tracker/src/components/MainContent/Chart/ChartPic/ChartPic.js"],"names":["React","useRef","useEffect","useContext","ExpenseDataContext","CategoryContext","DisplayThemeContext","Chart","createConfigObj","createFinalDataArr","style","ChartPic","props","chartRef","expenseData","categoryExpense","categoryIncome","displayTheme","configtest","chartData","mainType","timeDuration","startingDate","endingDate","mainCategory","subCategory","Object","keys","config","chart","current","cleanUp","destroy","chartClassName","memo"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,EAAiBC,SAAjB,EAA4BC,UAA5B,QAA8C,OAA9C;AACA,OAAOC,kBAAP,MAA+B,oDAA/B;AACA,OAAOC,eAAP,MAA4B,8CAA5B;AACA,OAAOC,mBAAP,MAAgC,sDAAhC;AACA,OAAOC,KAAP,MAAkB,eAAlB;AACA,OAAOC,eAAP,MAA4B,oDAA5B;AACA,OAAOC,kBAAP,MAA+B,uDAA/B;AACA,OAAOC,KAAP,MAAkB,uBAAlB;;;AAEA,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AAAA;;AACvB,QAAMC,QAAQ,GAAGZ,MAAM,CAAC,IAAD,CAAvB;AACA,QAAM;AAAEa,IAAAA;AAAF,MAAkBX,UAAU,CAACC,kBAAD,CAAlC;AACA,QAAM;AAAEW,IAAAA,eAAF;AAAmBC,IAAAA;AAAnB,MAAsCb,UAAU,CAACE,eAAD,CAAtD;AACA,QAAM;AAAEY,IAAAA;AAAF,MAAmBd,UAAU,CAACG,mBAAD,CAAnC;AACA,QAAMY,UAAU,GAAGV,eAAe,CAChCC,kBAAkB,CAChBG,KAAK,CAACO,SAAN,CAAgBC,QADA,EAEhBR,KAAK,CAACO,SAAN,CAAgBE,YAFA,EAGhBT,KAAK,CAACO,SAAN,CAAgBG,YAHA,EAIhBV,KAAK,CAACO,SAAN,CAAgBI,UAJA,EAKhBT,WALgB,EAMhBF,KAAK,CAACO,SAAN,CAAgBK,YANA,EAOhBZ,KAAK,CAACO,SAAN,CAAgBM,WAPA,EAQhBR,YARgB,EAShB,IATgB,EASV;AACNS,EAAAA,MAAM,CAACC,IAAP,CAAYZ,eAAZ,CAVgB,EAWhBW,MAAM,CAACC,IAAP,CAAYX,cAAZ,CAXgB,CADc,EAchCC,YAdgC,CAAlC;AAiBA,QAAMW,MAAM,GAAGpB,eAAe,CAC5BI,KAAK,CAACO,SAAN,CAAgBC,QADY,EAE5BR,KAAK,CAACO,SAAN,CAAgBE,YAFY,EAG5BT,KAAK,CAACO,SAAN,CAAgBG,YAHY,EAI5BV,KAAK,CAACO,SAAN,CAAgBI,UAJY,EAK5BT,WAL4B,EAM5BF,KAAK,CAACO,SAAN,CAAgBK,YANY,EAO5BZ,KAAK,CAACO,SAAN,CAAgBM,WAPY,EAQ5BR,YAR4B,EAS5B,IAT4B,EAStB;AACNS,EAAAA,MAAM,CAACC,IAAP,CAAYZ,eAAZ,CAV4B,EAW5BW,MAAM,CAACC,IAAP,CAAYX,cAAZ,CAX4B,CAA9B;AAcAd,EAAAA,SAAS,CAAC,MAAM;AACd,UAAM2B,KAAK,GAAG,IAAItB,KAAJ,CAAUM,QAAQ,CAACiB,OAAnB,EAA4BF,MAA5B,CAAd;AAEA,WAAO,SAASG,OAAT,GAAmB;AACxBF,MAAAA,KAAK,CAACG,OAAN;AACD,KAFD;AAGD,GANQ,EAMN,CAACpB,KAAK,CAACO,SAAP,EAAkBS,MAAlB,CANM,CAAT;AAQA,MAAIK,cAAc,GAAGvB,KAAK,CAAC,YAAD,CAA1B;AACA,MAAIE,KAAK,CAACO,SAAN,CAAgBC,QAAhB,KAA6B,UAAjC,EACEa,cAAc,GAAGvB,KAAK,CAAC,YAAD,CAAtB;AAEF,sBACE;AAAK,IAAA,SAAS,EAAG,GAAEA,KAAK,CAACmB,KAAM,IAAGI,cAAe,EAAjD;AAAA,2BACE;AAAQ,MAAA,GAAG,EAAEpB;AAAb;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,C,CAED;;;GAvDSF,Q;;KAAAA,Q;AAwDT,kCAAeX,KAAK,CAACkC,IAAN,CAAWvB,QAAX,CAAf;AAEA;AACA;AACA;AACA;AACA","sourcesContent":["import React from \"react\";\nimport { useRef, useEffect, useContext } from \"react\";\nimport ExpenseDataContext from \"../../../../store/expenseData/expenseData--context\";\nimport CategoryContext from \"../../../../store/category/category--context\";\nimport DisplayThemeContext from \"../../../../store/displayTheme/displayTheme--context\";\nimport Chart from \"chart.js/auto\";\nimport createConfigObj from \"../../../../Others/CreateChartData/createConfigObj\";\nimport createFinalDataArr from \"../../../../Others/CreateChartData/createFinalDataArr\";\nimport style from \"./ChartPic.module.css\";\n\nfunction ChartPic(props) {\n  const chartRef = useRef(null);\n  const { expenseData } = useContext(ExpenseDataContext);\n  const { categoryExpense, categoryIncome } = useContext(CategoryContext);\n  const { displayTheme } = useContext(DisplayThemeContext);\n  const configtest = createConfigObj(\n    createFinalDataArr(\n      props.chartData.mainType,\n      props.chartData.timeDuration,\n      props.chartData.startingDate,\n      props.chartData.endingDate,\n      expenseData,\n      props.chartData.mainCategory,\n      props.chartData.subCategory,\n      displayTheme,\n      true, // show the label\n      Object.keys(categoryExpense),\n      Object.keys(categoryIncome)\n    ),\n    displayTheme\n  );\n\n  const config = createConfigObj(\n    props.chartData.mainType,\n    props.chartData.timeDuration,\n    props.chartData.startingDate,\n    props.chartData.endingDate,\n    expenseData,\n    props.chartData.mainCategory,\n    props.chartData.subCategory,\n    displayTheme,\n    true, // show the label\n    Object.keys(categoryExpense),\n    Object.keys(categoryIncome)\n  );\n\n  useEffect(() => {\n    const chart = new Chart(chartRef.current, config);\n\n    return function cleanUp() {\n      chart.destroy();\n    };\n  }, [props.chartData, config]);\n\n  let chartClassName = style[\"chart--bar\"];\n  if (props.chartData.mainType === \"category\")\n    chartClassName = style[\"chart--pie\"];\n\n  return (\n    <div className={`${style.chart} ${chartClassName}`}>\n      <canvas ref={chartRef}></canvas>\n    </div>\n  );\n}\n\n// Reference 1\nexport default React.memo(ChartPic);\n\n/*\nIn the parent function (Chart)\nThe component will re-render when the size is changing\nAvoid multiple and meaningless re-render, use React.memo()\n*/\n"]},"metadata":{},"sourceType":"module"}