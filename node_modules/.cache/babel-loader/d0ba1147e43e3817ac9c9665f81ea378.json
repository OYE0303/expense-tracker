{"ast":null,"code":"import createDateStringFormat from \"../CreateDateStringFormat/CreateDateStringFormat\";\n/*\nthe main purpose of this function (standard labels)(2021-11-08)\nis for adding(accumulating) the total amount within valid range \n*/\n\nfunction createStandardLabelsArr(duration, startingDate) {\n  const startingDateLocal = new Date(startingDate);\n\n  switch (duration) {\n    case \"7\":\n      return createStandardLabelsArrHelper(7, 1, \"day\", startingDateLocal);\n\n    case \"14\":\n      return createStandardLabelsArrHelper(14, 1, \"day\", startingDateLocal);\n\n    case \"30\":\n      return createStandardLabelsArrHelper(30, 1, \"day\", startingDateLocal);\n\n    case \"90\":\n      return createStandardLabelsArrHelper(30, 3, \"day\", startingDateLocal);\n\n    case \"6\":\n      return createStandardLabelsArrHelper(6, 1, \"month\", startingDateLocal);\n\n    case \"12\":\n      return createStandardLabelsArrHelper(12, 1, \"month\", startingDateLocal);\n  }\n}\n\nexport default createStandardLabelsArr;\n\nfunction createStandardLabelsArrHelper(duration, incrementAmount, dayMonth, today) {\n  const labels = [];\n  /*\n  note that it will immediately increment the number of day\n  in the first for-loop\n  so have to add the very first day\n  for example, today is 2021-11-21, and time duration is 7\n  what we want is an array [21, 22, 23, 24, 25, 26, 27]\n  which means 21 is inclusive\n  */\n\n  labels.push(createDateStringFormat(today));\n\n  for (let i = 0; i < duration - 1; i++) {\n    // incremenet by month\n    if (dayMonth === \"month\") today.setMonth(today.getMonth() + incrementAmount); // increment by day\n\n    if (dayMonth === \"day\") {\n      today.setDate(today.getDate() + incrementAmount);\n    }\n\n    labels.push(createDateStringFormat(today));\n  }\n\n  return labels;\n}","map":{"version":3,"sources":["/Users/eyo/Desktop/expense-tracker/src/Others/CreateChartData/createStandardLabelsArr.js"],"names":["createDateStringFormat","createStandardLabelsArr","duration","startingDate","startingDateLocal","Date","createStandardLabelsArrHelper","incrementAmount","dayMonth","today","labels","push","i","setMonth","getMonth","setDate","getDate"],"mappings":"AAAA,OAAOA,sBAAP,MAAmC,kDAAnC;AACA;AACA;AACA;AACA;;AACA,SAASC,uBAAT,CAAiCC,QAAjC,EAA2CC,YAA3C,EAAyD;AACvD,QAAMC,iBAAiB,GAAG,IAAIC,IAAJ,CAASF,YAAT,CAA1B;;AAEA,UAAQD,QAAR;AACE,SAAK,GAAL;AACE,aAAOI,6BAA6B,CAAC,CAAD,EAAI,CAAJ,EAAO,KAAP,EAAcF,iBAAd,CAApC;;AACF,SAAK,IAAL;AACE,aAAOE,6BAA6B,CAAC,EAAD,EAAK,CAAL,EAAQ,KAAR,EAAeF,iBAAf,CAApC;;AACF,SAAK,IAAL;AACE,aAAOE,6BAA6B,CAAC,EAAD,EAAK,CAAL,EAAQ,KAAR,EAAeF,iBAAf,CAApC;;AACF,SAAK,IAAL;AACE,aAAOE,6BAA6B,CAAC,EAAD,EAAK,CAAL,EAAQ,KAAR,EAAeF,iBAAf,CAApC;;AACF,SAAK,GAAL;AACE,aAAOE,6BAA6B,CAAC,CAAD,EAAI,CAAJ,EAAO,OAAP,EAAgBF,iBAAhB,CAApC;;AACF,SAAK,IAAL;AACE,aAAOE,6BAA6B,CAAC,EAAD,EAAK,CAAL,EAAQ,OAAR,EAAiBF,iBAAjB,CAApC;AAZJ;AAcD;;AAED,eAAeH,uBAAf;;AAEA,SAASK,6BAAT,CACEJ,QADF,EAEEK,eAFF,EAGEC,QAHF,EAIEC,KAJF,EAKE;AACA,QAAMC,MAAM,GAAG,EAAf;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;AACEA,EAAAA,MAAM,CAACC,IAAP,CAAYX,sBAAsB,CAACS,KAAD,CAAlC;;AAEA,OAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGV,QAAQ,GAAG,CAA/B,EAAkCU,CAAC,EAAnC,EAAuC;AACrC;AACA,QAAIJ,QAAQ,KAAK,OAAjB,EACEC,KAAK,CAACI,QAAN,CAAeJ,KAAK,CAACK,QAAN,KAAmBP,eAAlC,EAHmC,CAKrC;;AACA,QAAIC,QAAQ,KAAK,KAAjB,EAAwB;AACtBC,MAAAA,KAAK,CAACM,OAAN,CAAcN,KAAK,CAACO,OAAN,KAAkBT,eAAhC;AACD;;AAEDG,IAAAA,MAAM,CAACC,IAAP,CAAYX,sBAAsB,CAACS,KAAD,CAAlC;AACD;;AAED,SAAOC,MAAP;AACD","sourcesContent":["import createDateStringFormat from \"../CreateDateStringFormat/CreateDateStringFormat\";\n/*\nthe main purpose of this function (standard labels)(2021-11-08)\nis for adding(accumulating) the total amount within valid range \n*/\nfunction createStandardLabelsArr(duration, startingDate) {\n  const startingDateLocal = new Date(startingDate);\n\n  switch (duration) {\n    case \"7\":\n      return createStandardLabelsArrHelper(7, 1, \"day\", startingDateLocal);\n    case \"14\":\n      return createStandardLabelsArrHelper(14, 1, \"day\", startingDateLocal);\n    case \"30\":\n      return createStandardLabelsArrHelper(30, 1, \"day\", startingDateLocal);\n    case \"90\":\n      return createStandardLabelsArrHelper(30, 3, \"day\", startingDateLocal);\n    case \"6\":\n      return createStandardLabelsArrHelper(6, 1, \"month\", startingDateLocal);\n    case \"12\":\n      return createStandardLabelsArrHelper(12, 1, \"month\", startingDateLocal);\n  }\n}\n\nexport default createStandardLabelsArr;\n\nfunction createStandardLabelsArrHelper(\n  duration,\n  incrementAmount,\n  dayMonth,\n  today\n) {\n  const labels = [];\n\n  /*\n  note that it will immediately increment the number of day\n  in the first for-loop\n  so have to add the very first day\n  for example, today is 2021-11-21, and time duration is 7\n  what we want is an array [21, 22, 23, 24, 25, 26, 27]\n  which means 21 is inclusive\n  */\n  labels.push(createDateStringFormat(today));\n\n  for (let i = 0; i < duration - 1; i++) {\n    // incremenet by month\n    if (dayMonth === \"month\")\n      today.setMonth(today.getMonth() + incrementAmount);\n\n    // increment by day\n    if (dayMonth === \"day\") {\n      today.setDate(today.getDate() + incrementAmount);\n    }\n\n    labels.push(createDateStringFormat(today));\n  }\n\n  return labels;\n}\n"]},"metadata":{},"sourceType":"module"}