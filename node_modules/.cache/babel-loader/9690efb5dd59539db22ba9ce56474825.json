{"ast":null,"code":"import createDateStringFormat from \"../CreateDateStringFormat/CreateDateStringFormat\";\n/*\nthe main purpose of this function (standard labels)(2021-11-08)\nis for adding(accumulating) the total amount within valid range \n*/\n\nfunction createStandardLabelsArr(duration, startingDate) {\n  const startDay = new Date(startingDate);\n  const labels = [];\n\n  switch (duration) {\n    case \"7\":\n      return createStandardLabelsArrHelper(7, 1, \"day\", startDay);\n\n    case \"14\":\n      return createStandardLabelsArrHelper(14, 1, \"day\", startDay);\n\n    case \"30\":\n      return createStandardLabelsArrHelper(30, 1, \"day\", startDay);\n\n    case \"90\":\n      return createStandardLabelsArrHelper(30, 3, \"day\", startDay);\n\n    case \"6\":\n      return createStandardLabelsArrHelper(6, 1, \"month\", startDay);\n\n    case \"12\":\n      return createStandardLabelsArrHelper(12, 1, \"month\", startDay);\n  } // one week\n  // if (duration === \"7\") {\n  //   createStandardLabelsArrHelper(labels, 7, 1, \"day\", startDay);\n  // }\n  // if (duration === \"14\") {\n  //   createStandardLabelsArrHelper(labels, 14, 1, \"day\", startDay);\n  // }\n  // if (duration === \"30\") {\n  //   createStandardLabelsArrHelper(labels, 30, 1, \"day\", startDay);\n  // }\n  // if (duration === \"90\") {\n  //   createStandardLabelsArrHelper(labels, 30, 3, \"day\", startDay);\n  // }\n  // if (duration === \"6\") {\n  //   createStandardLabelsArrHelper(labels, 6, 1, \"month\", startDay);\n  // }\n  // if (duration === \"12\") {\n  //   createStandardLabelsArrHelper(labels, 12, 1, \"month\", startDay);\n  // }\n\n\n  return labels;\n}\n\nexport default createStandardLabelsArr;\n\nfunction createStandardLabelsArrHelper(duration, incrementAmount, dayMonth, today) {\n  const labels = [];\n  let tmpDay = today;\n  let day;\n  let month;\n  let year = today.getFullYear();\n  let changeYear = false;\n  let curYear = year;\n  /*\n  note that it will immediately increment the number of day\n  in the first for-loop\n  so have to add the very first day\n  for example, today is 2021-11-21, and time duration is 7\n  what we want is an array [21, 22, 23, 24, 25, 26, 27]\n  which means 21 is inclusive\n  */\n\n  labels.push(createDateStringFormat(tmpDay));\n  /*\n  if it's increment by month, the day is never change\n  we could put it outisde for-loop\n  */\n\n  if (dayMonth === \"month\") {\n    const date = tmpDay.getDate();\n    if (date < 10) day = `0${date}`;else day = date;\n  }\n\n  for (let i = 0; i < duration - 1; i++) {\n    // incremenet by month\n    if (dayMonth === \"month\") tmpDay.setMonth(tmpDay.getMonth() + incrementAmount); // increment by day\n\n    if (dayMonth === \"day\") {\n      tmpDay.setDate(tmpDay.getDate() + incrementAmount); // day will change, so put this inside for-loop\n\n      if (tmpDay.getDate() < 10) day = `0${tmpDay.getDate()}`;else day = tmpDay.getDate();\n    }\n\n    if (tmpDay.getMonth() + 1 < 10) month = `0${tmpDay.getMonth() + 1}`;else month = tmpDay.getMonth() + 1; // increment by year\n\n    if (tmpDay.getFullYear() > curYear) {\n      year++;\n      curYear = year;\n    } // next year(only change next year when it's 12-31)\n    // if (tmpDay.getMonth() === 11 && tmpDay.getDate() === 31) changeYear = true;\n\n\n    labels.push(`${year}-${month}-${day}`);\n  }\n}","map":{"version":3,"sources":["/Users/eyo/Desktop/expense-tracker/src/Others/CreateChartData/createStandardLabelsArr.js"],"names":["createDateStringFormat","createStandardLabelsArr","duration","startingDate","startDay","Date","labels","createStandardLabelsArrHelper","incrementAmount","dayMonth","today","tmpDay","day","month","year","getFullYear","changeYear","curYear","push","date","getDate","i","setMonth","getMonth","setDate"],"mappings":"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","sourcesContent":["import createDateStringFormat from \"../CreateDateStringFormat/CreateDateStringFormat\";\n\n/*\nthe main purpose of this function (standard labels)(2021-11-08)\nis for adding(accumulating) the total amount within valid range \n*/\nfunction createStandardLabelsArr(duration, startingDate) {\n  const startDay = new Date(startingDate);\n  const labels = [];\n\n  switch (duration) {\n    case \"7\":\n      return createStandardLabelsArrHelper(7, 1, \"day\", startDay);\n    case \"14\":\n      return createStandardLabelsArrHelper(14, 1, \"day\", startDay);\n    case \"30\":\n      return createStandardLabelsArrHelper(30, 1, \"day\", startDay);\n    case \"90\":\n      return createStandardLabelsArrHelper(30, 3, \"day\", startDay);\n    case \"6\":\n      return createStandardLabelsArrHelper(6, 1, \"month\", startDay);\n    case \"12\":\n      return createStandardLabelsArrHelper(12, 1, \"month\", startDay);\n  }\n\n  // one week\n  // if (duration === \"7\") {\n  //   createStandardLabelsArrHelper(labels, 7, 1, \"day\", startDay);\n  // }\n\n  // if (duration === \"14\") {\n  //   createStandardLabelsArrHelper(labels, 14, 1, \"day\", startDay);\n  // }\n\n  // if (duration === \"30\") {\n  //   createStandardLabelsArrHelper(labels, 30, 1, \"day\", startDay);\n  // }\n\n  // if (duration === \"90\") {\n  //   createStandardLabelsArrHelper(labels, 30, 3, \"day\", startDay);\n  // }\n\n  // if (duration === \"6\") {\n  //   createStandardLabelsArrHelper(labels, 6, 1, \"month\", startDay);\n  // }\n\n  // if (duration === \"12\") {\n  //   createStandardLabelsArrHelper(labels, 12, 1, \"month\", startDay);\n  // }\n\n  return labels;\n}\n\nexport default createStandardLabelsArr;\n\nfunction createStandardLabelsArrHelper(\n  duration,\n  incrementAmount,\n  dayMonth,\n  today\n) {\n  const labels = [];\n  let tmpDay = today;\n  let day;\n  let month;\n  let year = today.getFullYear();\n  let changeYear = false;\n  let curYear = year;\n\n  /*\n  note that it will immediately increment the number of day\n  in the first for-loop\n  so have to add the very first day\n  for example, today is 2021-11-21, and time duration is 7\n  what we want is an array [21, 22, 23, 24, 25, 26, 27]\n  which means 21 is inclusive\n  */\n  labels.push(createDateStringFormat(tmpDay));\n\n  /*\n  if it's increment by month, the day is never change\n  we could put it outisde for-loop\n  */\n  if (dayMonth === \"month\") {\n    const date = tmpDay.getDate();\n\n    if (date < 10) day = `0${date}`;\n    else day = date;\n  }\n\n  for (let i = 0; i < duration - 1; i++) {\n    // incremenet by month\n    if (dayMonth === \"month\")\n      tmpDay.setMonth(tmpDay.getMonth() + incrementAmount);\n\n    // increment by day\n    if (dayMonth === \"day\") {\n      tmpDay.setDate(tmpDay.getDate() + incrementAmount);\n\n      // day will change, so put this inside for-loop\n      if (tmpDay.getDate() < 10) day = `0${tmpDay.getDate()}`;\n      else day = tmpDay.getDate();\n    }\n\n    if (tmpDay.getMonth() + 1 < 10) month = `0${tmpDay.getMonth() + 1}`;\n    else month = tmpDay.getMonth() + 1;\n\n    // increment by year\n    if (tmpDay.getFullYear() > curYear) {\n      year++;\n      curYear = year;\n    }\n\n    // next year(only change next year when it's 12-31)\n    // if (tmpDay.getMonth() === 11 && tmpDay.getDate() === 31) changeYear = true;\n\n    labels.push(`${year}-${month}-${day}`);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}