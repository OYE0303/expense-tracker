{"ast":null,"code":"var _jsxFileName = \"/Users/eyo/Desktop/expense-tracker/src/components/MainContent/Calendar/CalendarTable/CalendarTable.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect, useContext, useReft } from \"react\";\nimport Button from \"../../../UI/Button/Button\";\nimport CreateCalendar from \"./CreateCalendarTable\";\nimport ExpenseDataContext from \"../../../../store/expenseData/expenseData--context\";\nimport ExpenseListModal from \"../../../UI/ExpenseListModal/ExpenseListModal\";\nimport AddDataForm from \"../../../UI/AddDataForm/AddDateForm\";\nimport BtnIcons from \"../../../UI/BtnIcons/BtnIcons\";\nimport SmallChartModal from \"../../../UI/SmallChartModal/SmallChartModal\";\nimport DataCardModal from \"../../../UI/DataCardModal/DataCardModal\";\nimport BtnIcon from \"../../../UI/BtnIcon/BtnIcon\";\nimport useAddDataForm from \"../../../../Others/Custom/useAddDataForm\";\nimport timeObj from \"../../../assets/timeObj/timeObj\";\nimport style from \"./CalendarTable.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst dateOptObj = {\n  month: \"long\"\n};\nconst {\n  TODAY\n} = timeObj;\nconst date = new Date();\nconst MONTH = new Intl.DateTimeFormat(\"en-US\", dateOptObj).format(new Date());\n\nfunction CalendarTable(prop) {\n  _s();\n\n  var _expenseListCalendar$;\n\n  const {\n    expenseData\n  } = useContext(ExpenseDataContext);\n  const [calendarState, setcalendarState] = useState(CreateCalendar(TODAY, showModalHandler, expenseData));\n  const [month, setMonth] = useState(MONTH);\n  const [year, SetYear] = useState(date.getFullYear());\n  const [expenseListModal, setExpenseListModal] = useState(false);\n  const [expenseListCalendar, setExpenseListCalendar] = useState([]);\n  const [addDataFormModal, addDataFormModalToggler] = useAddDataForm();\n  const [modalCard, setModalCard] = useState(false);\n  console.log(\"1\");\n  console.log(\"2\");\n  useEffect(() => {\n    console.log(\"useEffect\");\n    const calendar = CreateCalendar(date, showModalHandler, expenseData);\n    setcalendarState(calendar);\n  }, [expenseData]);\n\n  function changeMonth(change) {\n    if (change === \"increase\") date.setMonth(date.getMonth() + 1);else date.setMonth(date.getMonth() - 1);\n    const calendar = CreateCalendar(date, showModalHandler, expenseData);\n    setcalendarState(calendar);\n    setMonth(new Intl.DateTimeFormat(\"en-US\", dateOptObj).format(date));\n    SetYear(date.getFullYear());\n  }\n\n  function showModalHandler(e) {\n    const rawData = e.target.dataset.id;\n    if (!rawData) return;\n    const data = `${rawData.slice(0, 4)}-${rawData.slice(4, 6)}-${rawData.slice(6)}`;\n    const allDataArr = expenseData.filter(element => {\n      return element.time === data;\n    });\n    setExpenseListModal(true);\n    if (allDataArr.length === 0) setExpenseListCalendar(data);else setExpenseListCalendar(allDataArr);\n  }\n\n  function closeModalHandler() {\n    setExpenseListModal(false);\n  }\n\n  function modalCardToggler(e) {\n    if (modalCard) setModalCard(false);else {\n      const id = e.target.dataset.id;\n\n      if (id) {\n        setModalCard(id);\n      }\n    }\n  } // if expenseListCalendar is string, it means there's no data\n  // and expenseListCalendar will be the right time\n\n\n  const seletedTime = typeof expenseListCalendar === \"string\" ? expenseListCalendar : (_expenseListCalendar$ = expenseListCalendar[0]) === null || _expenseListCalendar$ === void 0 ? void 0 : _expenseListCalendar$.time;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [expenseListModal && /*#__PURE__*/_jsxDEV(ExpenseListModal, {\n      expenseListCalendar: expenseListCalendar,\n      setExpenseListCalendar: setExpenseListCalendar,\n      closeModalHandler: closeModalHandler,\n      addDataFormModalToggler: addDataFormModalToggler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }, this), addDataFormModal && /*#__PURE__*/_jsxDEV(AddDataForm, {\n      date: seletedTime,\n      addDataFormModalToggler: addDataFormModalToggler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }, this), modalCard === \"chart\" && /*#__PURE__*/_jsxDEV(SmallChartModal, {\n      type: \"month\",\n      modalCardToggler: modalCardToggler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 9\n    }, this), modalCard === \"info\" && /*#__PURE__*/_jsxDEV(DataCardModal, {\n      type: \"month\",\n      modalCardToggler: modalCardToggler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: style[\"icon__container\"],\n      children: /*#__PURE__*/_jsxDEV(BtnIcons, {\n        onClick: modalCardToggler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: style[\"monthly__container\"],\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: style[\"monthly__month\"],\n        children: [/*#__PURE__*/_jsxDEV(BtnIcon, {\n          text: \"last month\",\n          onClick: () => changeMonth(\"decrease\"),\n          classBtn: style.btn,\n          classText: style[\"btn__text\"],\n          children: \"<\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: style[\"monthly__title\"],\n          children: [/*#__PURE__*/_jsxDEV(\"h6\", {\n            children: month\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"h6\", {\n            children: year\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(BtnIcon, {\n          text: \"next month\",\n          onClick: () => changeMonth(\"increase\"),\n          classBtn: style.btn,\n          classText: style[\"btn__text\"],\n          children: \">\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: style[\"monthly__week\"],\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Sun\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Mon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Tue\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Wed\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Thu\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Fri\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Sat\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: style[\"monthly__days\"],\n        children: calendarState\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(CalendarTable, \"i+VB73Rhsk96a+EKe4snLiQsCvg=\", false, function () {\n  return [useAddDataForm];\n});\n\n_c = CalendarTable;\nexport default CalendarTable;\n/*\n  // animation for month\n  useEffect(() => {\n    // if (index === 0) {\n    //   index++;\n    //   return;\n    // }\n\n    setAnimationMonth(true);\n\n    const time = setTimeout(() => {\n      setAnimationMonth(false);\n    }, 300);\n\n    return function cleanUp() {\n      clearTimeout(time);\n    };\n  }, [month]);\n\n  // animation for year\n  useEffect(() => {\n    // if (index1 === 0) {\n    //   index1++;\n    //   return;\n    // }\n\n    setAnimationMonthYear(true);\n\n    const time = setTimeout(() => {\n      setAnimationMonthYear(false);\n    }, 300);\n\n    return function cleanUp() {\n      clearTimeout(time);\n    };\n  }, [year]);\n\n\n  */\n// const test = new Date();\n// test.setFullYear(date.getFullYear() - 1);\n// test.setMonth(11);\n// // test.setMonth(0);\n// console.log(test);\n// const initialObj = {\n//   calendar: createCalendar(date),\n//   month: new Intl.DateTimeFormat(\"en-US\", dateOptObj).format(date),\n//   year: date.getFullYear(),\n// };\n// function reducer(state, action) {\n//   switch (action.type) {\n//     case \"INCREMENT\": {\n//       //   if (state.month === \"December\") {\n//       //     date.setFullYear(date.getFullYear() + 1);\n//       //     date.setMonth(0);\n//       //   } else {\n//       date.setMonth(date.getMonth() + 1);\n//       //   }\n//       const month = new Intl.DateTimeFormat(\"en-US\", dateOptObj).format(date);\n//       //   console.log(month);\n//       const calendar = [];\n//       const year = date.getFullYear();\n//       //   console.log(month, year);\n//       return {\n//         calendar,\n//         month,\n//         year,\n//       };\n//     }\n//     case \"DECREMENT\": {\n//       if (state.month === \"January\") {\n//         date.setFullYear(date.getFullYear() - 1);\n//         date.setMonth(11);\n//       } else date.setMonth(date.getMonth() - 1);\n//       const calendar = createCalendar(date);\n//       const month = new Intl.DateTimeFormat(\"en-US\", dateOptObj).format(date);\n//       const year = date.getFullYear();\n//       return {\n//         calendar,\n//         month,\n//         year,\n//       };\n//     }\n//     default: {\n//       return state;\n//     }\n//   }\n// }\n\nvar _c;\n\n$RefreshReg$(_c, \"CalendarTable\");","map":{"version":3,"sources":["/Users/eyo/Desktop/expense-tracker/src/components/MainContent/Calendar/CalendarTable/CalendarTable.js"],"names":["useState","useEffect","useContext","useReft","Button","CreateCalendar","ExpenseDataContext","ExpenseListModal","AddDataForm","BtnIcons","SmallChartModal","DataCardModal","BtnIcon","useAddDataForm","timeObj","style","dateOptObj","month","TODAY","date","Date","MONTH","Intl","DateTimeFormat","format","CalendarTable","prop","expenseData","calendarState","setcalendarState","showModalHandler","setMonth","year","SetYear","getFullYear","expenseListModal","setExpenseListModal","expenseListCalendar","setExpenseListCalendar","addDataFormModal","addDataFormModalToggler","modalCard","setModalCard","console","log","calendar","changeMonth","change","getMonth","e","rawData","target","dataset","id","data","slice","allDataArr","filter","element","time","length","closeModalHandler","modalCardToggler","seletedTime","btn"],"mappings":"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BF,eAiCE;AAAK,QAAA,SAAS,EAAEA,KAAK,CAAC,eAAD,CAArB;AAAA,kBAAyCa;AAAzC;AAAA;AAAA;AAAA;AAAA,cAjCF;AAAA;AAAA;AAAA;AAAA;AAAA,YAzBF;AAAA,kBADF;AA+DD;;GAxIQH,a;UAS6CZ,c;;;KAT7CY,a;AAyIT,eAAeA,aAAf;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA","sourcesContent":["import { useState, useEffect, useContext, useReft } from \"react\";\nimport Button from \"../../../UI/Button/Button\";\nimport CreateCalendar from \"./CreateCalendarTable\";\nimport ExpenseDataContext from \"../../../../store/expenseData/expenseData--context\";\nimport ExpenseListModal from \"../../../UI/ExpenseListModal/ExpenseListModal\";\nimport AddDataForm from \"../../../UI/AddDataForm/AddDateForm\";\nimport BtnIcons from \"../../../UI/BtnIcons/BtnIcons\";\nimport SmallChartModal from \"../../../UI/SmallChartModal/SmallChartModal\";\nimport DataCardModal from \"../../../UI/DataCardModal/DataCardModal\";\nimport BtnIcon from \"../../../UI/BtnIcon/BtnIcon\";\nimport useAddDataForm from \"../../../../Others/Custom/useAddDataForm\";\nimport timeObj from \"../../../assets/timeObj/timeObj\";\nimport style from \"./CalendarTable.module.css\";\n\nconst dateOptObj = { month: \"long\" };\nconst { TODAY } = timeObj;\n\nconst date = new Date();\n\nconst MONTH = new Intl.DateTimeFormat(\"en-US\", dateOptObj).format(new Date());\n\nfunction CalendarTable(prop) {\n  const { expenseData } = useContext(ExpenseDataContext);\n  const [calendarState, setcalendarState] = useState(\n    CreateCalendar(TODAY, showModalHandler, expenseData)\n  );\n  const [month, setMonth] = useState(MONTH);\n  const [year, SetYear] = useState(date.getFullYear());\n  const [expenseListModal, setExpenseListModal] = useState(false);\n  const [expenseListCalendar, setExpenseListCalendar] = useState([]);\n  const [addDataFormModal, addDataFormModalToggler] = useAddDataForm();\n\n  const [modalCard, setModalCard] = useState(false);\n\n  console.log(\"1\");\n  console.log(\"2\");\n\n  useEffect(() => {\n    console.log(\"useEffect\");\n    const calendar = CreateCalendar(date, showModalHandler, expenseData);\n\n    setcalendarState(calendar);\n  }, [expenseData]);\n\n  function changeMonth(change) {\n    if (change === \"increase\") date.setMonth(date.getMonth() + 1);\n    else date.setMonth(date.getMonth() - 1);\n\n    const calendar = CreateCalendar(date, showModalHandler, expenseData);\n\n    setcalendarState(calendar);\n    setMonth(new Intl.DateTimeFormat(\"en-US\", dateOptObj).format(date));\n    SetYear(date.getFullYear());\n  }\n\n  function showModalHandler(e) {\n    const rawData = e.target.dataset.id;\n\n    if (!rawData) return;\n    const data = `${rawData.slice(0, 4)}-${rawData.slice(4, 6)}-${rawData.slice(\n      6\n    )}`;\n\n    const allDataArr = expenseData.filter((element) => {\n      return element.time === data;\n    });\n\n    setExpenseListModal(true);\n    if (allDataArr.length === 0) setExpenseListCalendar(data);\n    else setExpenseListCalendar(allDataArr);\n  }\n\n  function closeModalHandler() {\n    setExpenseListModal(false);\n  }\n\n  function modalCardToggler(e) {\n    if (modalCard) setModalCard(false);\n    else {\n      const id = e.target.dataset.id;\n\n      if (id) {\n        setModalCard(id);\n      }\n    }\n  }\n\n  // if expenseListCalendar is string, it means there's no data\n  // and expenseListCalendar will be the right time\n  const seletedTime =\n    typeof expenseListCalendar === \"string\"\n      ? expenseListCalendar\n      : expenseListCalendar[0]?.time;\n\n  return (\n    <>\n      {expenseListModal && (\n        <ExpenseListModal\n          expenseListCalendar={expenseListCalendar}\n          setExpenseListCalendar={setExpenseListCalendar}\n          closeModalHandler={closeModalHandler}\n          addDataFormModalToggler={addDataFormModalToggler}\n        />\n      )}\n      {addDataFormModal && (\n        <AddDataForm\n          date={seletedTime}\n          addDataFormModalToggler={addDataFormModalToggler}\n        />\n      )}\n      {modalCard === \"chart\" && (\n        <SmallChartModal type=\"month\" modalCardToggler={modalCardToggler} />\n      )}\n      {modalCard === \"info\" && (\n        <DataCardModal type=\"month\" modalCardToggler={modalCardToggler} />\n      )}\n\n      <div className={style[\"icon__container\"]}>\n        <BtnIcons onClick={modalCardToggler} />\n      </div>\n      <div className={style[\"monthly__container\"]}>\n        <div className={style[\"monthly__month\"]}>\n          <BtnIcon\n            text=\"last month\"\n            onClick={() => changeMonth(\"decrease\")}\n            classBtn={style.btn}\n            classText={style[\"btn__text\"]}\n          >\n            {\"<\"}\n          </BtnIcon>\n\n          <div className={style[\"monthly__title\"]}>\n            <h6>{month}</h6>\n            <h6>{year}</h6>\n          </div>\n          <BtnIcon\n            text=\"next month\"\n            onClick={() => changeMonth(\"increase\")}\n            classBtn={style.btn}\n            classText={style[\"btn__text\"]}\n          >\n            {\">\"}\n          </BtnIcon>\n        </div>\n        <div className={style[\"monthly__week\"]}>\n          <div>Sun</div>\n          <div>Mon</div>\n          <div>Tue</div>\n          <div>Wed</div>\n          <div>Thu</div>\n          <div>Fri</div>\n          <div>Sat</div>\n        </div>\n        <div className={style[\"monthly__days\"]}>{calendarState}</div>\n      </div>\n    </>\n  );\n}\nexport default CalendarTable;\n\n/*\n  // animation for month\n  useEffect(() => {\n    // if (index === 0) {\n    //   index++;\n    //   return;\n    // }\n\n    setAnimationMonth(true);\n\n    const time = setTimeout(() => {\n      setAnimationMonth(false);\n    }, 300);\n\n    return function cleanUp() {\n      clearTimeout(time);\n    };\n  }, [month]);\n\n  // animation for year\n  useEffect(() => {\n    // if (index1 === 0) {\n    //   index1++;\n    //   return;\n    // }\n\n    setAnimationMonthYear(true);\n\n    const time = setTimeout(() => {\n      setAnimationMonthYear(false);\n    }, 300);\n\n    return function cleanUp() {\n      clearTimeout(time);\n    };\n  }, [year]);\n\n\n  */\n\n// const test = new Date();\n// test.setFullYear(date.getFullYear() - 1);\n// test.setMonth(11);\n// // test.setMonth(0);\n\n// console.log(test);\n\n// const initialObj = {\n//   calendar: createCalendar(date),\n//   month: new Intl.DateTimeFormat(\"en-US\", dateOptObj).format(date),\n//   year: date.getFullYear(),\n// };\n\n// function reducer(state, action) {\n//   switch (action.type) {\n//     case \"INCREMENT\": {\n//       //   if (state.month === \"December\") {\n//       //     date.setFullYear(date.getFullYear() + 1);\n//       //     date.setMonth(0);\n//       //   } else {\n//       date.setMonth(date.getMonth() + 1);\n//       //   }\n\n//       const month = new Intl.DateTimeFormat(\"en-US\", dateOptObj).format(date);\n//       //   console.log(month);\n//       const calendar = [];\n//       const year = date.getFullYear();\n\n//       //   console.log(month, year);\n\n//       return {\n//         calendar,\n//         month,\n//         year,\n//       };\n//     }\n\n//     case \"DECREMENT\": {\n//       if (state.month === \"January\") {\n//         date.setFullYear(date.getFullYear() - 1);\n//         date.setMonth(11);\n//       } else date.setMonth(date.getMonth() - 1);\n\n//       const calendar = createCalendar(date);\n//       const month = new Intl.DateTimeFormat(\"en-US\", dateOptObj).format(date);\n//       const year = date.getFullYear();\n\n//       return {\n//         calendar,\n//         month,\n//         year,\n//       };\n//     }\n\n//     default: {\n//       return state;\n//     }\n//   }\n// }\n"]},"metadata":{},"sourceType":"module"}