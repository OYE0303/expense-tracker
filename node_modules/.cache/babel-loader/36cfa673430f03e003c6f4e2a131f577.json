{"ast":null,"code":"function formatMoney(price) {\n  const absPrice = Math.abs(price); // 1B = 1,000,000,000\n\n  if (absPrice >= 1000000000) {\n    const newPrice = price / 1000000000;\n    const formatedPrice = Number.isInteger(newPrice) ? newPrice : roundTwo(newPrice);\n    return `${formatedPrice}B`;\n  } // 1M = 1,000,000\n  else if (absPrice >= 1000000 && absPrice < 1000000000) {\n    const newPrice = price / 1000000;\n    const formatedPrice = Number.isInteger(newPrice) ? newPrice : roundTwo(newPrice);\n    return `${formatedPrice}M`;\n  } // insert \",\"\n  else if (absPrice >= 1000) {\n    const priceStr = String(Math.trunc(price));\n    const negativeIndex = price < 0;\n    const endingIndex = negativeIndex ? 1 : 0;\n    let formatedPrice = \"\";\n    let commaIndex = 1;\n\n    for (let i = priceStr.length - 1; i >= endingIndex; i--) {\n      if (commaIndex % 4 === 0) {\n        formatedPrice += \",\";\n        i++;\n        commaIndex = 1;\n        continue;\n      } else formatedPrice += priceStr[i];\n\n      commaIndex++;\n    }\n\n    if (negativeIndex) formatedPrice += \"-\";\n    const returnedPrice = formatedPrice.split(\"\").reverse().join(\"\"); // if original number is integer, immediately return\n\n    if (Number.isInteger(absPrice)) return returnedPrice; // if it's not integer, we have to find the first two fractional digits, and add it at the end\n    else {\n      const roundTwoNumber = String(roundTwo(price)); // -3 gives us the first two fractional digits and \".\"\n\n      const fractionalDigits = roundTwoNumber.slice(roundTwoNumber.length - 3);\n      return returnedPrice + String(fractionalDigits); // add in the end\n    }\n  } // fix the fractional parts to only two digits\n  else if (absPrice < 1000 && !Number.isInteger(absPrice)) {\n    return roundTwo(absPrice);\n  } else return price;\n}\n\nexport default formatMoney;\n/*\n1M = 1,000,000 = 1百万\n1B = 1,000,000,000 \n*/\n\nfunction roundTwo(value) {\n  return Number(Math.round(value + \"e\" + 2) + \"e-\" + 2).toFixed(2);\n}","map":{"version":3,"sources":["/Users/eyo/Desktop/expense-tracker/src/Others/FormatMoney/formatMoney.js"],"names":["formatMoney","price","absPrice","Math","abs","newPrice","formatedPrice","Number","isInteger","roundTwo","priceStr","String","trunc","negativeIndex","endingIndex","commaIndex","i","length","returnedPrice","split","reverse","join","roundTwoNumber","fractionalDigits","slice","value","round","toFixed"],"mappings":"AAAA,SAASA,WAAT,CAAqBC,KAArB,EAA4B;AAC1B,QAAMC,QAAQ,GAAGC,IAAI,CAACC,GAAL,CAASH,KAAT,CAAjB,CAD0B,CAG1B;;AACA,MAAIC,QAAQ,IAAI,UAAhB,EAA4B;AAC1B,UAAMG,QAAQ,GAAGJ,KAAK,GAAG,UAAzB;AACA,UAAMK,aAAa,GAAGC,MAAM,CAACC,SAAP,CAAiBH,QAAjB,IAClBA,QADkB,GAElBI,QAAQ,CAACJ,QAAD,CAFZ;AAIA,WAAQ,GAAEC,aAAc,GAAxB;AACD,GAPD,CAQA;AARA,OASK,IAAIJ,QAAQ,IAAI,OAAZ,IAAuBA,QAAQ,GAAG,UAAtC,EAAkD;AACrD,UAAMG,QAAQ,GAAGJ,KAAK,GAAG,OAAzB;AAEA,UAAMK,aAAa,GAAGC,MAAM,CAACC,SAAP,CAAiBH,QAAjB,IAClBA,QADkB,GAElBI,QAAQ,CAACJ,QAAD,CAFZ;AAIA,WAAQ,GAAEC,aAAc,GAAxB;AACD,GARI,CASL;AATK,OAUA,IAAIJ,QAAQ,IAAI,IAAhB,EAAsB;AACzB,UAAMQ,QAAQ,GAAGC,MAAM,CAACR,IAAI,CAACS,KAAL,CAAWX,KAAX,CAAD,CAAvB;AACA,UAAMY,aAAa,GAAGZ,KAAK,GAAG,CAA9B;AACA,UAAMa,WAAW,GAAGD,aAAa,GAAG,CAAH,GAAO,CAAxC;AACA,QAAIP,aAAa,GAAG,EAApB;AACA,QAAIS,UAAU,GAAG,CAAjB;;AAEA,SAAK,IAAIC,CAAC,GAAGN,QAAQ,CAACO,MAAT,GAAkB,CAA/B,EAAkCD,CAAC,IAAIF,WAAvC,EAAoDE,CAAC,EAArD,EAAyD;AACvD,UAAID,UAAU,GAAG,CAAb,KAAmB,CAAvB,EAA0B;AACxBT,QAAAA,aAAa,IAAI,GAAjB;AACAU,QAAAA,CAAC;AACDD,QAAAA,UAAU,GAAG,CAAb;AACA;AACD,OALD,MAKOT,aAAa,IAAII,QAAQ,CAACM,CAAD,CAAzB;;AAEPD,MAAAA,UAAU;AACX;;AAED,QAAIF,aAAJ,EAAmBP,aAAa,IAAI,GAAjB;AAEnB,UAAMY,aAAa,GAAGZ,aAAa,CAACa,KAAd,CAAoB,EAApB,EAAwBC,OAAxB,GAAkCC,IAAlC,CAAuC,EAAvC,CAAtB,CApByB,CAsBzB;;AACA,QAAId,MAAM,CAACC,SAAP,CAAiBN,QAAjB,CAAJ,EAAgC,OAAOgB,aAAP,CAAhC,CACA;AADA,SAEK;AACH,YAAMI,cAAc,GAAGX,MAAM,CAACF,QAAQ,CAACR,KAAD,CAAT,CAA7B,CADG,CAEH;;AACA,YAAMsB,gBAAgB,GAAGD,cAAc,CAACE,KAAf,CAAqBF,cAAc,CAACL,MAAf,GAAwB,CAA7C,CAAzB;AACA,aAAOC,aAAa,GAAGP,MAAM,CAACY,gBAAD,CAA7B,CAJG,CAI8C;AAClD;AACF,GA/BI,CAgCL;AAhCK,OAiCA,IAAIrB,QAAQ,GAAG,IAAX,IAAmB,CAACK,MAAM,CAACC,SAAP,CAAiBN,QAAjB,CAAxB,EAAoD;AACvD,WAAOO,QAAQ,CAACP,QAAD,CAAf;AACD,GAFI,MAEE,OAAOD,KAAP;AACR;;AAED,eAAeD,WAAf;AAEA;AACA;AACA;AACA;;AAEA,SAASS,QAAT,CAAkBgB,KAAlB,EAAyB;AACvB,SAAOlB,MAAM,CAACJ,IAAI,CAACuB,KAAL,CAAWD,KAAK,GAAG,GAAR,GAAc,CAAzB,IAA8B,IAA9B,GAAqC,CAAtC,CAAN,CAA+CE,OAA/C,CAAuD,CAAvD,CAAP;AACD","sourcesContent":["function formatMoney(price) {\n  const absPrice = Math.abs(price);\n\n  // 1B = 1,000,000,000\n  if (absPrice >= 1000000000) {\n    const newPrice = price / 1000000000;\n    const formatedPrice = Number.isInteger(newPrice)\n      ? newPrice\n      : roundTwo(newPrice);\n\n    return `${formatedPrice}B`;\n  }\n  // 1M = 1,000,000\n  else if (absPrice >= 1000000 && absPrice < 1000000000) {\n    const newPrice = price / 1000000;\n\n    const formatedPrice = Number.isInteger(newPrice)\n      ? newPrice\n      : roundTwo(newPrice);\n\n    return `${formatedPrice}M`;\n  }\n  // insert \",\"\n  else if (absPrice >= 1000) {\n    const priceStr = String(Math.trunc(price));\n    const negativeIndex = price < 0;\n    const endingIndex = negativeIndex ? 1 : 0;\n    let formatedPrice = \"\";\n    let commaIndex = 1;\n\n    for (let i = priceStr.length - 1; i >= endingIndex; i--) {\n      if (commaIndex % 4 === 0) {\n        formatedPrice += \",\";\n        i++;\n        commaIndex = 1;\n        continue;\n      } else formatedPrice += priceStr[i];\n\n      commaIndex++;\n    }\n\n    if (negativeIndex) formatedPrice += \"-\";\n\n    const returnedPrice = formatedPrice.split(\"\").reverse().join(\"\");\n\n    // if original number is integer, immediately return\n    if (Number.isInteger(absPrice)) return returnedPrice;\n    // if it's not integer, we have to find the first two fractional digits, and add it at the end\n    else {\n      const roundTwoNumber = String(roundTwo(price));\n      // -3 gives us the first two fractional digits and \".\"\n      const fractionalDigits = roundTwoNumber.slice(roundTwoNumber.length - 3);\n      return returnedPrice + String(fractionalDigits); // add in the end\n    }\n  }\n  // fix the fractional parts to only two digits\n  else if (absPrice < 1000 && !Number.isInteger(absPrice)) {\n    return roundTwo(absPrice);\n  } else return price;\n}\n\nexport default formatMoney;\n\n/*\n1M = 1,000,000 = 1百万\n1B = 1,000,000,000 \n*/\n\nfunction roundTwo(value) {\n  return Number(Math.round(value + \"e\" + 2) + \"e-\" + 2).toFixed(2);\n}\n"]},"metadata":{},"sourceType":"module"}