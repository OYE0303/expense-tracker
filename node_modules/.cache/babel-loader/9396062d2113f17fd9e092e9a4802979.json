{"ast":null,"code":"var _jsxFileName = \"/Users/eyo/Desktop/expense-tracker/src/components/MainContent/Account/AccountOverview/AccountChart.js\",\n    _s = $RefreshSig$();\n\nimport { useRef, useEffect, useState, useContext } from \"react\";\nimport InputRadio from \"../../../UI/InputRadio/InputRadio\";\nimport ExpenseDataContext from \"../../../../store/expenseData/expenseData--context\";\nimport createLabelsAccount from \"../../../../Others/CreateAccountData/createLabelsAccount\";\nimport createChartDataArr from \"../../../../Others/CreateAccountData/CreateChartDataArr\";\nimport style from \"./AccountChart.module.css\";\nimport Chart from \"chart.js/auto\";\nimport timeObj from \"../../../assets/timeObj/timeObj\"; // for choosing diff time range (input radio)\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst timeRangeArr = [\"1wk\", \"1mo\", \"3mo\", \"6mo\", \"1yr\"];\nconst {\n  TODAY\n} = timeObj; // first day of the week\n\nconst initialDate = new Date(new Date().setDate(TODAY.getDate() - 7)); // an array of labels(string)\n\nconst initialLabels = createLabelsAccount(initialDate, TODAY);\n\nfunction AccountChart() {\n  _s();\n\n  const {\n    expenseData\n  } = useContext(ExpenseDataContext); // const [chartData, setChartData] = useState({\n  //   data: createChartDataArr(initialLabels, expenseData),\n  //   labels: initialLabels,\n  // });\n  // const chartRef = useRef(null);\n  // const config = {\n  //   type: \"line\",\n  //   data: {\n  //     labels: chartData.labels,\n  //     datasets: [\n  //       {\n  //         fill: {\n  //           target: \"origin\",\n  //         },\n  //         label: \"\",\n  //         data: chartData.data,\n  //         backgroundColor: [\"rgba(54, 162, 235, 0.2)\"],\n  //         borderColor: [\"rgb(54, 162, 235)\"],\n  //         borderWidth: 1,\n  //         pointBackgroundColor: [\"rgb(54, 162, 235)\"],\n  //       },\n  //     ],\n  //   },\n  //   options: {\n  //     maintainAspectRatio: false,\n  //     elements: {\n  //       line: {\n  //         tension: 0.5,\n  //       },\n  //     },\n  //     scales: {\n  //       y: {\n  //         beginAtZero: true,\n  //       },\n  //     },\n  //   },\n  // };\n  // useEffect(() => {\n  //   const chart = new Chart(chartRef.current, config);\n  //   return function cleanUp() {\n  //     chart.destroy();\n  //   };\n  // }, [chartData]);\n  // // helper function for changing time range\n  // function chartRadioChangeHandler(e) {\n  //   const today = new Date();\n  //   const value = e.target.value;\n  //   if (value === \"1wk\") today.setDate(today.getDate() - 7);\n  //   if (value === \"1mo\") today.setMonth(today.getMonth() - 1);\n  //   if (value === \"3mo\") today.setMonth(today.getMonth() - 3);\n  //   if (value === \"6mo\") today.setMonth(today.getMonth() - 6);\n  //   if (value === \"1yr\") today.setFullYear(today.getFullYear() - 1);\n  //   const labels = createLabelsAccount(today, TODAY);\n  //   const chartData = createChartDataArr(labels, expenseData);\n  //   setChartData({ data: chartData, labels });\n  // }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: style.container,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      // onChange={chartRadioChangeHandler}\n      className: style[\"radio__container\"],\n      children: timeRangeArr.map((element, index) => /*#__PURE__*/_jsxDEV(InputRadio, {\n        label: element,\n        id: element,\n        value: element,\n        name: \"chart__btn\",\n        defaultChecked: index === 0,\n        classLabel: style.label,\n        classInput: style.input,\n        classCheck: style.check\n      }, element, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: style[\"chart__container\"]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 5\n  }, this);\n}\n\n_s(AccountChart, \"stxSkmagoO9hcL7i8htN9vzsRDQ=\");\n\n_c = AccountChart;\nexport default AccountChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"AccountChart\");","map":{"version":3,"sources":["/Users/eyo/Desktop/expense-tracker/src/components/MainContent/Account/AccountOverview/AccountChart.js"],"names":["useRef","useEffect","useState","useContext","InputRadio","ExpenseDataContext","createLabelsAccount","createChartDataArr","style","Chart","timeObj","timeRangeArr","TODAY","initialDate","Date","setDate","getDate","initialLabels","AccountChart","expenseData","container","map","element","index","label","input","check"],"mappings":";;;AAAA,SAASA,MAAT,EAAiBC,SAAjB,EAA4BC,QAA5B,EAAsCC,UAAtC,QAAwD,OAAxD;AACA,OAAOC,UAAP,MAAuB,mCAAvB;AACA,OAAOC,kBAAP,MAA+B,oDAA/B;AACA,OAAOC,mBAAP,MAAgC,0DAAhC;AACA,OAAOC,kBAAP,MAA+B,yDAA/B;AACA,OAAOC,KAAP,MAAkB,2BAAlB;AACA,OAAOC,KAAP,MAAkB,eAAlB;AACA,OAAOC,OAAP,MAAoB,iCAApB,C,CAEA;;;AACA,MAAMC,YAAY,GAAG,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,EAAsB,KAAtB,EAA6B,KAA7B,CAArB;AAEA,MAAM;AAAEC,EAAAA;AAAF,IAAYF,OAAlB,C,CAEA;;AACA,MAAMG,WAAW,GAAG,IAAIC,IAAJ,CAAS,IAAIA,IAAJ,GAAWC,OAAX,CAAmBH,KAAK,CAACI,OAAN,KAAkB,CAArC,CAAT,CAApB,C,CAEA;;AACA,MAAMC,aAAa,GAAGX,mBAAmB,CAACO,WAAD,EAAcD,KAAd,CAAzC;;AAEA,SAASM,YAAT,GAAwB;AAAA;;AACtB,QAAM;AAAEC,IAAAA;AAAF,MAAkBhB,UAAU,CAACE,kBAAD,CAAlC,CADsB,CAEtB;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,sBACE;AAAK,IAAA,SAAS,EAAEG,KAAK,CAACY,SAAtB;AAAA,4BACE;AACE;AACA,MAAA,SAAS,EAAEZ,KAAK,CAAC,kBAAD,CAFlB;AAAA,gBAIGG,YAAY,CAACU,GAAb,CAAiB,CAACC,OAAD,EAAUC,KAAV,kBAChB,QAAC,UAAD;AAEE,QAAA,KAAK,EAAED,OAFT;AAGE,QAAA,EAAE,EAAEA,OAHN;AAIE,QAAA,KAAK,EAAEA,OAJT;AAKE,QAAA,IAAI,EAAC,YALP;AAME,QAAA,cAAc,EAAEC,KAAK,KAAK,CAN5B;AAOE,QAAA,UAAU,EAAEf,KAAK,CAACgB,KAPpB;AAQE,QAAA,UAAU,EAAEhB,KAAK,CAACiB,KARpB;AASE,QAAA,UAAU,EAAEjB,KAAK,CAACkB;AATpB,SACOJ,OADP;AAAA;AAAA;AAAA;AAAA,cADD;AAJH;AAAA;AAAA;AAAA;AAAA,YADF,eAmBE;AAAK,MAAA,SAAS,EAAEd,KAAK,CAAC,kBAAD;AAArB;AAAA;AAAA;AAAA;AAAA,YAnBF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAyBD;;GAxFQU,Y;;KAAAA,Y;AA0FT,eAAeA,YAAf","sourcesContent":["import { useRef, useEffect, useState, useContext } from \"react\";\nimport InputRadio from \"../../../UI/InputRadio/InputRadio\";\nimport ExpenseDataContext from \"../../../../store/expenseData/expenseData--context\";\nimport createLabelsAccount from \"../../../../Others/CreateAccountData/createLabelsAccount\";\nimport createChartDataArr from \"../../../../Others/CreateAccountData/CreateChartDataArr\";\nimport style from \"./AccountChart.module.css\";\nimport Chart from \"chart.js/auto\";\nimport timeObj from \"../../../assets/timeObj/timeObj\";\n\n// for choosing diff time range (input radio)\nconst timeRangeArr = [\"1wk\", \"1mo\", \"3mo\", \"6mo\", \"1yr\"];\n\nconst { TODAY } = timeObj;\n\n// first day of the week\nconst initialDate = new Date(new Date().setDate(TODAY.getDate() - 7));\n\n// an array of labels(string)\nconst initialLabels = createLabelsAccount(initialDate, TODAY);\n\nfunction AccountChart() {\n  const { expenseData } = useContext(ExpenseDataContext);\n  // const [chartData, setChartData] = useState({\n  //   data: createChartDataArr(initialLabels, expenseData),\n  //   labels: initialLabels,\n  // });\n  // const chartRef = useRef(null);\n\n  // const config = {\n  //   type: \"line\",\n  //   data: {\n  //     labels: chartData.labels,\n  //     datasets: [\n  //       {\n  //         fill: {\n  //           target: \"origin\",\n  //         },\n  //         label: \"\",\n  //         data: chartData.data,\n  //         backgroundColor: [\"rgba(54, 162, 235, 0.2)\"],\n  //         borderColor: [\"rgb(54, 162, 235)\"],\n  //         borderWidth: 1,\n  //         pointBackgroundColor: [\"rgb(54, 162, 235)\"],\n  //       },\n  //     ],\n  //   },\n  //   options: {\n  //     maintainAspectRatio: false,\n  //     elements: {\n  //       line: {\n  //         tension: 0.5,\n  //       },\n  //     },\n  //     scales: {\n  //       y: {\n  //         beginAtZero: true,\n  //       },\n  //     },\n  //   },\n  // };\n\n  // useEffect(() => {\n  //   const chart = new Chart(chartRef.current, config);\n\n  //   return function cleanUp() {\n  //     chart.destroy();\n  //   };\n  // }, [chartData]);\n\n  // // helper function for changing time range\n  // function chartRadioChangeHandler(e) {\n  //   const today = new Date();\n  //   const value = e.target.value;\n  //   if (value === \"1wk\") today.setDate(today.getDate() - 7);\n  //   if (value === \"1mo\") today.setMonth(today.getMonth() - 1);\n  //   if (value === \"3mo\") today.setMonth(today.getMonth() - 3);\n  //   if (value === \"6mo\") today.setMonth(today.getMonth() - 6);\n  //   if (value === \"1yr\") today.setFullYear(today.getFullYear() - 1);\n  //   const labels = createLabelsAccount(today, TODAY);\n  //   const chartData = createChartDataArr(labels, expenseData);\n  //   setChartData({ data: chartData, labels });\n  // }\n\n  return (\n    <div className={style.container}>\n      <div\n        // onChange={chartRadioChangeHandler}\n        className={style[\"radio__container\"]}\n      >\n        {timeRangeArr.map((element, index) => (\n          <InputRadio\n            key={element}\n            label={element}\n            id={element}\n            value={element}\n            name=\"chart__btn\"\n            defaultChecked={index === 0}\n            classLabel={style.label}\n            classInput={style.input}\n            classCheck={style.check}\n          />\n        ))}\n      </div>\n      <div className={style[\"chart__container\"]}>\n        {/* <canvas className={style.chart} ref={chartRef}></canvas> */}\n      </div>\n    </div>\n  );\n}\n\nexport default AccountChart;\n"]},"metadata":{},"sourceType":"module"}