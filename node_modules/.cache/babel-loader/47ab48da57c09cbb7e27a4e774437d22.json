{"ast":null,"code":"import coerceNumber from \"./CoerceNumber/coerceNumber\";\n/*\nThe logic is \n1. If the year of data is less than current year, we can guarantee this data is within the range, so immediately return true\n2. If both year are the same, then need to compare month and day\n*/\n\nfunction compareTime(data, dateObj, endingYear, endingMonth, endingDay) {\n  const {\n    year: dataYear,\n    month: dataMonth,\n    day: dataDay\n  } = data;\n  const [year, month, day, endingYearNum, endingMonthNum, endingDayNum] = coerceNumber(dataYear, dataMonth, dataDay, endingYear, endingMonth, endingDay);\n  const yearNum = year - 0,\n        curYearNum = curYear - 0;\n  const monthNum = month - 0,\n        curMonthNum = curMonth - 0;\n  const dayNum = day - 0,\n        curDayNum = curDay - 0;\n  if (!dateObj) return dataYear < curYearNum || dataYear === curYearNum && monthNum < curMonthNum || dataYear === curYearNum && monthNum === curMonthNum && dayNum <= curDayNum;else {\n    const curYear1 = dateObj.getFullYear(),\n          curMonth1 = dateObj.getMonth() + 1,\n          curDay1 = dateObj.getDate();\n    return dataYear < curYear1 || dataYear === curYear1 && monthNum < curMonth1 || dataYear === curYear1 && monthNum === curMonth1 && dayNum <= curDay1;\n  }\n}\n\nexport default compareTime;","map":{"version":3,"sources":["/Users/eyo/Desktop/expense-tracker/src/Others/compareTime.js"],"names":["coerceNumber","compareTime","data","dateObj","endingYear","endingMonth","endingDay","year","dataYear","month","dataMonth","day","dataDay","endingYearNum","endingMonthNum","endingDayNum","yearNum","curYearNum","curYear","monthNum","curMonthNum","curMonth","dayNum","curDayNum","curDay","curYear1","getFullYear","curMonth1","getMonth","curDay1","getDate"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,6BAAzB;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,WAAT,CAAqBC,IAArB,EAA2BC,OAA3B,EAAoCC,UAApC,EAAgDC,WAAhD,EAA6DC,SAA7D,EAAwE;AACtE,QAAM;AAAEC,IAAAA,IAAI,EAAEC,QAAR;AAAkBC,IAAAA,KAAK,EAAEC,SAAzB;AAAoCC,IAAAA,GAAG,EAAEC;AAAzC,MAAqDV,IAA3D;AACA,QAAM,CAACK,IAAD,EAAOE,KAAP,EAAcE,GAAd,EAAmBE,aAAnB,EAAkCC,cAAlC,EAAkDC,YAAlD,IACJf,YAAY,CACVQ,QADU,EAEVE,SAFU,EAGVE,OAHU,EAIVR,UAJU,EAKVC,WALU,EAMVC,SANU,CADd;AAUA,QAAMU,OAAO,GAAGT,IAAI,GAAG,CAAvB;AAAA,QACEU,UAAU,GAAGC,OAAO,GAAG,CADzB;AAEA,QAAMC,QAAQ,GAAGV,KAAK,GAAG,CAAzB;AAAA,QACEW,WAAW,GAAGC,QAAQ,GAAG,CAD3B;AAEA,QAAMC,MAAM,GAAGX,GAAG,GAAG,CAArB;AAAA,QACEY,SAAS,GAAGC,MAAM,GAAG,CADvB;AAGA,MAAI,CAACrB,OAAL,EACE,OACEK,QAAQ,GAAGS,UAAX,IACCT,QAAQ,KAAKS,UAAb,IAA2BE,QAAQ,GAAGC,WADvC,IAECZ,QAAQ,KAAKS,UAAb,IACCE,QAAQ,KAAKC,WADd,IAECE,MAAM,IAAIC,SALd,CADF,KAQK;AACH,UAAME,QAAQ,GAAGtB,OAAO,CAACuB,WAAR,EAAjB;AAAA,UACEC,SAAS,GAAGxB,OAAO,CAACyB,QAAR,KAAqB,CADnC;AAAA,UAEEC,OAAO,GAAG1B,OAAO,CAAC2B,OAAR,EAFZ;AAIA,WACEtB,QAAQ,GAAGiB,QAAX,IACCjB,QAAQ,KAAKiB,QAAb,IAAyBN,QAAQ,GAAGQ,SADrC,IAECnB,QAAQ,KAAKiB,QAAb,IAAyBN,QAAQ,KAAKQ,SAAtC,IAAmDL,MAAM,IAAIO,OAHhE;AAKD;AACF;;AAED,eAAe5B,WAAf","sourcesContent":["import coerceNumber from \"./CoerceNumber/coerceNumber\";\n/*\nThe logic is \n1. If the year of data is less than current year, we can guarantee this data is within the range, so immediately return true\n2. If both year are the same, then need to compare month and day\n*/\nfunction compareTime(data, dateObj, endingYear, endingMonth, endingDay) {\n  const { year: dataYear, month: dataMonth, day: dataDay } = data;\n  const [year, month, day, endingYearNum, endingMonthNum, endingDayNum] =\n    coerceNumber(\n      dataYear,\n      dataMonth,\n      dataDay,\n      endingYear,\n      endingMonth,\n      endingDay\n    );\n\n  const yearNum = year - 0,\n    curYearNum = curYear - 0;\n  const monthNum = month - 0,\n    curMonthNum = curMonth - 0;\n  const dayNum = day - 0,\n    curDayNum = curDay - 0;\n\n  if (!dateObj)\n    return (\n      dataYear < curYearNum ||\n      (dataYear === curYearNum && monthNum < curMonthNum) ||\n      (dataYear === curYearNum &&\n        monthNum === curMonthNum &&\n        dayNum <= curDayNum)\n    );\n  else {\n    const curYear1 = dateObj.getFullYear(),\n      curMonth1 = dateObj.getMonth() + 1,\n      curDay1 = dateObj.getDate();\n\n    return (\n      dataYear < curYear1 ||\n      (dataYear === curYear1 && monthNum < curMonth1) ||\n      (dataYear === curYear1 && monthNum === curMonth1 && dayNum <= curDay1)\n    );\n  }\n}\n\nexport default compareTime;\n"]},"metadata":{},"sourceType":"module"}