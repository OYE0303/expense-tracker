{"ast":null,"code":"var _jsxFileName = \"/Users/eyo/Desktop/project-expenseTracker-main/src/components/MainContent/Chart/ChartMain/ChartMain.js\",\n    _s = $RefreshSig$();\n\nimport { useRef, useEffect, useContext } from \"react\";\nimport ExpenseDataContext from \"../../../../store/expenseData/expenseData--context\";\nimport style from \"./ChartMain.module.css\";\nimport Chart from \"chart.js/auto\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst dateOptObj = {\n  month: \"short\"\n};\nconst data1 = {\n  labels: [\"Red\", \"Blue\", \"Yellow\"],\n  datasets: [{\n    label: \"My First Dataset\",\n    data: [300, 50, 100],\n    backgroundColor: [\"rgb(255, 99, 132)\", \"rgb(54, 162, 235)\", \"rgb(255, 205, 86)\"],\n    hoverOffset: 4\n  }]\n};\nconst config1 = {\n  type: \"doughnut\",\n  data: data1\n};\n\nfunction ChartMain(props) {\n  _s();\n\n  const chartRef = useRef(null);\n  const {\n    EXPENSE_DATA\n  } = useContext(ExpenseDataContext);\n  console.log(props);\n  let labels = [],\n      data = [];\n  const standardLabels = createStandardLabelsArr(props.chartData.timeDuration, props.chartData.startingDate);\n  labels = createLabelsArr(standardLabels, props.chartData.timeDuration);\n  data = createDataArr(standardLabels, createFilteredData(standardLabels, EXPENSE_DATA), props.chartData.timeDuration, props.chartData.mainCategory, props.chartData.subCategory);\n  const dataObj = {\n    labels: labels,\n    datasets: [{\n      label: \"\",\n      data: data,\n      backgroundColor: [\"rgba(255, 99, 132, 0.2)\", \"rgba(255, 159, 64, 0.2)\", \"rgba(255, 205, 86, 0.2)\", \"rgba(75, 192, 192, 0.2)\", \"rgba(54, 162, 235, 0.2)\", \"rgba(153, 102, 255, 0.2)\", \"rgba(201, 203, 207, 0.2)\"],\n      borderColor: [\"rgb(255, 99, 132)\", \"rgb(255, 159, 64)\", \"rgb(255, 205, 86)\", \"rgb(75, 192, 192)\", \"rgb(54, 162, 235)\", \"rgb(153, 102, 255)\", \"rgb(201, 203, 207)\"],\n      borderWidth: 1\n    }]\n  };\n  const config = {\n    type: \"bar\",\n    data: dataObj,\n    options: {\n      scales: {\n        y: {\n          beginAtZero: true\n        }\n      }\n    }\n  }; // useEffect(() => {\n  //   const chart = new Chart(chartRef.current, config);\n  //   return function cleanUp() {\n  //     chart.destroy();\n  //   };\n  // }, [labels]);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: style.chartMain,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ChartMain, \"+o1nGUf0gmfc6lFgmRh5QYfQCMo=\");\n\n_c = ChartMain;\nexport default ChartMain;\n\nfunction createLabelsArr(standardLabels, duration) {\n  if (duration === \"6\" || duration === \"12\") {\n    return standardLabels.map(label => new Intl.DateTimeFormat(\"en-US\", dateOptObj).format(new Date(label)));\n  }\n\n  return standardLabels.map(label => `${label.slice(5, 7)}${label.slice(8)}`);\n}\n\nfunction createFilteredData(standardLabels, expensData) {\n  const numStartingDate = Number(new Date(standardLabels[0]));\n  const numEndingDate = Number(new Date(standardLabels[standardLabels.length - 1]));\n  return expensData.filter(element => Number(new Date(element.time)) >= numStartingDate && Number(new Date(element.time)) <= numEndingDate).sort((elementA, elementB) => Number(new Date(elementA.time)) - Number(new Date(elementB.time)));\n}\n\nfunction createDataArr(standardLabels, filteredData, timeDuration, mainCategory, subCategory) {\n  if (timeDuration === \"12\" || timeDuration === \"6\") return createDataArrMonth(standardLabels, filteredData, mainCategory, subCategory);else return createDataArrDay(standardLabels, filteredData, mainCategory, subCategory);\n}\n\nfunction createDataArrDay(standardLabels, filteredData, mainCategory, subCategory) {\n  const data = [];\n  const checkboxNoChange = mainCategory === \"expense\" && subCategory.length === 6 || mainCategory === \"income\" && subCategory.length === 3;\n  let indexData = 0;\n  let indexCurrentDate = true;\n  let currentAmount = 0;\n  let currentLabel;\n\n  for (let i = 0; i < standardLabels.length; i++) {\n    currentLabel = Number(new Date(standardLabels[i]));\n\n    while (indexCurrentDate) {\n      var _filteredData$indexDa;\n\n      if (Number(new Date((_filteredData$indexDa = filteredData[indexData]) === null || _filteredData$indexDa === void 0 ? void 0 : _filteredData$indexDa.time)) <= currentLabel) {\n        if (filteredData[indexData].category === mainCategory) {\n          if (checkboxNoChange || subCategory.includes(filteredData[indexData].mainCate)) currentAmount += Number(filteredData[indexData].price);\n        }\n\n        indexData++;\n      } else indexCurrentDate = false;\n    }\n\n    data.push(currentAmount);\n    currentAmount = 0;\n    indexCurrentDate = true;\n  }\n\n  return data;\n}\n\nfunction createDataArrMonth(standardLabels, filteredData, mainCategory, subCategory) {\n  const data = [];\n  const checkboxNoChange = mainCategory === \"expense\" && subCategory.length === 6 || mainCategory === \"income\" && subCategory.length === 3;\n  let indexData = 0;\n  let indexCurrentDate = true;\n  let currentAmount = 0;\n  let yearLabel, monthLabel, dayLabel, yearDate, monthData, dayData;\n\n  for (let i = 0; i < standardLabels.length; i++) {\n    yearLabel = standardLabels[i].slice(0, 4);\n    monthLabel = standardLabels[i].slice(5, 7);\n    dayLabel = standardLabels[i].slice(8);\n\n    while (indexCurrentDate) {\n      var _filteredData$indexDa2, _filteredData$indexDa3, _filteredData$indexDa4;\n\n      yearDate = (_filteredData$indexDa2 = filteredData[indexData]) === null || _filteredData$indexDa2 === void 0 ? void 0 : _filteredData$indexDa2.time.slice(0, 4);\n      monthData = (_filteredData$indexDa3 = filteredData[indexData]) === null || _filteredData$indexDa3 === void 0 ? void 0 : _filteredData$indexDa3.time.slice(5, 7);\n      dayData = (_filteredData$indexDa4 = filteredData[indexData]) === null || _filteredData$indexDa4 === void 0 ? void 0 : _filteredData$indexDa4.time.slice(8);\n\n      if (yearLabel === yearDate && monthLabel === monthData) {\n        if (Number(dayLabel) <= Number(dayData) && 31 >= Number(dayData)) if (filteredData[indexData].category === mainCategory) {\n          if (checkboxNoChange || subCategory.includes(filteredData[indexData].mainCate)) currentAmount += Number(filteredData[indexData].price);\n        }\n        indexData++;\n      } else indexCurrentDate = false;\n    }\n\n    data.push(currentAmount);\n    currentAmount = 0;\n    indexCurrentDate = true;\n  }\n\n  return data;\n}\n\nfunction createStandardLabelsArr(duration, startingDate) {\n  const today = new Date(startingDate);\n  let labels = []; // one week\n\n  if (duration === \"7\") {\n    createStandardLabelsArrHelper(labels, 7, 1, \"day\", today);\n  }\n\n  if (duration === \"14\") {\n    createStandardLabelsArrHelper(labels, 14, 1, \"day\", today);\n  }\n\n  if (duration === \"30\") {\n    createStandardLabelsArrHelper(labels, 30, 1, \"day\", today);\n  }\n\n  if (duration === \"90\") {\n    createStandardLabelsArrHelper(labels, 30, 3, \"day\", today);\n  }\n\n  if (duration === \"6\") {\n    createStandardLabelsArrHelper(labels, 6, 1, \"month\", today);\n  }\n\n  if (duration === \"12\") {\n    createStandardLabelsArrHelper(labels, 12, 1, \"month\", today);\n  }\n\n  return labels;\n}\n\nfunction createStandardLabelsArrHelper(labels, duration, incrementAmount, dayMonth, today) {\n  let tmpDay = today;\n  let day;\n  let month;\n  let year = today.getFullYear();\n  let changeYear = false; // if it's increment by month, the day is never change\n  // we could put it outisde for-loop\n\n  if (dayMonth === \"month\") {\n    if (tmpDay.getDate() < 10) day = `0${tmpDay.getDate()}`;else day = tmpDay.getDate();\n  }\n\n  for (let i = 0; i < duration; i++) {\n    // incremenet by month\n    if (dayMonth === \"month\") tmpDay.setMonth(tmpDay.getMonth() + incrementAmount); // increment by day\n\n    if (dayMonth === \"day\") {\n      tmpDay.setDate(tmpDay.getDate() + incrementAmount); // day will change, so put this inside for-loop\n\n      if (tmpDay.getDate() < 10) day = `0${tmpDay.getDate()}`;else day = tmpDay.getDate();\n    }\n\n    if (tmpDay.getMonth() + 1 < 10) month = `0${tmpDay.getMonth() + 1}`;else month = tmpDay.getMonth() + 1; // increment year\n\n    if (changeYear) {\n      year++;\n      changeYear = false;\n    }\n\n    if (tmpDay.getMonth() === 11) changeYear = true;\n    labels.push(`${year}-${month}-${day}`);\n  }\n}\n/*\n if (timeDuration === \"6\" || timeDuration === \"12\") {\n    if (mainCategory === \"income\" && subCategory.length === 3) {\n      const labelsLength = labels.length;\n      let indexLabel = 0;\n      let indexData = 0;\n      let indexCurrentDate = true;\n      let currentMonth;\n      let currentAmount = 0;\n\n      while (indexLabel < labelsLength) {\n        // keep adding if it's still at current date(time)\n        while (indexCurrentDate) {\n          currentMonth = new Intl.DateTimeFormat(\"en-US\", dateOptObj).format(\n            new Date(filteredData[indexData]?.time)\n          );\n          // check date(time)\n          if (currentMonth === labels1[indexLabel]) {\n            // check main category\n            if (filteredData[indexData].category === \"income\") {\n              currentAmount += Number(filteredData[indexData].price);\n            }\n\n            indexData++;\n          } else indexCurrentDate = false;\n        }\n\n        data.push(currentAmount);\n\n        currentAmount = 0;\n        indexCurrentDate = true;\n        indexLabel++;\n      }\n    }\n\n    if (mainCategory === \"expense\" && subCategory.length === 6) {\n      const labelsLength = labels.length;\n      let indexLabel = 0;\n      let indexData = 0;\n      let indexCurrentDate = true;\n      let currentMonth;\n      let currentAmount = 0;\n\n      while (indexLabel < labelsLength) {\n        // keep adding if it's still at current date(time)\n        while (indexCurrentDate) {\n          console.log(filteredData);\n          if (!filteredData[indexData]?.time)\n            currentMonth = new Intl.DateTimeFormat(\"en-US\", dateOptObj).format(\n              new Date(filteredData[indexData]?.time)\n            );\n          console.log(currentMonth);\n\n          if (currentMonth === labels1[indexLabel]) {\n            // check main category\n            if (filteredData[indexData].category === \"income\") {\n              currentAmount += Number(filteredData[indexData].price);\n            }\n\n            indexData++;\n          } else indexCurrentDate = false;\n        }\n\n        data.push(currentAmount);\n\n        currentAmount = 0;\n        indexCurrentDate = true;\n        indexLabel++;\n      }\n    }\n  }\n  // day base\n  else {\n    if (mainCategory === \"income\" && subCategory.length === 3) {\n      const labelsLength = labels.length;\n      let indexLabel = 0;\n      let indexData = 0;\n      let indexCurrentDate = true;\n      let currentDate;\n      let currentAmount = 0;\n\n      while (indexLabel < labelsLength) {\n        currentDate = `${year}-${labels[indexLabel].slice(0, 2)}-${labels[\n          indexLabel\n        ].slice(2)}`;\n\n        // keep adding if it's still at current date(time)\n        if (indexData < filteredData.length - 1) {\n          while (indexCurrentDate) {\n            // check date(time)\n            if (filteredData[indexData].time === currentDate) {\n              // check main category\n              if (filteredData[indexData].category === \"income\") {\n                currentAmount += Number(filteredData[indexData].price);\n              }\n\n              indexData++;\n            } else indexCurrentDate = false;\n          }\n        }\n\n        data.push(currentAmount);\n\n        currentAmount = 0;\n        indexCurrentDate = true;\n        indexLabel++;\n      }\n    }\n\n    if (mainCategory === \"expense\" && subCategory.length === 6) {\n      const labelsLength = labels.length;\n      let indexLabel = 0;\n      let indexData = 0;\n      let indexCurrentDate = true;\n      let currentDate;\n      let currentAmount = 0;\n\n      while (indexLabel < labelsLength) {\n        currentDate = `${year}-${labels[indexLabel].slice(0, 2)}-${labels[\n          indexLabel\n        ].slice(2)}`;\n\n        // keep adding if it's still at current date(time)\n\n        while (indexCurrentDate) {\n          // check date(time)\n          if (filteredData[indexData]?.time === currentDate) {\n            // check main category\n            if (filteredData[indexData].category === \"expense\") {\n              currentAmount += Number(filteredData[indexData].price);\n            }\n\n            indexData++;\n          } else indexCurrentDate = false;\n        }\n\n        data.push(currentAmount);\n\n        currentAmount = 0;\n        indexCurrentDate = true;\n        indexLabel++;\n      }\n    }\n  }\n*/\n\n\nvar _c;\n\n$RefreshReg$(_c, \"ChartMain\");","map":{"version":3,"sources":["/Users/eyo/Desktop/project-expenseTracker-main/src/components/MainContent/Chart/ChartMain/ChartMain.js"],"names":["useRef","useEffect","useContext","ExpenseDataContext","style","Chart","dateOptObj","month","data1","labels","datasets","label","data","backgroundColor","hoverOffset","config1","type","ChartMain","props","chartRef","EXPENSE_DATA","console","log","standardLabels","createStandardLabelsArr","chartData","timeDuration","startingDate","createLabelsArr","createDataArr","createFilteredData","mainCategory","subCategory","dataObj","borderColor","borderWidth","config","options","scales","y","beginAtZero","chartMain","duration","map","Intl","DateTimeFormat","format","Date","slice","expensData","numStartingDate","Number","numEndingDate","length","filter","element","time","sort","elementA","elementB","filteredData","createDataArrMonth","createDataArrDay","checkboxNoChange","indexData","indexCurrentDate","currentAmount","currentLabel","i","category","includes","mainCate","price","push","yearLabel","monthLabel","dayLabel","yearDate","monthData","dayData","today","createStandardLabelsArrHelper","incrementAmount","dayMonth","tmpDay","day","year","getFullYear","changeYear","getDate","setMonth","getMonth","setDate"],"mappings":"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":["import { useRef, useEffect, useContext } from \"react\";\nimport ExpenseDataContext from \"../../../../store/expenseData/expenseData--context\";\nimport style from \"./ChartMain.module.css\";\nimport Chart from \"chart.js/auto\";\n\nconst dateOptObj = { month: \"short\" };\nconst data1 = {\n  labels: [\"Red\", \"Blue\", \"Yellow\"],\n  datasets: [\n    {\n      label: \"My First Dataset\",\n      data: [300, 50, 100],\n      backgroundColor: [\n        \"rgb(255, 99, 132)\",\n        \"rgb(54, 162, 235)\",\n        \"rgb(255, 205, 86)\",\n      ],\n      hoverOffset: 4,\n    },\n  ],\n};\n\nconst config1 = {\n  type: \"doughnut\",\n  data: data1,\n};\n\nfunction ChartMain(props) {\n  const chartRef = useRef(null);\n  const { EXPENSE_DATA } = useContext(ExpenseDataContext);\n\n  console.log(props);\n\n  let labels = [],\n    data = [];\n\n  const standardLabels = createStandardLabelsArr(\n    props.chartData.timeDuration,\n    props.chartData.startingDate\n  );\n\n  labels = createLabelsArr(standardLabels, props.chartData.timeDuration);\n\n  data = createDataArr(\n    standardLabels,\n    createFilteredData(standardLabels, EXPENSE_DATA),\n    props.chartData.timeDuration,\n    props.chartData.mainCategory,\n    props.chartData.subCategory\n  );\n\n  const dataObj = {\n    labels: labels,\n    datasets: [\n      {\n        label: \"\",\n        data: data,\n        backgroundColor: [\n          \"rgba(255, 99, 132, 0.2)\",\n          \"rgba(255, 159, 64, 0.2)\",\n          \"rgba(255, 205, 86, 0.2)\",\n          \"rgba(75, 192, 192, 0.2)\",\n          \"rgba(54, 162, 235, 0.2)\",\n          \"rgba(153, 102, 255, 0.2)\",\n          \"rgba(201, 203, 207, 0.2)\",\n        ],\n        borderColor: [\n          \"rgb(255, 99, 132)\",\n          \"rgb(255, 159, 64)\",\n          \"rgb(255, 205, 86)\",\n          \"rgb(75, 192, 192)\",\n          \"rgb(54, 162, 235)\",\n          \"rgb(153, 102, 255)\",\n          \"rgb(201, 203, 207)\",\n        ],\n        borderWidth: 1,\n      },\n    ],\n  };\n\n  const config = {\n    type: \"bar\",\n    data: dataObj,\n    options: {\n      scales: {\n        y: {\n          beginAtZero: true,\n        },\n      },\n    },\n  };\n\n  // useEffect(() => {\n  //   const chart = new Chart(chartRef.current, config);\n\n  //   return function cleanUp() {\n  //     chart.destroy();\n  //   };\n  // }, [labels]);\n\n  return (\n    <div className={style.chartMain}>\n      <div>{/* <canvas ref={chartRef}></canvas> */}</div>\n    </div>\n  );\n}\n\nexport default ChartMain;\n\nfunction createLabelsArr(standardLabels, duration) {\n  if (duration === \"6\" || duration === \"12\") {\n    return standardLabels.map((label) =>\n      new Intl.DateTimeFormat(\"en-US\", dateOptObj).format(new Date(label))\n    );\n  }\n\n  return standardLabels.map((label) => `${label.slice(5, 7)}${label.slice(8)}`);\n}\n\nfunction createFilteredData(standardLabels, expensData) {\n  const numStartingDate = Number(new Date(standardLabels[0]));\n  const numEndingDate = Number(\n    new Date(standardLabels[standardLabels.length - 1])\n  );\n\n  return expensData\n    .filter(\n      (element) =>\n        Number(new Date(element.time)) >= numStartingDate &&\n        Number(new Date(element.time)) <= numEndingDate\n    )\n    .sort(\n      (elementA, elementB) =>\n        Number(new Date(elementA.time)) - Number(new Date(elementB.time))\n    );\n}\n\nfunction createDataArr(\n  standardLabels,\n  filteredData,\n  timeDuration,\n  mainCategory,\n  subCategory\n) {\n  if (timeDuration === \"12\" || timeDuration === \"6\")\n    return createDataArrMonth(\n      standardLabels,\n      filteredData,\n      mainCategory,\n      subCategory\n    );\n  else\n    return createDataArrDay(\n      standardLabels,\n      filteredData,\n      mainCategory,\n      subCategory\n    );\n}\n\nfunction createDataArrDay(\n  standardLabels,\n  filteredData,\n  mainCategory,\n  subCategory\n) {\n  const data = [];\n  const checkboxNoChange =\n    (mainCategory === \"expense\" && subCategory.length === 6) ||\n    (mainCategory === \"income\" && subCategory.length === 3);\n  let indexData = 0;\n  let indexCurrentDate = true;\n  let currentAmount = 0;\n  let currentLabel;\n\n  for (let i = 0; i < standardLabels.length; i++) {\n    currentLabel = Number(new Date(standardLabels[i]));\n\n    while (indexCurrentDate) {\n      if (Number(new Date(filteredData[indexData]?.time)) <= currentLabel) {\n        if (filteredData[indexData].category === mainCategory) {\n          if (\n            checkboxNoChange ||\n            subCategory.includes(filteredData[indexData].mainCate)\n          )\n            currentAmount += Number(filteredData[indexData].price);\n        }\n\n        indexData++;\n      } else indexCurrentDate = false;\n    }\n\n    data.push(currentAmount);\n    currentAmount = 0;\n    indexCurrentDate = true;\n  }\n\n  return data;\n}\n\nfunction createDataArrMonth(\n  standardLabels,\n  filteredData,\n  mainCategory,\n  subCategory\n) {\n  const data = [];\n  const checkboxNoChange =\n    (mainCategory === \"expense\" && subCategory.length === 6) ||\n    (mainCategory === \"income\" && subCategory.length === 3);\n  let indexData = 0;\n  let indexCurrentDate = true;\n  let currentAmount = 0;\n  let yearLabel, monthLabel, dayLabel, yearDate, monthData, dayData;\n\n  for (let i = 0; i < standardLabels.length; i++) {\n    yearLabel = standardLabels[i].slice(0, 4);\n    monthLabel = standardLabels[i].slice(5, 7);\n    dayLabel = standardLabels[i].slice(8);\n\n    while (indexCurrentDate) {\n      yearDate = filteredData[indexData]?.time.slice(0, 4);\n      monthData = filteredData[indexData]?.time.slice(5, 7);\n      dayData = filteredData[indexData]?.time.slice(8);\n\n      if (yearLabel === yearDate && monthLabel === monthData) {\n        if (Number(dayLabel) <= Number(dayData) && 31 >= Number(dayData))\n          if (filteredData[indexData].category === mainCategory) {\n            if (\n              checkboxNoChange ||\n              subCategory.includes(filteredData[indexData].mainCate)\n            )\n              currentAmount += Number(filteredData[indexData].price);\n          }\n\n        indexData++;\n      } else indexCurrentDate = false;\n    }\n\n    data.push(currentAmount);\n    currentAmount = 0;\n    indexCurrentDate = true;\n  }\n\n  return data;\n}\n\nfunction createStandardLabelsArr(duration, startingDate) {\n  const today = new Date(startingDate);\n\n  let labels = [];\n\n  // one week\n  if (duration === \"7\") {\n    createStandardLabelsArrHelper(labels, 7, 1, \"day\", today);\n  }\n\n  if (duration === \"14\") {\n    createStandardLabelsArrHelper(labels, 14, 1, \"day\", today);\n  }\n\n  if (duration === \"30\") {\n    createStandardLabelsArrHelper(labels, 30, 1, \"day\", today);\n  }\n\n  if (duration === \"90\") {\n    createStandardLabelsArrHelper(labels, 30, 3, \"day\", today);\n  }\n\n  if (duration === \"6\") {\n    createStandardLabelsArrHelper(labels, 6, 1, \"month\", today);\n  }\n\n  if (duration === \"12\") {\n    createStandardLabelsArrHelper(labels, 12, 1, \"month\", today);\n  }\n\n  return labels;\n}\n\nfunction createStandardLabelsArrHelper(\n  labels,\n  duration,\n  incrementAmount,\n  dayMonth,\n  today\n) {\n  let tmpDay = today;\n  let day;\n  let month;\n  let year = today.getFullYear();\n  let changeYear = false;\n\n  // if it's increment by month, the day is never change\n  // we could put it outisde for-loop\n  if (dayMonth === \"month\") {\n    if (tmpDay.getDate() < 10) day = `0${tmpDay.getDate()}`;\n    else day = tmpDay.getDate();\n  }\n\n  for (let i = 0; i < duration; i++) {\n    // incremenet by month\n    if (dayMonth === \"month\")\n      tmpDay.setMonth(tmpDay.getMonth() + incrementAmount);\n\n    // increment by day\n    if (dayMonth === \"day\") {\n      tmpDay.setDate(tmpDay.getDate() + incrementAmount);\n\n      // day will change, so put this inside for-loop\n      if (tmpDay.getDate() < 10) day = `0${tmpDay.getDate()}`;\n      else day = tmpDay.getDate();\n    }\n\n    if (tmpDay.getMonth() + 1 < 10) month = `0${tmpDay.getMonth() + 1}`;\n    else month = tmpDay.getMonth() + 1;\n\n    // increment year\n    if (changeYear) {\n      year++;\n      changeYear = false;\n    }\n    if (tmpDay.getMonth() === 11) changeYear = true;\n\n    labels.push(`${year}-${month}-${day}`);\n  }\n}\n\n/*\n if (timeDuration === \"6\" || timeDuration === \"12\") {\n    if (mainCategory === \"income\" && subCategory.length === 3) {\n      const labelsLength = labels.length;\n      let indexLabel = 0;\n      let indexData = 0;\n      let indexCurrentDate = true;\n      let currentMonth;\n      let currentAmount = 0;\n\n      while (indexLabel < labelsLength) {\n        // keep adding if it's still at current date(time)\n        while (indexCurrentDate) {\n          currentMonth = new Intl.DateTimeFormat(\"en-US\", dateOptObj).format(\n            new Date(filteredData[indexData]?.time)\n          );\n          // check date(time)\n          if (currentMonth === labels1[indexLabel]) {\n            // check main category\n            if (filteredData[indexData].category === \"income\") {\n              currentAmount += Number(filteredData[indexData].price);\n            }\n\n            indexData++;\n          } else indexCurrentDate = false;\n        }\n\n        data.push(currentAmount);\n\n        currentAmount = 0;\n        indexCurrentDate = true;\n        indexLabel++;\n      }\n    }\n\n    if (mainCategory === \"expense\" && subCategory.length === 6) {\n      const labelsLength = labels.length;\n      let indexLabel = 0;\n      let indexData = 0;\n      let indexCurrentDate = true;\n      let currentMonth;\n      let currentAmount = 0;\n\n      while (indexLabel < labelsLength) {\n        // keep adding if it's still at current date(time)\n        while (indexCurrentDate) {\n          console.log(filteredData);\n          if (!filteredData[indexData]?.time)\n            currentMonth = new Intl.DateTimeFormat(\"en-US\", dateOptObj).format(\n              new Date(filteredData[indexData]?.time)\n            );\n          console.log(currentMonth);\n\n          if (currentMonth === labels1[indexLabel]) {\n            // check main category\n            if (filteredData[indexData].category === \"income\") {\n              currentAmount += Number(filteredData[indexData].price);\n            }\n\n            indexData++;\n          } else indexCurrentDate = false;\n        }\n\n        data.push(currentAmount);\n\n        currentAmount = 0;\n        indexCurrentDate = true;\n        indexLabel++;\n      }\n    }\n  }\n  // day base\n  else {\n    if (mainCategory === \"income\" && subCategory.length === 3) {\n      const labelsLength = labels.length;\n      let indexLabel = 0;\n      let indexData = 0;\n      let indexCurrentDate = true;\n      let currentDate;\n      let currentAmount = 0;\n\n      while (indexLabel < labelsLength) {\n        currentDate = `${year}-${labels[indexLabel].slice(0, 2)}-${labels[\n          indexLabel\n        ].slice(2)}`;\n\n        // keep adding if it's still at current date(time)\n        if (indexData < filteredData.length - 1) {\n          while (indexCurrentDate) {\n            // check date(time)\n            if (filteredData[indexData].time === currentDate) {\n              // check main category\n              if (filteredData[indexData].category === \"income\") {\n                currentAmount += Number(filteredData[indexData].price);\n              }\n\n              indexData++;\n            } else indexCurrentDate = false;\n          }\n        }\n\n        data.push(currentAmount);\n\n        currentAmount = 0;\n        indexCurrentDate = true;\n        indexLabel++;\n      }\n    }\n\n    if (mainCategory === \"expense\" && subCategory.length === 6) {\n      const labelsLength = labels.length;\n      let indexLabel = 0;\n      let indexData = 0;\n      let indexCurrentDate = true;\n      let currentDate;\n      let currentAmount = 0;\n\n      while (indexLabel < labelsLength) {\n        currentDate = `${year}-${labels[indexLabel].slice(0, 2)}-${labels[\n          indexLabel\n        ].slice(2)}`;\n\n        // keep adding if it's still at current date(time)\n\n        while (indexCurrentDate) {\n          // check date(time)\n          if (filteredData[indexData]?.time === currentDate) {\n            // check main category\n            if (filteredData[indexData].category === \"expense\") {\n              currentAmount += Number(filteredData[indexData].price);\n            }\n\n            indexData++;\n          } else indexCurrentDate = false;\n        }\n\n        data.push(currentAmount);\n\n        currentAmount = 0;\n        indexCurrentDate = true;\n        indexLabel++;\n      }\n    }\n  }\n*/\n"]},"metadata":{},"sourceType":"module"}