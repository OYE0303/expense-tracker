{"ast":null,"code":"import createFinalDataArr from \"./createFinalDataArr\";\n\nfunction createConfigObj(labels, data, displayTheme) {\n  if (mainType === \"account\" || mainType === \"time\" && mainCategory === \"net\") return {\n    type: \"line\",\n    data: {\n      labels: labels,\n      datasets: [{\n        fill: {\n          target: \"origin\"\n        },\n        label: \"\",\n        data: data,\n        backgroundColor: [\"rgba(54, 162, 235, 0.2)\"],\n        borderColor: [\"rgb(54, 162, 235)\"],\n        borderWidth: 1,\n        pointBackgroundColor: [\"rgb(54, 162, 235)\"]\n      }]\n    },\n    options: {\n      maintainAspectRatio: false,\n      elements: {\n        line: {\n          tension: 0.5\n        }\n      },\n      scales: {\n        y: {\n          beginAtZero: true\n        }\n      }\n    }\n  };else if (mainType === \"time\") {\n    let legend = null;\n    /*\n    Only show chart label above when \n    1. In the big chart section\n    2. Chart is one week, six month or twelve month\n    Too many labels is messy\n    */\n\n    if (showLabel && (timeDuration === \"7\" || timeDuration === \"6\" || timeDuration === \"12\")) {\n      legend = {\n        onClick: (e, legendItem, legend) => {\n          const index = legend.chart.data.labels.indexOf(legendItem.text);\n          legend.chart.toggleDataVisibility(index);\n          legend.chart.update();\n        },\n        labels: {\n          generateLabels: chart => {\n            const colorLength = chart.data.datasets[0].borderColor.length;\n            const visibility = [];\n\n            for (let i = 0; i < chart.data.labels.length; i++) {\n              if (chart.getDataVisibility(i)) visibility.push(false);else visibility.push(true);\n            }\n\n            return chart.data.labels.map((label, index) => {\n              const newIndex = index % colorLength;\n              return {\n                text: label,\n                strokeStyle: chart.data.datasets[0].borderColor[newIndex],\n                fillStyle: chart.data.datasets[0].backgroundColor[newIndex],\n                hidden: visibility[index]\n              };\n            });\n          }\n        }\n      };\n    }\n\n    return {\n      type: \"bar\",\n      data: {\n        labels: labels,\n        datasets: [{\n          label: \"\",\n          data: data,\n          backgroundColor: [\"rgba(255, 99, 132, 0.2)\", \"rgba(255, 159, 64, 0.2)\", \"rgba(255, 205, 86, 0.2)\", \"rgba(75, 192, 192, 0.2)\", \"rgba(54, 162, 235, 0.2)\", \"rgba(153, 102, 255, 0.2)\", \"rgba(201, 203, 207, 0.2)\"],\n          borderColor: [\"rgb(255, 99, 132)\", \"rgb(255, 159, 64)\", \"rgb(255, 205, 86)\", \"rgb(75, 192, 192)\", \"rgb(54, 162, 235)\", \"rgb(153, 102, 255)\", \"rgb(201, 203, 207)\"],\n          borderWidth: 1\n        }]\n      },\n      options: {\n        maintainAspectRatio: false,\n        plugins: {\n          tooltip: {\n            yAlign: \"bottom\",\n            displayColors: false,\n            backgroundColor: tooltipItem => {\n              return tooltipItem.tooltip.labelColors[0].borderColor;\n            }\n          },\n          legend\n        },\n        scales: {\n          y: {\n            beginAtZero: true,\n            ticks: {\n              color: `${displayTheme === \"dark\" ? \"rgb(190,190,190)\" : \"rgb(70,70,70)\"}`\n            }\n          },\n          x: {\n            ticks: {\n              color: `${displayTheme === \"dark\" ? \"rgb(190,190,190)\" : \"rgb(70,70,70)\"}`\n            }\n          }\n        }\n      }\n    };\n  } else return {\n    type: \"pie\",\n    data: {\n      labels: labels,\n      datasets: [{\n        label: \"My First Dataset\",\n        data: data,\n        backgroundColor: [\"rgb(255, 99, 132)\", \"rgb(255, 159, 64)\", \"rgb(255, 205, 86)\", \"rgb(75, 192, 192)\", \"rgb(54, 162, 235)\", \"rgb(153, 102, 255)\", \"rgb(201, 203, 207)\"],\n        hoverOffset: 4\n      }]\n    },\n    options: {\n      maintainAspectRatio: false,\n      plugins: {\n        legend: {\n          labels: {\n            font: {\n              size: 14\n            },\n            color: `${displayTheme === \"dark\" ? \"rgb(190,190,190)\" : \"rgb(70,70,70)\"}`\n          }\n        }\n      }\n    },\n    plugins: [100]\n  };\n}\n\nexport default createConfigObj; // function createConfigObj(\n//   mainType,\n//   timeDuration,\n//   startingDate,\n//   endingDate,\n//   expenseData,\n//   mainCategory,\n//   subCategory,\n//   displayTheme,\n//   showLabel = false,\n//   mainCategoryData = [],\n//   subCategoryData = []\n// ) {\n//   const [labels, data] = createFinalDataArr(\n//     mainType,\n//     timeDuration,\n//     startingDate,\n//     endingDate,\n//     expenseData,\n//     mainCategory,\n//     subCategory,\n//     showLabel,\n//     mainCategoryData,\n//     subCategoryData\n//   );\n//   if (mainType === \"account\" || (mainType === \"time\" && mainCategory === \"net\"))\n//     return {\n//       type: \"line\",\n//       data: {\n//         labels: labels,\n//         datasets: [\n//           {\n//             fill: {\n//               target: \"origin\",\n//             },\n//             label: \"\",\n//             data: data,\n//             backgroundColor: [\"rgba(54, 162, 235, 0.2)\"],\n//             borderColor: [\"rgb(54, 162, 235)\"],\n//             borderWidth: 1,\n//             pointBackgroundColor: [\"rgb(54, 162, 235)\"],\n//           },\n//         ],\n//       },\n//       options: {\n//         maintainAspectRatio: false,\n//         elements: {\n//           line: {\n//             tension: 0.5,\n//           },\n//         },\n//         scales: {\n//           y: {\n//             beginAtZero: true,\n//           },\n//         },\n//       },\n//     };\n//   else if (mainType === \"time\") {\n//     let legend = null;\n//     /*\n//     Only show chart label above when\n//     1. In the big chart section\n//     2. Chart is one week, six month or twelve month\n//     Too many labels is messy\n//     */\n//     if (\n//       showLabel &&\n//       (timeDuration === \"7\" || timeDuration === \"6\" || timeDuration === \"12\")\n//     ) {\n//       legend = {\n//         onClick: (e, legendItem, legend) => {\n//           const index = legend.chart.data.labels.indexOf(legendItem.text);\n//           legend.chart.toggleDataVisibility(index);\n//           legend.chart.update();\n//         },\n//         labels: {\n//           generateLabels: (chart) => {\n//             const colorLength = chart.data.datasets[0].borderColor.length;\n//             const visibility = [];\n//             for (let i = 0; i < chart.data.labels.length; i++) {\n//               if (chart.getDataVisibility(i)) visibility.push(false);\n//               else visibility.push(true);\n//             }\n//             return chart.data.labels.map((label, index) => {\n//               const newIndex = index % colorLength;\n//               return {\n//                 text: label,\n//                 strokeStyle: chart.data.datasets[0].borderColor[newIndex],\n//                 fillStyle: chart.data.datasets[0].backgroundColor[newIndex],\n//                 hidden: visibility[index],\n//               };\n//             });\n//           },\n//         },\n//       };\n//     }\n//     return {\n//       type: \"bar\",\n//       data: {\n//         labels: labels,\n//         datasets: [\n//           {\n//             label: \"\",\n//             data: data,\n//             backgroundColor: [\n//               \"rgba(255, 99, 132, 0.2)\",\n//               \"rgba(255, 159, 64, 0.2)\",\n//               \"rgba(255, 205, 86, 0.2)\",\n//               \"rgba(75, 192, 192, 0.2)\",\n//               \"rgba(54, 162, 235, 0.2)\",\n//               \"rgba(153, 102, 255, 0.2)\",\n//               \"rgba(201, 203, 207, 0.2)\",\n//             ],\n//             borderColor: [\n//               \"rgb(255, 99, 132)\",\n//               \"rgb(255, 159, 64)\",\n//               \"rgb(255, 205, 86)\",\n//               \"rgb(75, 192, 192)\",\n//               \"rgb(54, 162, 235)\",\n//               \"rgb(153, 102, 255)\",\n//               \"rgb(201, 203, 207)\",\n//             ],\n//             borderWidth: 1,\n//           },\n//         ],\n//       },\n//       options: {\n//         maintainAspectRatio: false,\n//         plugins: {\n//           tooltip: {\n//             yAlign: \"bottom\",\n//             displayColors: false,\n//             backgroundColor: (tooltipItem) => {\n//               return tooltipItem.tooltip.labelColors[0].borderColor;\n//             },\n//           },\n//           legend,\n//         },\n//         scales: {\n//           y: {\n//             beginAtZero: true,\n//             ticks: {\n//               color: `${\n//                 displayTheme === \"dark\" ? \"rgb(190,190,190)\" : \"rgb(70,70,70)\"\n//               }`,\n//             },\n//           },\n//           x: {\n//             ticks: {\n//               color: `${\n//                 displayTheme === \"dark\" ? \"rgb(190,190,190)\" : \"rgb(70,70,70)\"\n//               }`,\n//             },\n//           },\n//         },\n//       },\n//     };\n//   } else\n//     return {\n//       type: \"pie\",\n//       data: {\n//         labels: labels,\n//         datasets: [\n//           {\n//             label: \"My First Dataset\",\n//             data: data,\n//             backgroundColor: [\n//               \"rgb(255, 99, 132)\",\n//               \"rgb(255, 159, 64)\",\n//               \"rgb(255, 205, 86)\",\n//               \"rgb(75, 192, 192)\",\n//               \"rgb(54, 162, 235)\",\n//               \"rgb(153, 102, 255)\",\n//               \"rgb(201, 203, 207)\",\n//             ],\n//             hoverOffset: 4,\n//           },\n//         ],\n//       },\n//       options: {\n//         maintainAspectRatio: false,\n//         plugins: {\n//           legend: {\n//             labels: {\n//               font: {\n//                 size: 14,\n//               },\n//               color: `${\n//                 displayTheme === \"dark\" ? \"rgb(190,190,190)\" : \"rgb(70,70,70)\"\n//               }`,\n//             },\n//           },\n//         },\n//       },\n//       plugins: [100],\n//     };\n// }","map":{"version":3,"sources":["/Users/eyo/Desktop/expense-tracker/src/Others/CreateChartData/createConfigObj.js"],"names":["createFinalDataArr","createConfigObj","labels","data","displayTheme","mainType","mainCategory","type","datasets","fill","target","label","backgroundColor","borderColor","borderWidth","pointBackgroundColor","options","maintainAspectRatio","elements","line","tension","scales","y","beginAtZero","legend","showLabel","timeDuration","onClick","e","legendItem","index","chart","indexOf","text","toggleDataVisibility","update","generateLabels","colorLength","length","visibility","i","getDataVisibility","push","map","newIndex","strokeStyle","fillStyle","hidden","plugins","tooltip","yAlign","displayColors","tooltipItem","labelColors","ticks","color","x","hoverOffset","font","size"],"mappings":"AAAA,OAAOA,kBAAP,MAA+B,sBAA/B;;AAEA,SAASC,eAAT,CAAyBC,MAAzB,EAAiCC,IAAjC,EAAuCC,YAAvC,EAAqD;AACnD,MAAIC,QAAQ,KAAK,SAAb,IAA2BA,QAAQ,KAAK,MAAb,IAAuBC,YAAY,KAAK,KAAvE,EACE,OAAO;AACLC,IAAAA,IAAI,EAAE,MADD;AAELJ,IAAAA,IAAI,EAAE;AACJD,MAAAA,MAAM,EAAEA,MADJ;AAEJM,MAAAA,QAAQ,EAAE,CACR;AACEC,QAAAA,IAAI,EAAE;AACJC,UAAAA,MAAM,EAAE;AADJ,SADR;AAIEC,QAAAA,KAAK,EAAE,EAJT;AAKER,QAAAA,IAAI,EAAEA,IALR;AAMES,QAAAA,eAAe,EAAE,CAAC,yBAAD,CANnB;AAOEC,QAAAA,WAAW,EAAE,CAAC,mBAAD,CAPf;AAQEC,QAAAA,WAAW,EAAE,CARf;AASEC,QAAAA,oBAAoB,EAAE,CAAC,mBAAD;AATxB,OADQ;AAFN,KAFD;AAkBLC,IAAAA,OAAO,EAAE;AACPC,MAAAA,mBAAmB,EAAE,KADd;AAEPC,MAAAA,QAAQ,EAAE;AACRC,QAAAA,IAAI,EAAE;AACJC,UAAAA,OAAO,EAAE;AADL;AADE,OAFH;AAOPC,MAAAA,MAAM,EAAE;AACNC,QAAAA,CAAC,EAAE;AACDC,UAAAA,WAAW,EAAE;AADZ;AADG;AAPD;AAlBJ,GAAP,CADF,KAiCK,IAAIlB,QAAQ,KAAK,MAAjB,EAAyB;AAC5B,QAAImB,MAAM,GAAG,IAAb;AAEA;AACJ;AACA;AACA;AACA;AACA;;AACI,QACEC,SAAS,KACRC,YAAY,KAAK,GAAjB,IAAwBA,YAAY,KAAK,GAAzC,IAAgDA,YAAY,KAAK,IADzD,CADX,EAGE;AACAF,MAAAA,MAAM,GAAG;AACPG,QAAAA,OAAO,EAAE,CAACC,CAAD,EAAIC,UAAJ,EAAgBL,MAAhB,KAA2B;AAClC,gBAAMM,KAAK,GAAGN,MAAM,CAACO,KAAP,CAAa5B,IAAb,CAAkBD,MAAlB,CAAyB8B,OAAzB,CAAiCH,UAAU,CAACI,IAA5C,CAAd;AACAT,UAAAA,MAAM,CAACO,KAAP,CAAaG,oBAAb,CAAkCJ,KAAlC;AACAN,UAAAA,MAAM,CAACO,KAAP,CAAaI,MAAb;AACD,SALM;AAMPjC,QAAAA,MAAM,EAAE;AACNkC,UAAAA,cAAc,EAAGL,KAAD,IAAW;AACzB,kBAAMM,WAAW,GAAGN,KAAK,CAAC5B,IAAN,CAAWK,QAAX,CAAoB,CAApB,EAAuBK,WAAvB,CAAmCyB,MAAvD;AACA,kBAAMC,UAAU,GAAG,EAAnB;;AACA,iBAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGT,KAAK,CAAC5B,IAAN,CAAWD,MAAX,CAAkBoC,MAAtC,EAA8CE,CAAC,EAA/C,EAAmD;AACjD,kBAAIT,KAAK,CAACU,iBAAN,CAAwBD,CAAxB,CAAJ,EAAgCD,UAAU,CAACG,IAAX,CAAgB,KAAhB,EAAhC,KACKH,UAAU,CAACG,IAAX,CAAgB,IAAhB;AACN;;AACD,mBAAOX,KAAK,CAAC5B,IAAN,CAAWD,MAAX,CAAkByC,GAAlB,CAAsB,CAAChC,KAAD,EAAQmB,KAAR,KAAkB;AAC7C,oBAAMc,QAAQ,GAAGd,KAAK,GAAGO,WAAzB;AACA,qBAAO;AACLJ,gBAAAA,IAAI,EAAEtB,KADD;AAELkC,gBAAAA,WAAW,EAAEd,KAAK,CAAC5B,IAAN,CAAWK,QAAX,CAAoB,CAApB,EAAuBK,WAAvB,CAAmC+B,QAAnC,CAFR;AAGLE,gBAAAA,SAAS,EAAEf,KAAK,CAAC5B,IAAN,CAAWK,QAAX,CAAoB,CAApB,EAAuBI,eAAvB,CAAuCgC,QAAvC,CAHN;AAILG,gBAAAA,MAAM,EAAER,UAAU,CAACT,KAAD;AAJb,eAAP;AAMD,aARM,CAAP;AASD;AAjBK;AAND,OAAT;AA0BD;;AAED,WAAO;AACLvB,MAAAA,IAAI,EAAE,KADD;AAELJ,MAAAA,IAAI,EAAE;AACJD,QAAAA,MAAM,EAAEA,MADJ;AAEJM,QAAAA,QAAQ,EAAE,CACR;AACEG,UAAAA,KAAK,EAAE,EADT;AAEER,UAAAA,IAAI,EAAEA,IAFR;AAGES,UAAAA,eAAe,EAAE,CACf,yBADe,EAEf,yBAFe,EAGf,yBAHe,EAIf,yBAJe,EAKf,yBALe,EAMf,0BANe,EAOf,0BAPe,CAHnB;AAYEC,UAAAA,WAAW,EAAE,CACX,mBADW,EAEX,mBAFW,EAGX,mBAHW,EAIX,mBAJW,EAKX,mBALW,EAMX,oBANW,EAOX,oBAPW,CAZf;AAqBEC,UAAAA,WAAW,EAAE;AArBf,SADQ;AAFN,OAFD;AA8BLE,MAAAA,OAAO,EAAE;AACPC,QAAAA,mBAAmB,EAAE,KADd;AAEP+B,QAAAA,OAAO,EAAE;AACPC,UAAAA,OAAO,EAAE;AACPC,YAAAA,MAAM,EAAE,QADD;AAEPC,YAAAA,aAAa,EAAE,KAFR;AAGPvC,YAAAA,eAAe,EAAGwC,WAAD,IAAiB;AAChC,qBAAOA,WAAW,CAACH,OAAZ,CAAoBI,WAApB,CAAgC,CAAhC,EAAmCxC,WAA1C;AACD;AALM,WADF;AAQPW,UAAAA;AARO,SAFF;AAYPH,QAAAA,MAAM,EAAE;AACNC,UAAAA,CAAC,EAAE;AACDC,YAAAA,WAAW,EAAE,IADZ;AAED+B,YAAAA,KAAK,EAAE;AACLC,cAAAA,KAAK,EAAG,GACNnD,YAAY,KAAK,MAAjB,GAA0B,kBAA1B,GAA+C,eAChD;AAHI;AAFN,WADG;AASNoD,UAAAA,CAAC,EAAE;AACDF,YAAAA,KAAK,EAAE;AACLC,cAAAA,KAAK,EAAG,GACNnD,YAAY,KAAK,MAAjB,GAA0B,kBAA1B,GAA+C,eAChD;AAHI;AADN;AATG;AAZD;AA9BJ,KAAP;AA6DD,GAtGI,MAuGH,OAAO;AACLG,IAAAA,IAAI,EAAE,KADD;AAELJ,IAAAA,IAAI,EAAE;AACJD,MAAAA,MAAM,EAAEA,MADJ;AAEJM,MAAAA,QAAQ,EAAE,CACR;AACEG,QAAAA,KAAK,EAAE,kBADT;AAEER,QAAAA,IAAI,EAAEA,IAFR;AAGES,QAAAA,eAAe,EAAE,CACf,mBADe,EAEf,mBAFe,EAGf,mBAHe,EAIf,mBAJe,EAKf,mBALe,EAMf,oBANe,EAOf,oBAPe,CAHnB;AAYE6C,QAAAA,WAAW,EAAE;AAZf,OADQ;AAFN,KAFD;AAqBLzC,IAAAA,OAAO,EAAE;AACPC,MAAAA,mBAAmB,EAAE,KADd;AAEP+B,MAAAA,OAAO,EAAE;AACPxB,QAAAA,MAAM,EAAE;AACNtB,UAAAA,MAAM,EAAE;AACNwD,YAAAA,IAAI,EAAE;AACJC,cAAAA,IAAI,EAAE;AADF,aADA;AAINJ,YAAAA,KAAK,EAAG,GACNnD,YAAY,KAAK,MAAjB,GAA0B,kBAA1B,GAA+C,eAChD;AANK;AADF;AADD;AAFF,KArBJ;AAoCL4C,IAAAA,OAAO,EAAE,CAAC,GAAD;AApCJ,GAAP;AAsCH;;AAED,eAAe/C,eAAfsourcesContent":["import createFinalDataArr from \"./createFinalDataArr\";\n\nfunction createConfigObj(labels, data, displayTheme) {\n  if (mainType === \"account\" || (mainType === \"time\" && mainCategory === \"net\"))\n    return {\n      type: \"line\",\n      data: {\n        labels: labels,\n        datasets: [\n          {\n            fill: {\n              target: \"origin\",\n            },\n            label: \"\",\n            data: data,\n            backgroundColor: [\"rgba(54, 162, 235, 0.2)\"],\n            borderColor: [\"rgb(54, 162, 235)\"],\n            borderWidth: 1,\n            pointBackgroundColor: [\"rgb(54, 162, 235)\"],\n          },\n        ],\n      },\n      options: {\n        maintainAspectRatio: false,\n        elements: {\n          line: {\n            tension: 0.5,\n          },\n        },\n        scales: {\n          y: {\n            beginAtZero: true,\n          },\n        },\n      },\n    };\n  else if (mainType === \"time\") {\n    let legend = null;\n\n    /*\n    Only show chart label above when \n    1. In the big chart section\n    2. Chart is one week, six month or twelve month\n    Too many labels is messy\n    */\n    if (\n      showLabel &&\n      (timeDuration === \"7\" || timeDuration === \"6\" || timeDuration === \"12\")\n    ) {\n      legend = {\n        onClick: (e, legendItem, legend) => {\n          const index = legend.chart.data.labels.indexOf(legendItem.text);\n          legend.chart.toggleDataVisibility(index);\n          legend.chart.update();\n        },\n        labels: {\n          generateLabels: (chart) => {\n            const colorLength = chart.data.datasets[0].borderColor.length;\n            const visibility = [];\n            for (let i = 0; i < chart.data.labels.length; i++) {\n              if (chart.getDataVisibility(i)) visibility.push(false);\n              else visibility.push(true);\n            }\n            return chart.data.labels.map((label, index) => {\n              const newIndex = index % colorLength;\n              return {\n                text: label,\n                strokeStyle: chart.data.datasets[0].borderColor[newIndex],\n                fillStyle: chart.data.datasets[0].backgroundColor[newIndex],\n                hidden: visibility[index],\n              };\n            });\n          },\n        },\n      };\n    }\n\n    return {\n      type: \"bar\",\n      data: {\n        labels: labels,\n        datasets: [\n          {\n            label: \"\",\n            data: data,\n            backgroundColor: [\n              \"rgba(255, 99, 132, 0.2)\",\n              \"rgba(255, 159, 64, 0.2)\",\n              \"rgba(255, 205, 86, 0.2)\",\n              \"rgba(75, 192, 192, 0.2)\",\n              \"rgba(54, 162, 235, 0.2)\",\n              \"rgba(153, 102, 255, 0.2)\",\n              \"rgba(201, 203, 207, 0.2)\",\n            ],\n            borderColor: [\n              \"rgb(255, 99, 132)\",\n              \"rgb(255, 159, 64)\",\n              \"rgb(255, 205, 86)\",\n              \"rgb(75, 192, 192)\",\n              \"rgb(54, 162, 235)\",\n              \"rgb(153, 102, 255)\",\n              \"rgb(201, 203, 207)\",\n            ],\n            borderWidth: 1,\n          },\n        ],\n      },\n      options: {\n        maintainAspectRatio: false,\n        plugins: {\n          tooltip: {\n            yAlign: \"bottom\",\n            displayColors: false,\n            backgroundColor: (tooltipItem) => {\n              return tooltipItem.tooltip.labelColors[0].borderColor;\n            },\n          },\n          legend,\n        },\n        scales: {\n          y: {\n            beginAtZero: true,\n            ticks: {\n              color: `${\n                displayTheme === \"dark\" ? \"rgb(190,190,190)\" : \"rgb(70,70,70)\"\n              }`,\n            },\n          },\n          x: {\n            ticks: {\n              color: `${\n                displayTheme === \"dark\" ? \"rgb(190,190,190)\" : \"rgb(70,70,70)\"\n              }`,\n            },\n          },\n        },\n      },\n    };\n  } else\n    return {\n      type: \"pie\",\n      data: {\n        labels: labels,\n        datasets: [\n          {\n            label: \"My First Dataset\",\n            data: data,\n            backgroundColor: [\n              \"rgb(255, 99, 132)\",\n              \"rgb(255, 159, 64)\",\n              \"rgb(255, 205, 86)\",\n              \"rgb(75, 192, 192)\",\n              \"rgb(54, 162, 235)\",\n              \"rgb(153, 102, 255)\",\n              \"rgb(201, 203, 207)\",\n            ],\n            hoverOffset: 4,\n          },\n        ],\n      },\n      options: {\n        maintainAspectRatio: false,\n        plugins: {\n          legend: {\n            labels: {\n              font: {\n                size: 14,\n              },\n              color: `${\n                displayTheme === \"dark\" ? \"rgb(190,190,190)\" : \"rgb(70,70,70)\"\n              }`,\n            },\n          },\n        },\n      },\n      plugins: [100],\n    };\n}\n\nexport default createConfigObj;\n\n// function createConfigObj(\n//   mainType,\n//   timeDuration,\n//   startingDate,\n//   endingDate,\n//   expenseData,\n//   mainCategory,\n//   subCategory,\n//   displayTheme,\n//   showLabel = false,\n//   mainCategoryData = [],\n//   subCategoryData = []\n// ) {\n//   const [labels, data] = createFinalDataArr(\n//     mainType,\n//     timeDuration,\n//     startingDate,\n//     endingDate,\n//     expenseData,\n//     mainCategory,\n//     subCategory,\n//     showLabel,\n//     mainCategoryData,\n//     subCategoryData\n//   );\n//   if (mainType === \"account\" || (mainType === \"time\" && mainCategory === \"net\"))\n//     return {\n//       type: \"line\",\n//       data: {\n//         labels: labels,\n//         datasets: [\n//           {\n//             fill: {\n//               target: \"origin\",\n//             },\n//             label: \"\",\n//             data: data,\n//             backgroundColor: [\"rgba(54, 162, 235, 0.2)\"],\n//             borderColor: [\"rgb(54, 162, 235)\"],\n//             borderWidth: 1,\n//             pointBackgroundColor: [\"rgb(54, 162, 235)\"],\n//           },\n//         ],\n//       },\n//       options: {\n//         maintainAspectRatio: false,\n//         elements: {\n//           line: {\n//             tension: 0.5,\n//           },\n//         },\n//         scales: {\n//           y: {\n//             beginAtZero: true,\n//           },\n//         },\n//       },\n//     };\n//   else if (mainType === \"time\") {\n//     let legend = null;\n\n//     /*\n//     Only show chart label above when\n//     1. In the big chart section\n//     2. Chart is one week, six month or twelve month\n//     Too many labels is messy\n//     */\n//     if (\n//       showLabel &&\n//       (timeDuration === \"7\" || timeDuration === \"6\" || timeDuration === \"12\")\n//     ) {\n//       legend = {\n//         onClick: (e, legendItem, legend) => {\n//           const index = legend.chart.data.labels.indexOf(legendItem.text);\n//           legend.chart.toggleDataVisibility(index);\n//           legend.chart.update();\n//         },\n//         labels: {\n//           generateLabels: (chart) => {\n//             const colorLength = chart.data.datasets[0].borderColor.length;\n//             const visibility = [];\n//             for (let i = 0; i < chart.data.labels.length; i++) {\n//               if (chart.getDataVisibility(i)) visibility.push(false);\n//               else visibility.push(true);\n//             }\n//             return chart.data.labels.map((label, index) => {\n//               const newIndex = index % colorLength;\n//               return {\n//                 text: label,\n//                 strokeStyle: chart.data.datasets[0].borderColor[newIndex],\n//                 fillStyle: chart.data.datasets[0].backgroundColor[newIndex],\n//                 hidden: visibility[index],\n//               };\n//             });\n//           },\n//         },\n//       };\n//     }\n\n//     return {\n//       type: \"bar\",\n//       data: {\n//         labels: labels,\n//         datasets: [\n//           {\n//             label: \"\",\n//             data: data,\n//             backgroundColor: [\n//               \"rgba(255, 99, 132, 0.2)\",\n//               \"rgba(255, 159, 64, 0.2)\",\n//               \"rgba(255, 205, 86, 0.2)\",\n//               \"rgba(75, 192, 192, 0.2)\",\n//               \"rgba(54, 162, 235, 0.2)\",\n//               \"rgba(153, 102, 255, 0.2)\",\n//               \"rgba(201, 203, 207, 0.2)\",\n//             ],\n//             borderColor: [\n//               \"rgb(255, 99, 132)\",\n//               \"rgb(255, 159, 64)\",\n//               \"rgb(255, 205, 86)\",\n//               \"rgb(75, 192, 192)\",\n//               \"rgb(54, 162, 235)\",\n//               \"rgb(153, 102, 255)\",\n//               \"rgb(201, 203, 207)\",\n//             ],\n//             borderWidth: 1,\n//           },\n//         ],\n//       },\n//       options: {\n//         maintainAspectRatio: false,\n//         plugins: {\n//           tooltip: {\n//             yAlign: \"bottom\",\n//             displayColors: false,\n//             backgroundColor: (tooltipItem) => {\n//               return tooltipItem.tooltip.labelColors[0].borderColor;\n//             },\n//           },\n//           legend,\n//         },\n//         scales: {\n//           y: {\n//             beginAtZero: true,\n//             ticks: {\n//               color: `${\n//                 displayTheme === \"dark\" ? \"rgb(190,190,190)\" : \"rgb(70,70,70)\"\n//               }`,\n//             },\n//           },\n//           x: {\n//             ticks: {\n//               color: `${\n//                 displayTheme === \"dark\" ? \"rgb(190,190,190)\" : \"rgb(70,70,70)\"\n//               }`,\n//             },\n//           },\n//         },\n//       },\n//     };\n//   } else\n//     return {\n//       type: \"pie\",\n//       data: {\n//         labels: labels,\n//         datasets: [\n//           {\n//             label: \"My First Dataset\",\n//             data: data,\n//             backgroundColor: [\n//               \"rgb(255, 99, 132)\",\n//               \"rgb(255, 159, 64)\",\n//               \"rgb(255, 205, 86)\",\n//               \"rgb(75, 192, 192)\",\n//               \"rgb(54, 162, 235)\",\n//               \"rgb(153, 102, 255)\",\n//               \"rgb(201, 203, 207)\",\n//             ],\n//             hoverOffset: 4,\n//           },\n//         ],\n//       },\n//       options: {\n//         maintainAspectRatio: false,\n//         plugins: {\n//           legend: {\n//             labels: {\n//               font: {\n//                 size: 14,\n//               },\n//               color: `${\n//                 displayTheme === \"dark\" ? \"rgb(190,190,190)\" : \"rgb(70,70,70)\"\n//               }`,\n//             },\n//           },\n//         },\n//       },\n//       plugins: [100],\n//     };\n// }\n"]},"metadata":{},"sourceType":"module"}