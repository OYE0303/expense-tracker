{"ast":null,"code":"import compareTime from \"../compareTime\";\nimport compareTimeWithRange from \"../compareTimeWithRange\";\n/*\nmain logic\n1) loop through each date inside standardLabels\n2) for each loop, use while-loop to keep accumulating the total amount within this date\n3) there are several conditions to make sure catching the correct data\n*/\n\nfunction createDataArr(standardLabels, filteredData, timeDuration, mainCategory, subCategory) {\n  const data = [];\n  const checkboxNoChange = mainCategory === \"expense\" && subCategory.length === 7 || mainCategory === \"income\" && subCategory.length === 3;\n  const type = timeDuration === \"12\" || timeDuration === \"6\" ? \"month\" : \"day\";\n  let indexData = 0;\n  let indexCurrentDate = true;\n  let currentAmount = 0;\n  let currentDate;\n\n  for (let i = 0; i < standardLabels.length; i++) {\n    // if type === \"month\", have final extra element for accumulating month data\n    if (type === \"month\" && i === standardLabels.length - 1) break;\n    currentDate = new Date(standardLabels[i]);\n\n    while (indexCurrentDate) {\n      /*\n      find the date of data is less or eqaul to current date\n      keep doing the same thing until the date of data is greater than current date\n      which means have to go to next date\n       note that have to add ?.\n      because there's edge case\n      for example, the length of filteredData is 5\n      and at the end of loop, the indexData may be 5\n      it's out of the range of filteredData\n      */\n      let timeValidIndex = filteredData[indexData] && compareTime(filteredData[indexData], currentDate);\n\n      if (type === \"month\") {\n        var _filteredData$indexDa, _filteredData$indexDa2, _filteredData$indexDa3;\n\n        timeValidIndex = filteredData[indexData] && compareTimeWithRange(filteredData[indexData], currentDate, new Date(standardLabels[i + 1]));\n        if (((_filteredData$indexDa = filteredData[indexData]) === null || _filteredData$indexDa === void 0 ? void 0 : _filteredData$indexDa.category) === \"expense\") console.log((_filteredData$indexDa2 = filteredData[indexData]) === null || _filteredData$indexDa2 === void 0 ? void 0 : _filteredData$indexDa2.price, (_filteredData$indexDa3 = filteredData[indexData]) === null || _filteredData$indexDa3 === void 0 ? void 0 : _filteredData$indexDa3.time, timeValidIndex);\n      }\n\n      if (timeValidIndex) {\n        if (filteredData[indexData].category === mainCategory) {\n          /*\n          1) if checkbox has no change which means the user want to get all category, so can directly add the price\n          2) otherwise, have to make sure the category is correct\n          */\n          if (checkboxNoChange || subCategory.includes(filteredData[indexData].mainCate)) {\n            currentAmount += Number(filteredData[indexData].price);\n          }\n        } // this is the index for expenseData\n\n\n        indexData++;\n      } // if not, we're done for while-loop which means going to next date (standardLabel)\n      else indexCurrentDate = false;\n    } // add the accumlated data, and empty\n\n\n    data.push(currentAmount);\n    currentAmount = 0;\n    indexCurrentDate = true;\n  }\n\n  return data;\n}\n\nexport default createDataArr;","map":{"version":3,"sources":["/Users/eyo/Desktop/expense-tracker/src/Others/CreateChartData/createDataArr.js"],"names":["compareTime","compareTimeWithRange","createDataArr","standardLabels","filteredData","timeDuration","mainCategory","subCategory","data","checkboxNoChange","length","type","indexData","indexCurrentDate","currentAmount","currentDate","i","Date","timeValidIndex","category","console","log","price","time","includes","mainCate","Number","push"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,gBAAxB;AACA,OAAOC,oBAAP,MAAiC,yBAAjC;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,aAAT,CACEC,cADF,EAEEC,YAFF,EAGEC,YAHF,EAIEC,YAJF,EAKEC,WALF,EAME;AACA,QAAMC,IAAI,GAAG,EAAb;AACA,QAAMC,gBAAgB,GACnBH,YAAY,KAAK,SAAjB,IAA8BC,WAAW,CAACG,MAAZ,KAAuB,CAAtD,IACCJ,YAAY,KAAK,QAAjB,IAA6BC,WAAW,CAACG,MAAZ,KAAuB,CAFvD;AAGA,QAAMC,IAAI,GAAGN,YAAY,KAAK,IAAjB,IAAyBA,YAAY,KAAK,GAA1C,GAAgD,OAAhD,GAA0D,KAAvE;AACA,MAAIO,SAAS,GAAG,CAAhB;AACA,MAAIC,gBAAgB,GAAG,IAAvB;AACA,MAAIC,aAAa,GAAG,CAApB;AACA,MAAIC,WAAJ;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGb,cAAc,CAACO,MAAnC,EAA2CM,CAAC,EAA5C,EAAgD;AAC9C;AACA,QAAIL,IAAI,KAAK,OAAT,IAAoBK,CAAC,KAAKb,cAAc,CAACO,MAAf,GAAwB,CAAtD,EAAyD;AACzDK,IAAAA,WAAW,GAAG,IAAIE,IAAJ,CAASd,cAAc,CAACa,CAAD,CAAvB,CAAd;;AAEA,WAAOH,gBAAP,EAAyB;AACvB;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGM,UAAIK,cAAc,GAChBd,YAAY,CAACQ,SAAD,CAAZ,IACAZ,WAAW,CAACI,YAAY,CAACQ,SAAD,CAAb,EAA0BG,WAA1B,CAFb;;AAIA,UAAIJ,IAAI,KAAK,OAAb,EAAsB;AAAA;;AACpBO,QAAAA,cAAc,GACZd,YAAY,CAACQ,SAAD,CAAZ,IACAX,oBAAoB,CAClBG,YAAY,CAACQ,SAAD,CADM,EAElBG,WAFkB,EAGlB,IAAIE,IAAJ,CAASd,cAAc,CAACa,CAAC,GAAG,CAAL,CAAvB,CAHkB,CAFtB;AAQA,YAAI,0BAAAZ,YAAY,CAACQ,SAAD,CAAZ,gFAAyBO,QAAzB,MAAsC,SAA1C,EACEC,OAAO,CAACC,GAAR,2BACEjB,YAAY,CAACQ,SAAD,CADd,2DACE,uBAAyBU,KAD3B,4BAEElB,YAAY,CAACQ,SAAD,CAFd,2DAEE,uBAAyBW,IAF3B,EAGEL,cAHF;AAKH;;AAED,UAAIA,cAAJ,EAAoB;AAClB,YAAId,YAAY,CAACQ,SAAD,CAAZ,CAAwBO,QAAxB,KAAqCb,YAAzC,EAAuD;AACrD;AACV;AACA;AACA;AACU,cACEG,gBAAgB,IAChBF,WAAW,CAACiB,QAAZ,CAAqBpB,YAAY,CAACQ,SAAD,CAAZ,CAAwBa,QAA7C,CAFF,EAGE;AACAX,YAAAA,aAAa,IAAIY,MAAM,CAACtB,YAAY,CAACQ,SAAD,CAAZ,CAAwBU,KAAzB,CAAvB;AACD;AACF,SAZiB,CAclB;;;AACAV,QAAAA,SAAS;AACV,OAhBD,CAiBA;AAjBA,WAkBKC,gBAAgB,GAAG,KAAnB;AACN,KA1D6C,CA4D9C;;;AACAL,IAAAA,IAAI,CAACmB,IAAL,CAAUb,aAAV;AACAA,IAAAA,aAAa,GAAG,CAAhB;AACAD,IAAAA,gBAAgB,GAAG,IAAnB;AACD;;AAED,SAAOL,IAAP;AACD;;AAED,eAAeN,aAAf","sourcesContent":["import compareTime from \"../compareTime\";\nimport compareTimeWithRange from \"../compareTimeWithRange\";\n\n/*\nmain logic\n1) loop through each date inside standardLabels\n2) for each loop, use while-loop to keep accumulating the total amount within this date\n3) there are several conditions to make sure catching the correct data\n*/\nfunction createDataArr(\n  standardLabels,\n  filteredData,\n  timeDuration,\n  mainCategory,\n  subCategory\n) {\n  const data = [];\n  const checkboxNoChange =\n    (mainCategory === \"expense\" && subCategory.length === 7) ||\n    (mainCategory === \"income\" && subCategory.length === 3);\n  const type = timeDuration === \"12\" || timeDuration === \"6\" ? \"month\" : \"day\";\n  let indexData = 0;\n  let indexCurrentDate = true;\n  let currentAmount = 0;\n  let currentDate;\n\n  for (let i = 0; i < standardLabels.length; i++) {\n    // if type === \"month\", have final extra element for accumulating month data\n    if (type === \"month\" && i === standardLabels.length - 1) break;\n    currentDate = new Date(standardLabels[i]);\n\n    while (indexCurrentDate) {\n      /*\n      find the date of data is less or eqaul to current date\n      keep doing the same thing until the date of data is greater than current date\n      which means have to go to next date\n\n      note that have to add ?.\n      because there's edge case\n      for example, the length of filteredData is 5\n      and at the end of loop, the indexData may be 5\n      it's out of the range of filteredData\n      */\n\n      let timeValidIndex =\n        filteredData[indexData] &&\n        compareTime(filteredData[indexData], currentDate);\n\n      if (type === \"month\") {\n        timeValidIndex =\n          filteredData[indexData] &&\n          compareTimeWithRange(\n            filteredData[indexData],\n            currentDate,\n            new Date(standardLabels[i + 1])\n          );\n\n        if (filteredData[indexData]?.category === \"expense\")\n          console.log(\n            filteredData[indexData]?.price,\n            filteredData[indexData]?.time,\n            timeValidIndex\n          );\n      }\n\n      if (timeValidIndex) {\n        if (filteredData[indexData].category === mainCategory) {\n          /*\n          1) if checkbox has no change which means the user want to get all category, so can directly add the price\n          2) otherwise, have to make sure the category is correct\n          */\n          if (\n            checkboxNoChange ||\n            subCategory.includes(filteredData[indexData].mainCate)\n          ) {\n            currentAmount += Number(filteredData[indexData].price);\n          }\n        }\n\n        // this is the index for expenseData\n        indexData++;\n      }\n      // if not, we're done for while-loop which means going to next date (standardLabel)\n      else indexCurrentDate = false;\n    }\n\n    // add the accumlated data, and empty\n    data.push(currentAmount);\n    currentAmount = 0;\n    indexCurrentDate = true;\n  }\n\n  return data;\n}\n\nexport default createDataArr;\n"]},"metadata":{},"sourceType":"module"}