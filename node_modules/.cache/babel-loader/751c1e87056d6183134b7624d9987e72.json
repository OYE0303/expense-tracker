{"ast":null,"code":"import createDateStringFormat from \"../CreateDateStringFormat/CreateDateStringFormat\";\n/*\nthe main purpose of this function (standard labels)(2021-11-08)\nis for adding(accumulating) the total amount within valid range \n*/\n\nfunction createStandardLabelsArr(duration, startingDate) {\n  // the value will be mutated by helper function\n  const startingDateLocal = new Date(startingDate);\n\n  switch (duration) {\n    case \"7\":\n      return createStandardLabelsArrHelper(7, 1, \"day\", startingDateLocal);\n\n    case \"14\":\n      return createStandardLabelsArrHelper(14, 1, \"day\", startingDateLocal);\n\n    case \"30\":\n      return createStandardLabelsArrHelper(30, 1, \"day\", startingDateLocal);\n\n    case \"90\":\n      return createStandardLabelsArrHelper(30, 3, \"day\", startingDateLocal);\n\n    case \"6\":\n      return createStandardLabelsArrHelper(6, 1, \"month\", startingDateLocal);\n\n    case \"12\":\n      return createStandardLabelsArrHelper(12, 1, \"month\", startingDateLocal);\n\n    default:\n      return;\n  }\n}\n\nexport default createStandardLabelsArr;\n\nfunction createStandardLabelsArrHelper(duration, incrementAmount, dayMonth, today) {\n  const labels = []; // Reference 1\n\n  labels.push(createDateStringFormat(today));\n\n  for (let i = 0; i < duration - 1; i++) {\n    // incremenet by month\n    if (dayMonth === \"month\") today.setMonth(today.getMonth() + incrementAmount); // increment by day\n\n    if (dayMonth === \"day\") {\n      today.setDate(today.getDate() + incrementAmount);\n    }\n\n    labels.push(createDateStringFormat(today));\n  } // Reference 2\n\n\n  if (dayMonth === \"month\") {\n    today.setMonth(today.getMonth() + incrementAmount);\n    labels.push(createDateStringFormat(today));\n  }\n\n  return labels;\n}\n/*\nReference 1\n\nnote that it will immediately increment the number of day\nin the first for-loop\nso have to add the very first day\nfor example, today is 2021-11-21, and time duration is 7\nwhat we want is an array [21, 22, 23, 24, 25, 26, 27]\nwhich means 21 is inclusive\n*/\n\n/*\nReference 2\n\nThis is important\nWhen type is \"day\"\nuse compareTime helper function\nWhen type is \"month\"\nuse compareTimeWithRange helper function\n  \ncompareTimeWithRange needs two arguments (firstDate, endDate)\nwhich means when type is \"month\"\nfor each part of accumulated data, we need two different date\nfor example, when user want to filter 6 months data, and startingDate is \"2022-01-02\"\nstandardLabels =\n[\"2022-01-02\", \"2022-02-02\", \"2022-03-02\", \"2022-04-02\", \"2022-05-02\", \"2022-06-02\", \"2022-07-02\"]\nFinally, we only want 6 length data\nIn order to get that 6 data, we need 7 length standardLabels\n\"2022-01-02\", \"2022-02-02\" -> create first part data\n\"2022-02-02\", \"2022-03-02\" -> create second part data\n\"2022-03-02\", \"2022-04-02\" -> create third part data\n....\n\"2022-06-02\", \"2022-07-02\" -> create final part data\n\nas we could see, that's the reason to have one more data when type is \"month\"\n*/","map":{"version":3,"sources":["/Users/eyo/Desktop/expense-tracker/src/Others/CreateChartData/createStandardLabelsArr.js"],"names":["createDateStringFormat","createStandardLabelsArr","duration","startingDate","startingDateLocal","Date","createStandardLabelsArrHelper","incrementAmount","dayMonth","today","labels","push","i","setMonth","getMonth","setDate","getDate"],"mappings":"AAAA,OAAOA,sBAAP,MAAmC,kDAAnC;AACA;AACA;AACA;AACA;;AACA,SAASC,uBAAT,CAAiCC,QAAjC,EAA2CC,YAA3C,EAAyD;AACvD;AACA,QAAMC,iBAAiB,GAAG,IAAIC,IAAJ,CAASF,YAAT,CAA1B;;AAEA,UAAQD,QAAR;AACE,SAAK,GAAL;AACE,aAAOI,6BAA6B,CAAC,CAAD,EAAI,CAAJ,EAAO,KAAP,EAAcF,iBAAd,CAApC;;AACF,SAAK,IAAL;AACE,aAAOE,6BAA6B,CAAC,EAAD,EAAK,CAAL,EAAQ,KAAR,EAAeF,iBAAf,CAApC;;AACF,SAAK,IAAL;AACE,aAAOE,6BAA6B,CAAC,EAAD,EAAK,CAAL,EAAQ,KAAR,EAAeF,iBAAf,CAApC;;AACF,SAAK,IAAL;AACE,aAAOE,6BAA6B,CAAC,EAAD,EAAK,CAAL,EAAQ,KAAR,EAAeF,iBAAf,CAApC;;AACF,SAAK,GAAL;AACE,aAAOE,6BAA6B,CAAC,CAAD,EAAI,CAAJ,EAAO,OAAP,EAAgBF,iBAAhB,CAApC;;AACF,SAAK,IAAL;AACE,aAAOE,6BAA6B,CAAC,EAAD,EAAK,CAAL,EAAQ,OAAR,EAAiBF,iBAAjB,CAApC;;AACF;AACE;AAdJ;AAgBD;;AAED,eAAeH,uBAAf;;AAEA,SAASK,6BAAT,CACEJ,QADF,EAEEK,eAFF,EAGEC,QAHF,EAIEC,KAJF,EAKE;AACA,QAAMC,MAAM,GAAG,EAAf,CADA,CAGA;;AACAA,EAAAA,MAAM,CAACC,IAAP,CAAYX,sBAAsB,CAACS,KAAD,CAAlC;;AAEA,OAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGV,QAAQ,GAAG,CAA/B,EAAkCU,CAAC,EAAnC,EAAuC;AACrC;AACA,QAAIJ,QAAQ,KAAK,OAAjB,EACEC,KAAK,CAACI,QAAN,CAAeJ,KAAK,CAACK,QAAN,KAAmBP,eAAlC,EAHmC,CAKrC;;AACA,QAAIC,QAAQ,KAAK,KAAjB,EAAwB;AACtBC,MAAAA,KAAK,CAACM,OAAN,CAAcN,KAAK,CAACO,OAAN,KAAkBT,eAAhC;AACD;;AAEDG,IAAAA,MAAM,CAACC,IAAP,CAAYX,sBAAsB,CAACS,KAAD,CAAlC;AACD,GAjBD,CAmBA;;;AACA,MAAID,QAAQ,KAAK,OAAjB,EAA0B;AACxBC,IAAAA,KAAK,CAACI,QAAN,CAAeJ,KAAK,CAACK,QAAN,KAAmBP,eAAlC;AACAG,IAAAA,MAAM,CAACC,IAAP,CAAYX,sBAAsB,CAACS,KAAD,CAAlC;AACD;;AAED,SAAOC,MAAP;AACD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import createDateStringFormat from \"../CreateDateStringFormat/CreateDateStringFormat\";\n/*\nthe main purpose of this function (standard labels)(2021-11-08)\nis for adding(accumulating) the total amount within valid range \n*/\nfunction createStandardLabelsArr(duration, startingDate) {\n  // the value will be mutated by helper function\n  const startingDateLocal = new Date(startingDate);\n\n  switch (duration) {\n    case \"7\":\n      return createStandardLabelsArrHelper(7, 1, \"day\", startingDateLocal);\n    case \"14\":\n      return createStandardLabelsArrHelper(14, 1, \"day\", startingDateLocal);\n    case \"30\":\n      return createStandardLabelsArrHelper(30, 1, \"day\", startingDateLocal);\n    case \"90\":\n      return createStandardLabelsArrHelper(30, 3, \"day\", startingDateLocal);\n    case \"6\":\n      return createStandardLabelsArrHelper(6, 1, \"month\", startingDateLocal);\n    case \"12\":\n      return createStandardLabelsArrHelper(12, 1, \"month\", startingDateLocal);\n    default:\n      return;\n  }\n}\n\nexport default createStandardLabelsArr;\n\nfunction createStandardLabelsArrHelper(\n  duration,\n  incrementAmount,\n  dayMonth,\n  today\n) {\n  const labels = [];\n\n  // Reference 1\n  labels.push(createDateStringFormat(today));\n\n  for (let i = 0; i < duration - 1; i++) {\n    // incremenet by month\n    if (dayMonth === \"month\")\n      today.setMonth(today.getMonth() + incrementAmount);\n\n    // increment by day\n    if (dayMonth === \"day\") {\n      today.setDate(today.getDate() + incrementAmount);\n    }\n\n    labels.push(createDateStringFormat(today));\n  }\n\n  // Reference 2\n  if (dayMonth === \"month\") {\n    today.setMonth(today.getMonth() + incrementAmount);\n    labels.push(createDateStringFormat(today));\n  }\n\n  return labels;\n}\n/*\nReference 1\n\nnote that it will immediately increment the number of day\nin the first for-loop\nso have to add the very first day\nfor example, today is 2021-11-21, and time duration is 7\nwhat we want is an array [21, 22, 23, 24, 25, 26, 27]\nwhich means 21 is inclusive\n*/\n\n/*\nReference 2\n\nThis is important\nWhen type is \"day\"\nuse compareTime helper function\nWhen type is \"month\"\nuse compareTimeWithRange helper function\n  \ncompareTimeWithRange needs two arguments (firstDate, endDate)\nwhich means when type is \"month\"\nfor each part of accumulated data, we need two different date\nfor example, when user want to filter 6 months data, and startingDate is \"2022-01-02\"\nstandardLabels =\n[\"2022-01-02\", \"2022-02-02\", \"2022-03-02\", \"2022-04-02\", \"2022-05-02\", \"2022-06-02\", \"2022-07-02\"]\nFinally, we only want 6 length data\nIn order to get that 6 data, we need 7 length standardLabels\n\"2022-01-02\", \"2022-02-02\" -> create first part data\n\"2022-02-02\", \"2022-03-02\" -> create second part data\n\"2022-03-02\", \"2022-04-02\" -> create third part data\n....\n\"2022-06-02\", \"2022-07-02\" -> create final part data\n\nas we could see, that's the reason to have one more data when type is \"month\"\n*/\n"]},"metadata":{},"sourceType":"module"}