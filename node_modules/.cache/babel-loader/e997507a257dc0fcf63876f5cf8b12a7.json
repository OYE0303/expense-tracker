{"ast":null,"code":"var _jsxFileName = \"/Users/eyo/Desktop/expense-tracker/src/components/UI/AddDataForm/FormMainCategory.js\",\n    _s = $RefreshSig$();\n\nimport { useContext } from \"react\";\nimport FormContainer from \"./FormContainer\";\nimport Select from \"../Select/Select\";\nimport createNewSelectArr from \"../../../Others/CreateNewSelectArr/createNewSelectArr\";\nimport CategoryContext from \"../../../store/category/category--context\";\nimport style from \"./AddDataForm.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction FormMainCategory(props) {\n  _s();\n\n  const {\n    iconObj\n  } = useContext(CategoryContext); // Reference 2\n\n  let newSelectArr = props.mainCategoryArr;\n  if (props.edit) newSelectArr = createNewSelectArr(props.mainCategoryArr, props.mainCategory);\n  return /*#__PURE__*/_jsxDEV(FormContainer, {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"mainCategory\",\n      className: `${style.label} capitalize`,\n      children: [\"main category\", /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `center--flex ${style.icon}`,\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          alt: props.mainCategory,\n          className: `icon`,\n          src: iconObj[props.mainCategory]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Select, {\n      id: \"mainCategory\",\n      name: \"mainCategory\",\n      className: style.input,\n      onChange: props.mainCategoryChangeHandler,\n      children: newSelectArr.map(element =>\n      /*#__PURE__*/\n      // Reference 1\n      _jsxDEV(\"option\", {\n        value: element,\n        children: element\n      }, `${element}-${props.type}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 5\n  }, this);\n}\n\n_s(FormMainCategory, \"hm7CNIfOLYvjEPKyUleFy1TLPKM=\");\n\n_c = FormMainCategory;\nexport default FormMainCategory;\n/*\nReference 1\nAlthough it seems each type of main category array won't have duplicate name\nbecause we stop user to add duplicate name in addMainCategoryModal\nBUT\nwe do allow user to have same category name in differtn type\nFor example, in both expense and income\nwe allow user to have same \"others\" main category\nBut if we use each name of element as \"key\" in <option></option>\nit will cause unexpected behavoir\nwhen user change the type, main category array in <option></option> always first show that duplicate name\ni guess it's react for the performance issue\nso we use uuidv4() to make sure every single main category name in both expense and income can have unique key\n\nUpdate at 02/09\nIt turns out we can't use uuidv4() either\nIf we use uuidv4() here, a weird behavior will show up\nTry to use uuidv4() to see the weird behavior\nSo i change to use ${element}-${props.type}\nI guess there are two good reason to do this\n1. Seperate same names in different type\nFor example, both expense and income may have \"others\" in the same time\nbut if we use this as key, now the two keys are different\none is \"others-expense\", the other one is \"others-income\"\nBy doing so, we can avoid weird behavior when user change the type\n2. Each element of select will always have same key\nIf we use uuidv4(), each element of select will have differnt key,\nI guess this is the reason for the weird behavior\nBy doing so, each key of element is unique, and each key of element is always keeping same\n*/\n\n/*\nReference 2\nWhy we need newSelectArr?\nBecause when user click edit button to show the addDataForm\nUser wanna see that selet of mainCategory is showing the main category of edited\nFor example, in the normal case of showing the addDataForm by clickin the home main button\nIt's okay to always show \"Food\" as main category and \"breakfast\" as sub category, so called default category\nBut if user click edit button on one data to show the addDataForm\nIt's not okay still show the default category\nwhat we wanna show is the main and sub caregory of the edited data\n\nHow are we gonna do this?\nWe have to make sure the category of the edited data is at the very first element of category array\n\nthat's why we need createNewSelectArr helper function\n\nSame logic for sub category\n\nGo to see the detail code implement of createNewSelectArr helper function\n\nNote that we only invoke the helper function if props.edit is true\nin other words, user wanna edit the data\n*/\n\nvar _c;\n\n$RefreshReg$(_c, \"FormMainCategory\");","map":{"version":3,"sources":["/Users/eyo/Desktop/expense-tracker/src/components/UI/AddDataForm/FormMainCategory.js"],"names":["useContext","FormContainer","Select","createNewSelectArr","CategoryContext","style","FormMainCategory","props","iconObj","newSelectArr","mainCategoryArr","edit","mainCategory","label","icon","input","mainCategoryChangeHandler","map","element","type"],"mappings":";;;AAAA,SAASA,UAAT,QAA2B,OAA3B;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,MAAP,MAAmB,kBAAnB;AACA,OAAOC,kBAAP,MAA+B,uDAA/B;AACA,OAAOC,eAAP,MAA4B,2CAA5B;AACA,OAAOC,KAAP,MAAkB,0BAAlB;;;AAEA,SAASC,gBAAT,CAA0BC,KAA1B,EAAiC;AAAA;;AAC/B,QAAM;AAAEC,IAAAA;AAAF,MAAcR,UAAU,CAACI,eAAD,CAA9B,CAD+B,CAE/B;;AACA,MAAIK,YAAY,GAAGF,KAAK,CAACG,eAAzB;AACA,MAAIH,KAAK,CAACI,IAAV,EACEF,YAAY,GAAGN,kBAAkB,CAC/BI,KAAK,CAACG,eADyB,EAE/BH,KAAK,CAACK,YAFyB,CAAjC;AAKF,sBACE,QAAC,aAAD;AAAA,4BACE;AAAO,MAAA,OAAO,EAAC,cAAf;AAA8B,MAAA,SAAS,EAAG,GAAEP,KAAK,CAACQ,KAAM,aAAxD;AAAA,+CAEE;AAAK,QAAA,SAAS,EAAG,gBAAeR,KAAK,CAACS,IAAK,EAA3C;AAAA,+BACE;AACE,UAAA,GAAG,EAAEP,KAAK,CAACK,YADb;AAEE,UAAA,SAAS,EAAG,MAFd;AAGE,UAAA,GAAG,EAAEJ,OAAO,CAACD,KAAK,CAACK,YAAP;AAHd;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAWE,QAAC,MAAD;AACE,MAAA,EAAE,EAAC,cADL;AAEE,MAAA,IAAI,EAAC,cAFP;AAGE,MAAA,SAAS,EAAEP,KAAK,CAACU,KAHnB;AAIE,MAAA,QAAQ,EAAER,KAAK,CAACS,yBAJlB;AAAA,gBAMGP,YAAY,CAACQ,GAAb,CAAkBC,OAAD;AAAA;AAChB;AACA;AAAQ,QAAA,KAAK,EAAEA,OAAf;AAAA,kBACGA;AADH,SAA8B,GAAEA,OAAQ,IAAGX,KAAK,CAACY,IAAK,EAAtD;AAAA;AAAA;AAAA;AAAA,cAFD;AANH;AAAA;AAAA;AAAA;AAAA,YAXF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA2BD;;GArCQb,gB;;KAAAA,gB;AAuCT,eAAeA,gBAAf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { useContext } from \"react\";\nimport FormContainer from \"./FormContainer\";\nimport Select from \"../Select/Select\";\nimport createNewSelectArr from \"../../../Others/CreateNewSelectArr/createNewSelectArr\";\nimport CategoryContext from \"../../../store/category/category--context\";\nimport style from \"./AddDataForm.module.css\";\n\nfunction FormMainCategory(props) {\n  const { iconObj } = useContext(CategoryContext);\n  // Reference 2\n  let newSelectArr = props.mainCategoryArr;\n  if (props.edit)\n    newSelectArr = createNewSelectArr(\n      props.mainCategoryArr,\n      props.mainCategory\n    );\n\n  return (\n    <FormContainer>\n      <label htmlFor=\"mainCategory\" className={`${style.label} capitalize`}>\n        main category\n        <div className={`center--flex ${style.icon}`}>\n          <img\n            alt={props.mainCategory}\n            className={`icon`}\n            src={iconObj[props.mainCategory]}\n          />\n        </div>\n      </label>\n      <Select\n        id=\"mainCategory\"\n        name=\"mainCategory\"\n        className={style.input}\n        onChange={props.mainCategoryChangeHandler}\n      >\n        {newSelectArr.map((element) => (\n          // Reference 1\n          <option value={element} key={`${element}-${props.type}`}>\n            {element}\n          </option>\n        ))}\n      </Select>\n    </FormContainer>\n  );\n}\n\nexport default FormMainCategory;\n/*\nReference 1\nAlthough it seems each type of main category array won't have duplicate name\nbecause we stop user to add duplicate name in addMainCategoryModal\nBUT\nwe do allow user to have same category name in differtn type\nFor example, in both expense and income\nwe allow user to have same \"others\" main category\nBut if we use each name of element as \"key\" in <option></option>\nit will cause unexpected behavoir\nwhen user change the type, main category array in <option></option> always first show that duplicate name\ni guess it's react for the performance issue\nso we use uuidv4() to make sure every single main category name in both expense and income can have unique key\n\nUpdate at 02/09\nIt turns out we can't use uuidv4() either\nIf we use uuidv4() here, a weird behavior will show up\nTry to use uuidv4() to see the weird behavior\nSo i change to use ${element}-${props.type}\nI guess there are two good reason to do this\n1. Seperate same names in different type\nFor example, both expense and income may have \"others\" in the same time\nbut if we use this as key, now the two keys are different\none is \"others-expense\", the other one is \"others-income\"\nBy doing so, we can avoid weird behavior when user change the type\n2. Each element of select will always have same key\nIf we use uuidv4(), each element of select will have differnt key,\nI guess this is the reason for the weird behavior\nBy doing so, each key of element is unique, and each key of element is always keeping same\n*/\n\n/*\nReference 2\nWhy we need newSelectArr?\nBecause when user click edit button to show the addDataForm\nUser wanna see that selet of mainCategory is showing the main category of edited\nFor example, in the normal case of showing the addDataForm by clickin the home main button\nIt's okay to always show \"Food\" as main category and \"breakfast\" as sub category, so called default category\nBut if user click edit button on one data to show the addDataForm\nIt's not okay still show the default category\nwhat we wanna show is the main and sub caregory of the edited data\n\nHow are we gonna do this?\nWe have to make sure the category of the edited data is at the very first element of category array\n\nthat's why we need createNewSelectArr helper function\n\nSame logic for sub category\n\nGo to see the detail code implement of createNewSelectArr helper function\n\nNote that we only invoke the helper function if props.edit is true\nin other words, user wanna edit the data\n*/\n"]},"metadata":{},"sourceType":"module"}