{"ast":null,"code":"import createStandardLabelsArr from \"./createStandardLabelsArr\";\nimport createLineLabels from \"./createLineLabels\";\nimport createLabelsArr from \"./createLabelsArr\";\nimport createBarDataArr from \"./createBarDataArr\";\nimport createPieDataArr from \"./createPieDataArr\";\nimport createLineDataArr from \"./createLineDataArr\";\nimport createFilteredData from \"./createFilteredData\"; // Reference 1\n\nfunction createChartDataArr(mainType, timeDuration, startingDate, endingDate, expenseData, mainCategory, subCategory, showLabel = false, mainCategoryData = [], subCategoryData = [], displayTheme) {\n  let labels, data;\n\n  if (mainType === \"time\" && mainCategory === \"net\") {} else if (mainType === \"time\") {} else {}\n\n  if (mainType === \"time\") {\n    const standardLabels = createStandardLabelsArr(timeDuration, startingDate);\n    labels = createLabelsArr(standardLabels, timeDuration);\n\n    if (mainCategory === \"net\") {\n      labels = createLineLabels(new Date(standardLabels[0]), new Date(standardLabels[standardLabels.length - 1]));\n      data = createLineDataArr(labels, createFilteredData(standardLabels, expenseData));\n    } else {\n      data = createBarDataArr(standardLabels, createFilteredData(standardLabels, expenseData), timeDuration, mainCategory, subCategory, showLabel, mainCategoryData, subCategoryData);\n    }\n  } else {\n    [labels, data] = createPieDataArr(startingDate, endingDate, expenseData, mainCategory);\n  }\n\n  return [labels, data, displayTheme, mainType, mainCategory, timeDuration, showLabel];\n}\n\nexport default createChartDataArr;\n/*\nReferecne 1\nthe main purpose of this function is to create \ndifferent type of date based on different type of chart\nFor example,\n\n*/","map":{"version":3,"sources":["/Users/eyo/Desktop/expense-tracker/src/Others/CreateChartData/createChartDataArr.js"],"names":["createStandardLabelsArr","createLineLabels","createLabelsArr","createBarDataArr","createPieDataArr","createLineDataArr","createFilteredData","createChartDataArr","mainType","timeDuration","startingDate","endingDate","expenseData","mainCategory","subCategory","showLabel","mainCategoryData","subCategoryData","displayTheme","labels","data","standardLabels","Date","length"],"mappings":"AAAA,OAAOA,uBAAP,MAAoC,2BAApC;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AACA,OAAOC,iBAAP,MAA8B,qBAA9B;AACA,OAAOC,kBAAP,MAA+B,sBAA/B,C,CAEA;;AACA,SAASC,kBAAT,CACEC,QADF,EAEEC,YAFF,EAGEC,YAHF,EAIEC,UAJF,EAKEC,WALF,EAMEC,YANF,EAOEC,WAPF,EAQEC,SAAS,GAAG,KARd,EASEC,gBAAgB,GAAG,EATrB,EAUEC,eAAe,GAAG,EAVpB,EAWEC,YAXF,EAYE;AACA,MAAIC,MAAJ,EAAYC,IAAZ;;AAEA,MAAIZ,QAAQ,KAAK,MAAb,IAAuBK,YAAY,KAAK,KAA5C,EAAmD,CAClD,CADD,MACO,IAAIL,QAAQ,KAAK,MAAjB,EAAyB,CAC/B,CADM,MACA,CACN;;AAED,MAAIA,QAAQ,KAAK,MAAjB,EAAyB;AACvB,UAAMa,cAAc,GAAGrB,uBAAuB,CAACS,YAAD,EAAeC,YAAf,CAA9C;AACAS,IAAAA,MAAM,GAAGjB,eAAe,CAACmB,cAAD,EAAiBZ,YAAjB,CAAxB;;AAEA,QAAII,YAAY,KAAK,KAArB,EAA4B;AAC1BM,MAAAA,MAAM,GAAGlB,gBAAgB,CACvB,IAAIqB,IAAJ,CAASD,cAAc,CAAC,CAAD,CAAvB,CADuB,EAEvB,IAAIC,IAAJ,CAASD,cAAc,CAACA,cAAc,CAACE,MAAf,GAAwB,CAAzB,CAAvB,CAFuB,CAAzB;AAKAH,MAAAA,IAAI,GAAGf,iBAAiB,CACtBc,MADsB,EAEtBb,kBAAkB,CAACe,cAAD,EAAiBT,WAAjB,CAFI,CAAxB;AAID,KAVD,MAUO;AACLQ,MAAAA,IAAI,GAAGjB,gBAAgB,CACrBkB,cADqB,EAErBf,kBAAkB,CAACe,cAAD,EAAiBT,WAAjB,CAFG,EAGrBH,YAHqB,EAIrBI,YAJqB,EAKrBC,WALqB,EAMrBC,SANqB,EAOrBC,gBAPqB,EAQrBC,eARqB,CAAvB;AAUD;AACF,GA1BD,MA0BO;AACL,KAACE,MAAD,EAASC,IAAT,IAAiBhB,gBAAgB,CAC/BM,YAD+B,EAE/BC,UAF+B,EAG/BC,WAH+B,EAI/BC,YAJ+B,CAAjC;AAMD;;AAED,SAAO,CACLM,MADK,EAELC,IAFK,EAGLF,YAHK,EAILV,QAJK,EAKLK,YALK,EAMLJ,YANK,EAOLM,SAPK,CAAP;AASD;;AAED,eAAeR,kBAAf;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import createStandardLabelsArr from \"./createStandardLabelsArr\";\nimport createLineLabels from \"./createLineLabels\";\nimport createLabelsArr from \"./createLabelsArr\";\nimport createBarDataArr from \"./createBarDataArr\";\nimport createPieDataArr from \"./createPieDataArr\";\nimport createLineDataArr from \"./createLineDataArr\";\nimport createFilteredData from \"./createFilteredData\";\n\n// Reference 1\nfunction createChartDataArr(\n  mainType,\n  timeDuration,\n  startingDate,\n  endingDate,\n  expenseData,\n  mainCategory,\n  subCategory,\n  showLabel = false,\n  mainCategoryData = [],\n  subCategoryData = [],\n  displayTheme\n) {\n  let labels, data;\n\n  if (mainType === \"time\" && mainCategory === \"net\") {\n  } else if (mainType === \"time\") {\n  } else {\n  }\n\n  if (mainType === \"time\") {\n    const standardLabels = createStandardLabelsArr(timeDuration, startingDate);\n    labels = createLabelsArr(standardLabels, timeDuration);\n\n    if (mainCategory === \"net\") {\n      labels = createLineLabels(\n        new Date(standardLabels[0]),\n        new Date(standardLabels[standardLabels.length - 1])\n      );\n\n      data = createLineDataArr(\n        labels,\n        createFilteredData(standardLabels, expenseData)\n      );\n    } else {\n      data = createBarDataArr(\n        standardLabels,\n        createFilteredData(standardLabels, expenseData),\n        timeDuration,\n        mainCategory,\n        subCategory,\n        showLabel,\n        mainCategoryData,\n        subCategoryData\n      );\n    }\n  } else {\n    [labels, data] = createPieDataArr(\n      startingDate,\n      endingDate,\n      expenseData,\n      mainCategory\n    );\n  }\n\n  return [\n    labels,\n    data,\n    displayTheme,\n    mainType,\n    mainCategory,\n    timeDuration,\n    showLabel,\n  ];\n}\n\nexport default createChartDataArr;\n/*\nReferecne 1\nthe main purpose of this function is to create \ndifferent type of date based on different type of chart\nFor example,\n\n*/\n"]},"metadata":{},"sourceType":"module"}