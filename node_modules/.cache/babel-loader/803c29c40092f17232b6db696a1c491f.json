{"ast":null,"code":"import createStandardLabelsArr from \"./createStandardLabelsArr\";\nimport createLabelsArr from \"./createLabelsArr\";\nimport createDataArr from \"./createDataArr\";\nimport createFilteredData from \"./createFilteredData\";\n\nfunction createConfigObj(mainType, timeDuration, startingDate, endingDate, expenseData, mainCategory, subCategory, theme) {\n  if (mainType === \"time\") {\n    const standardLabels = createStandardLabelsArr(timeDuration, startingDate);\n    const labels = createLabelsArr(standardLabels, timeDuration);\n    const data = createDataArr(standardLabels, createFilteredData(standardLabels, expenseData), timeDuration, mainCategory, subCategory);\n    return {\n      type: \"bar\",\n      data: {\n        labels: labels,\n        datasets: [{\n          label: \"\",\n          data: data,\n          backgroundColor: [\"rgba(255, 99, 132, 0.2)\", \"rgba(255, 159, 64, 0.2)\", \"rgba(255, 205, 86, 0.2)\", \"rgba(75, 192, 192, 0.2)\", \"rgba(54, 162, 235, 0.2)\", \"rgba(153, 102, 255, 0.2)\", \"rgba(201, 203, 207, 0.2)\"],\n          borderColor: [\"rgb(255, 99, 132)\", \"rgb(255, 159, 64)\", \"rgb(255, 205, 86)\", \"rgb(75, 192, 192)\", \"rgb(54, 162, 235)\", \"rgb(153, 102, 255)\", \"rgb(201, 203, 207)\"],\n          borderWidth: 1\n        }]\n      },\n      options: {\n        plugins: {\n          title: {\n            display: true,\n            text: \"Custom Chart Title\"\n          },\n          tooltip: {\n            yAlign: \"bottom\",\n            displayColors: false,\n            backgroundColor: tooltipItem => {\n              return tooltipItem.tooltip.labelColors[0].borderColor;\n            }\n          },\n          legend: {\n            onClick: (e, legendItem, legend) => {\n              const index = legend.chart.data.labels.indexOf(legendItem.text);\n              legend.chart.toggleDataVisibility(index);\n              legend.chart.update();\n            },\n            labels: {\n              generateLabels: chart => {\n                const colorLength = chart.data.datasets[0].borderColor.length;\n                const visibility = [];\n\n                for (let i = 0; i < chart.data.labels.length; i++) {\n                  if (chart.getDataVisibility(i)) visibility.push(false);else visibility.push(true);\n                }\n\n                return chart.data.labels.map((label, index) => {\n                  const newIndex = index % colorLength;\n                  return {\n                    text: label,\n                    strokeStyle: chart.data.datasets[0].borderColor[newIndex],\n                    fillStyle: chart.data.datasets[0].backgroundColor[newIndex],\n                    hidden: visibility[index]\n                  };\n                });\n              }\n            }\n          }\n        },\n        scales: {\n          y: {\n            // title: {\n            //   display: true,\n            //   text: \"Money\",\n            //   color: \"white\",\n            //   padding: { top: 0, left: 0, right: 0, bottom: 20 },\n            // },\n            beginAtZero: true,\n            ticks: {\n              color: `${theme === \"dark\" ? \"rgb(190,190,190)\" : \"rgb(70,70,70)\"}`\n            }\n          },\n          x: {\n            // title: {\n            //   display: true,\n            //   text: \"Time\",\n            //   color: \"white\",\n            //   padding: { top: 20, left: 0, right: 0, bottom: 0 },\n            // },\n            ticks: {\n              color: `${theme === \"dark\" ? \"rgb(190,190,190)\" : \"rgb(70,70,70)\"}`\n            }\n          }\n        }\n      }\n    };\n  } else {\n    const filteredData = expenseData.filter(element => Number(new Date(element.time)) >= Number(new Date(startingDate)) && Number(new Date(element.time)) <= Number(new Date(endingDate)) && element.category === mainCategory); // const labels = subCategory;\n\n    let labels = [];\n    filteredData.forEach(element => {\n      if (!labels.includes(element.mainCate)) labels.push(element.mainCate);\n    });\n    let newFilteredData = [];\n    labels.forEach(label => {\n      newFilteredData.push(filteredData.filter(data => data.mainCate === label));\n    }); // const totalAmount = newFilteredData\n    //   .flat()\n    //   .reduce((acc, cur) => (acc += Number(cur.price)), 0);\n\n    const dataArr = [];\n    newFilteredData.forEach(data => {\n      let dataTmp;\n\n      if (data.length > 0) {\n        dataTmp = data.reduce((acc, cur) => acc += Number(cur.price), 0);\n      } else dataTmp = 0;\n\n      dataArr.push(dataTmp);\n    });\n    return {\n      type: \"pie\",\n      data: {\n        labels: labels,\n        datasets: [{\n          label: \"My First Dataset\",\n          data: dataArr,\n          backgroundColor: [\"rgb(255, 99, 132)\", \"rgb(255, 159, 64)\", \"rgb(255, 205, 86)\", \"rgb(75, 192, 192)\", \"rgb(54, 162, 235)\", \"rgb(153, 102, 255)\", \"rgb(201, 203, 207)\"],\n          hoverOffset: 4\n        }]\n      },\n      options: {\n        plugins: {\n          labels: {\n            render: context => {\n              console.log(context.percentages);\n              return context.percentages;\n            }\n          },\n          // labels: {\n          //   render: \"value\",\n          //   fontColor: [\"green\", \"white\", \"red\"],\n          //   precision: 2,\n          // },\n          legend: {\n            labels: {\n              // This is more specific font property overrides the global property\n              font: {\n                size: 14\n              },\n              color: `${theme === \"dark\" ? \"rgb(190,190,190)\" : \"rgb(70,70,70)\"}`\n            }\n          }\n        }\n      }\n    };\n  }\n}\n\nexport default createConfigObj;","map":{"version":3,"sources":["/Users/eyo/Desktop/expense-tracker/src/Others/CreateChartData/createConfigObj.js"],"names":["createStandardLabelsArr","createLabelsArr","createDataArr","createFilteredData","createConfigObj","mainType","timeDuration","startingDate","endingDate","expenseData","mainCategory","subCategory","theme","standardLabels","labels","data","type","datasets","label","backgroundColor","borderColor","borderWidth","options","plugins","title","display","text","tooltip","yAlign","displayColors","tooltipItem","labelColors","legend","onClick","e","legendItem","index","chart","indexOf","toggleDataVisibility","update","generateLabels","colorLength","length","visibility","i","getDataVisibility","push","map","newIndex","strokeStyle","fillStyle","hidden","scales","y","beginAtZero","ticks","color","x","filteredData","filter","element","Number","Date","time","category","forEach","includes","mainCate","newFilteredData","dataArr","dataTmp","reduce","acc","cur","price","hoverOffset","render","context","console","log","percentages","font","size"],"mappings":"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","sourcesContent":["import createStandardLabelsArr from \"./createStandardLabelsArr\";\nimport createLabelsArr from \"./createLabelsArr\";\nimport createDataArr from \"./createDataArr\";\nimport createFilteredData from \"./createFilteredData\";\n\nfunction createConfigObj(\n  mainType,\n  timeDuration,\n  startingDate,\n  endingDate,\n  expenseData,\n  mainCategory,\n  subCategory,\n  theme\n) {\n  if (mainType === \"time\") {\n    const standardLabels = createStandardLabelsArr(timeDuration, startingDate);\n    const labels = createLabelsArr(standardLabels, timeDuration);\n    const data = createDataArr(\n      standardLabels,\n      createFilteredData(standardLabels, expenseData),\n      timeDuration,\n      mainCategory,\n      subCategory\n    );\n\n    return {\n      type: \"bar\",\n      data: {\n        labels: labels,\n        datasets: [\n          {\n            label: \"\",\n            data: data,\n            backgroundColor: [\n              \"rgba(255, 99, 132, 0.2)\",\n              \"rgba(255, 159, 64, 0.2)\",\n              \"rgba(255, 205, 86, 0.2)\",\n              \"rgba(75, 192, 192, 0.2)\",\n              \"rgba(54, 162, 235, 0.2)\",\n              \"rgba(153, 102, 255, 0.2)\",\n              \"rgba(201, 203, 207, 0.2)\",\n            ],\n            borderColor: [\n              \"rgb(255, 99, 132)\",\n              \"rgb(255, 159, 64)\",\n              \"rgb(255, 205, 86)\",\n              \"rgb(75, 192, 192)\",\n              \"rgb(54, 162, 235)\",\n              \"rgb(153, 102, 255)\",\n              \"rgb(201, 203, 207)\",\n            ],\n            borderWidth: 1,\n          },\n        ],\n      },\n      options: {\n        plugins: {\n          title: {\n            display: true,\n            text: \"Custom Chart Title\",\n          },\n          tooltip: {\n            yAlign: \"bottom\",\n            displayColors: false,\n            backgroundColor: (tooltipItem) => {\n              return tooltipItem.tooltip.labelColors[0].borderColor;\n            },\n          },\n          legend: {\n            onClick: (e, legendItem, legend) => {\n              const index = legend.chart.data.labels.indexOf(legendItem.text);\n\n              legend.chart.toggleDataVisibility(index);\n              legend.chart.update();\n            },\n            labels: {\n              generateLabels: (chart) => {\n                const colorLength = chart.data.datasets[0].borderColor.length;\n                const visibility = [];\n\n                for (let i = 0; i < chart.data.labels.length; i++) {\n                  if (chart.getDataVisibility(i)) visibility.push(false);\n                  else visibility.push(true);\n                }\n\n                return chart.data.labels.map((label, index) => {\n                  const newIndex = index % colorLength;\n\n                  return {\n                    text: label,\n                    strokeStyle: chart.data.datasets[0].borderColor[newIndex],\n                    fillStyle: chart.data.datasets[0].backgroundColor[newIndex],\n                    hidden: visibility[index],\n                  };\n                });\n              },\n            },\n          },\n        },\n        scales: {\n          y: {\n            // title: {\n            //   display: true,\n            //   text: \"Money\",\n            //   color: \"white\",\n            //   padding: { top: 0, left: 0, right: 0, bottom: 20 },\n            // },\n            beginAtZero: true,\n            ticks: {\n              color: `${\n                theme === \"dark\" ? \"rgb(190,190,190)\" : \"rgb(70,70,70)\"\n              }`,\n            },\n          },\n          x: {\n            // title: {\n            //   display: true,\n            //   text: \"Time\",\n            //   color: \"white\",\n            //   padding: { top: 20, left: 0, right: 0, bottom: 0 },\n            // },\n            ticks: {\n              color: `${\n                theme === \"dark\" ? \"rgb(190,190,190)\" : \"rgb(70,70,70)\"\n              }`,\n            },\n          },\n        },\n      },\n    };\n  } else {\n    const filteredData = expenseData.filter(\n      (element) =>\n        Number(new Date(element.time)) >= Number(new Date(startingDate)) &&\n        Number(new Date(element.time)) <= Number(new Date(endingDate)) &&\n        element.category === mainCategory\n    );\n\n    // const labels = subCategory;\n    let labels = [];\n    filteredData.forEach((element) => {\n      if (!labels.includes(element.mainCate)) labels.push(element.mainCate);\n    });\n\n    let newFilteredData = [];\n    labels.forEach((label) => {\n      newFilteredData.push(\n        filteredData.filter((data) => data.mainCate === label)\n      );\n    });\n\n    // const totalAmount = newFilteredData\n    //   .flat()\n    //   .reduce((acc, cur) => (acc += Number(cur.price)), 0);\n\n    const dataArr = [];\n\n    newFilteredData.forEach((data) => {\n      let dataTmp;\n\n      if (data.length > 0) {\n        dataTmp = data.reduce((acc, cur) => (acc += Number(cur.price)), 0);\n      } else dataTmp = 0;\n\n      dataArr.push(dataTmp);\n    });\n\n    return {\n      type: \"pie\",\n      data: {\n        labels: labels,\n        datasets: [\n          {\n            label: \"My First Dataset\",\n            data: dataArr,\n            backgroundColor: [\n              \"rgb(255, 99, 132)\",\n              \"rgb(255, 159, 64)\",\n              \"rgb(255, 205, 86)\",\n              \"rgb(75, 192, 192)\",\n              \"rgb(54, 162, 235)\",\n              \"rgb(153, 102, 255)\",\n              \"rgb(201, 203, 207)\",\n            ],\n            hoverOffset: 4,\n          },\n        ],\n      },\n      options: {\n        plugins: {\n          labels: {\n            render: (context) => {\n              console.log(context.percentages);\n              return context.percentages;\n            },\n          },\n          // labels: {\n          //   render: \"value\",\n          //   fontColor: [\"green\", \"white\", \"red\"],\n          //   precision: 2,\n          // },\n          legend: {\n            labels: {\n              // This is more specific font property overrides the global property\n              font: {\n                size: 14,\n              },\n              color: `${\n                theme === \"dark\" ? \"rgb(190,190,190)\" : \"rgb(70,70,70)\"\n              }`,\n            },\n          },\n        },\n      },\n    };\n  }\n}\n\nexport default createConfigObj;\n"]},"metadata":{},"sourceType":"module"}