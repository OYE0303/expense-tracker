{"ast":null,"code":"var _jsxFileName = \"/Users/eyo/Desktop/project-expenseTracker-main/src/components/MainContent/Chart/ChartMain/ChartMain.js\",\n    _s = $RefreshSig$();\n\nimport { useRef, useEffect, useContext } from \"react\";\nimport ExpenseDataContext from \"../../../../store/expenseData/expenseData--context\";\nimport style from \"./ChartMain.module.css\";\nimport Chart from \"chart.js/auto\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst dateOptObj = {\n  month: \"short\"\n};\n\nfunction ChartMain(props) {\n  _s();\n\n  const chartRef = useRef(null);\n  const {\n    EXPENSE_DATA\n  } = useContext(ExpenseDataContext);\n  let labels = [],\n      data = [];\n\n  if (props.chartData) {\n    const standardLabels = createStandardLabelsArr(props.chartData.timeDuration, props.chartData.startingDate);\n    labels = createLabelsArr(standardLabels, props.chartData.timeDuration);\n    data = createDataArr(standardLabels, createFilteredData(standardLabels, EXPENSE_DATA));\n  }\n\n  const dataObj = {\n    labels: labels,\n    datasets: [{\n      label: \"My First Dataset\",\n      data: data,\n      backgroundColor: [\"rgba(255, 99, 132, 0.2)\", \"rgba(255, 159, 64, 0.2)\", \"rgba(255, 205, 86, 0.2)\", \"rgba(75, 192, 192, 0.2)\", \"rgba(54, 162, 235, 0.2)\", \"rgba(153, 102, 255, 0.2)\", \"rgba(201, 203, 207, 0.2)\"],\n      borderColor: [\"rgb(255, 99, 132)\", \"rgb(255, 159, 64)\", \"rgb(255, 205, 86)\", \"rgb(75, 192, 192)\", \"rgb(54, 162, 235)\", \"rgb(153, 102, 255)\", \"rgb(201, 203, 207)\"],\n      borderWidth: 1\n    }]\n  };\n  const config = {\n    type: \"bar\",\n    data: dataObj,\n    options: {\n      scales: {\n        y: {\n          beginAtZero: true\n        }\n      }\n    }\n  }; // useEffect(() => {\n  //   const chart = new Chart(chartRef.current, config);\n  //   return function cleanUp() {\n  //     chart.destroy();\n  //   };\n  // }, [labels]);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: style.chartMain,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ChartMain, \"+o1nGUf0gmfc6lFgmRh5QYfQCMo=\");\n\n_c = ChartMain;\nexport default ChartMain;\n\nfunction createLabelsArr(standardLabels, duration) {\n  if (duration === \"6\" || duration === \"12\") {\n    return standardLabels.map(label => new Intl.DateTimeFormat(\"en-US\", dateOptObj).format(new Date(label)));\n  }\n\n  return standardLabels.map(label => `${label.slice(5, 7)}${label.slice(8)}`);\n}\n\nfunction createFilteredData(standardLabels, expensData) {\n  const numStartingDate = Number(new Date(standardLabels[0]));\n  const numEndingDate = Number(new Date(standardLabels[standardLabels.length - 1]));\n  return expensData.filter(element => Number(new Date(element.time)) >= numStartingDate && Number(new Date(element.time)) <= numEndingDate).sort((elementA, elementB) => Number(new Date(elementA.time)) - Number(new Date(elementB.time)));\n}\n\nfunction createDataArr(standardLabels, filteredData) {\n  console.log(filteredData);\n  const data = [];\n  let indexData = 0;\n  let indexCurrentDate = true;\n  let currentAmount = 0;\n  let currentLabel;\n\n  for (let i = 0; i < standardLabels.length; i++) {\n    currentLabel = Number(new Date(standardLabels[i]));\n\n    while (indexCurrentDate) {\n      var _filteredData$indexDa;\n\n      if (Number(new Date((_filteredData$indexDa = filteredData[indexData]) === null || _filteredData$indexDa === void 0 ? void 0 : _filteredData$indexDa.time)) <= currentLabel) {\n        if (filteredData[indexData].category === \"expense\") {\n          currentAmount += Number(filteredData[indexData].price);\n        }\n\n        indexData++;\n      } else indexCurrentDate = false;\n    }\n\n    data.push(currentAmount);\n    currentAmount = 0;\n    indexCurrentDate = true;\n  }\n\n  console.log(filteredData);\n  console.log(standardLabels);\n  console.log(data); // console.log(data);\n\n  return data;\n}\n\nfunction createDataArr1(standardLabels, filteredData) {\n  const data = [];\n  let indexData = 0;\n  let indexCurrentDate = true;\n  let currentAmount = 0;\n  let yearLabel, monthLabel, dayLabel, yearDate, monthData, dayData;\n\n  for (let i = 0; i < standardLabels.length; i++) {\n    yearLabel = standardLabels[i].slice(0, 4);\n    monthLabel = standardLabels[i].slice(5, 7);\n    dayLabel = standardLabels[i].slice(8);\n\n    while (indexCurrentDate) {\n      var _filteredData$indexDa2, _filteredData$indexDa3, _filteredData$indexDa4;\n\n      yearDate = (_filteredData$indexDa2 = filteredData[indexData]) === null || _filteredData$indexDa2 === void 0 ? void 0 : _filteredData$indexDa2.time.slice(0, 4);\n      monthData = (_filteredData$indexDa3 = filteredData[indexData]) === null || _filteredData$indexDa3 === void 0 ? void 0 : _filteredData$indexDa3.time.slice(5, 7);\n      dayData = (_filteredData$indexDa4 = filteredData[indexData]) === null || _filteredData$indexDa4 === void 0 ? void 0 : _filteredData$indexDa4.time.slice(8);\n\n      if (yearLabel === yearDate && monthLabel === monthData) {\n        if (Number(dayLabel) <= Number(dayData) && 31 >= Number(dayData)) if (filteredData[indexData].category === \"expense\") {\n          currentAmount += Number(filteredData[indexData].price);\n        }\n        indexData++;\n      } else indexCurrentDate = false;\n    }\n\n    data.push(currentAmount);\n    currentAmount = 0;\n    indexCurrentDate = true;\n  }\n\n  return data;\n}\n\nfunction createStandardLabelsArr(duration, startingDate) {\n  const today = new Date(startingDate);\n  let labels = []; // one week\n\n  if (duration === \"7\") {\n    createStandardLabelsArrHelper(labels, 7, 1, \"day\", today);\n  }\n\n  if (duration === \"14\") {\n    createStandardLabelsArrHelper(labels, 14, 1, \"day\", today);\n  }\n\n  if (duration === \"30\") {\n    createStandardLabelsArrHelper(labels, 30, 1, \"day\", today);\n  }\n\n  if (duration === \"90\") {\n    createStandardLabelsArrHelper(labels, 30, 3, \"day\", today);\n  }\n\n  if (duration === \"6\") {\n    createStandardLabelsArrHelper(labels, 6, 1, \"month\", today);\n  }\n\n  if (duration === \"12\") {\n    createStandardLabelsArrHelper(labels, 12, 1, \"month\", today);\n  }\n\n  return labels;\n}\n\nfunction createStandardLabelsArrHelper(labels, duration, incrementAmount, dayMonth, today) {\n  let tmpDay = today;\n  let day;\n  let month;\n  let year = today.getFullYear();\n  let changeYear = false; // if it's increment by month, the day is never change\n  // we could put it outisde for-loop\n\n  if (dayMonth === \"month\") {\n    if (tmpDay.getDate() < 10) day = `0${tmpDay.getDate()}`;else day = tmpDay.getDate();\n  }\n\n  for (let i = 0; i < duration; i++) {\n    // incremenet by month\n    if (dayMonth === \"month\") tmpDay.setMonth(tmpDay.getMonth() + incrementAmount); // increment by day\n\n    if (dayMonth === \"day\") {\n      tmpDay.setDate(tmpDay.getDate() + incrementAmount); // day will change, so put this inside for-loop\n\n      if (tmpDay.getDate() < 10) day = `0${tmpDay.getDate()}`;else day = tmpDay.getDate();\n    }\n\n    if (tmpDay.getMonth() + 1 < 10) month = `0${tmpDay.getMonth() + 1}`;else month = tmpDay.getMonth() + 1; // increment year\n\n    if (changeYear) {\n      year++;\n      changeYear = false;\n    }\n\n    if (tmpDay.getMonth() === 11) changeYear = true;\n    labels.push(`${year}-${month}-${day}`);\n  }\n}\n/*\n if (timeDuration === \"6\" || timeDuration === \"12\") {\n    if (mainCategory === \"income\" && subCategory.length === 3) {\n      const labelsLength = labels.length;\n      let indexLabel = 0;\n      let indexData = 0;\n      let indexCurrentDate = true;\n      let currentMonth;\n      let currentAmount = 0;\n\n      while (indexLabel < labelsLength) {\n        // keep adding if it's still at current date(time)\n        while (indexCurrentDate) {\n          currentMonth = new Intl.DateTimeFormat(\"en-US\", dateOptObj).format(\n            new Date(filteredData[indexData]?.time)\n          );\n          // check date(time)\n          if (currentMonth === labels1[indexLabel]) {\n            // check main category\n            if (filteredData[indexData].category === \"income\") {\n              currentAmount += Number(filteredData[indexData].price);\n            }\n\n            indexData++;\n          } else indexCurrentDate = false;\n        }\n\n        data.push(currentAmount);\n\n        currentAmount = 0;\n        indexCurrentDate = true;\n        indexLabel++;\n      }\n    }\n\n    if (mainCategory === \"expense\" && subCategory.length === 6) {\n      const labelsLength = labels.length;\n      let indexLabel = 0;\n      let indexData = 0;\n      let indexCurrentDate = true;\n      let currentMonth;\n      let currentAmount = 0;\n\n      while (indexLabel < labelsLength) {\n        // keep adding if it's still at current date(time)\n        while (indexCurrentDate) {\n          console.log(filteredData);\n          if (!filteredData[indexData]?.time)\n            currentMonth = new Intl.DateTimeFormat(\"en-US\", dateOptObj).format(\n              new Date(filteredData[indexData]?.time)\n            );\n          console.log(currentMonth);\n\n          if (currentMonth === labels1[indexLabel]) {\n            // check main category\n            if (filteredData[indexData].category === \"income\") {\n              currentAmount += Number(filteredData[indexData].price);\n            }\n\n            indexData++;\n          } else indexCurrentDate = false;\n        }\n\n        data.push(currentAmount);\n\n        currentAmount = 0;\n        indexCurrentDate = true;\n        indexLabel++;\n      }\n    }\n  }\n  // day base\n  else {\n    if (mainCategory === \"income\" && subCategory.length === 3) {\n      const labelsLength = labels.length;\n      let indexLabel = 0;\n      let indexData = 0;\n      let indexCurrentDate = true;\n      let currentDate;\n      let currentAmount = 0;\n\n      while (indexLabel < labelsLength) {\n        currentDate = `${year}-${labels[indexLabel].slice(0, 2)}-${labels[\n          indexLabel\n        ].slice(2)}`;\n\n        // keep adding if it's still at current date(time)\n        if (indexData < filteredData.length - 1) {\n          while (indexCurrentDate) {\n            // check date(time)\n            if (filteredData[indexData].time === currentDate) {\n              // check main category\n              if (filteredData[indexData].category === \"income\") {\n                currentAmount += Number(filteredData[indexData].price);\n              }\n\n              indexData++;\n            } else indexCurrentDate = false;\n          }\n        }\n\n        data.push(currentAmount);\n\n        currentAmount = 0;\n        indexCurrentDate = true;\n        indexLabel++;\n      }\n    }\n\n    if (mainCategory === \"expense\" && subCategory.length === 6) {\n      const labelsLength = labels.length;\n      let indexLabel = 0;\n      let indexData = 0;\n      let indexCurrentDate = true;\n      let currentDate;\n      let currentAmount = 0;\n\n      while (indexLabel < labelsLength) {\n        currentDate = `${year}-${labels[indexLabel].slice(0, 2)}-${labels[\n          indexLabel\n        ].slice(2)}`;\n\n        // keep adding if it's still at current date(time)\n\n        while (indexCurrentDate) {\n          // check date(time)\n          if (filteredData[indexData]?.time === currentDate) {\n            // check main category\n            if (filteredData[indexData].category === \"expense\") {\n              currentAmount += Number(filteredData[indexData].price);\n            }\n\n            indexData++;\n          } else indexCurrentDate = false;\n        }\n\n        data.push(currentAmount);\n\n        currentAmount = 0;\n        indexCurrentDate = true;\n        indexLabel++;\n      }\n    }\n  }\n*/\n\n\nvar _c;\n\n$RefreshReg$(_c, \"ChartMain\");","map":{"version":3,"sources":["/Users/eyo/Desktop/project-expenseTracker-main/src/components/MainContent/Chart/ChartMain/ChartMain.js"],"names":["useRef","useEffect","useContext","ExpenseDataContext","style","Chart","dateOptObj","month","ChartMain","props","chartRef","EXPENSE_DATA","labels","data","chartData","standardLabels","createStandardLabelsArr","timeDuration","startingDate","createLabelsArr","createDataArr","createFilteredData","dataObj","datasets","label","backgroundColor","borderColor","borderWidth","config","type","options","scales","y","beginAtZero","chartMain","duration","map","Intl","DateTimeFormat","format","Date","slice","expensData","numStartingDate","Number","numEndingDate","length","filter","element","time","sort","elementA","elementB","filteredData","console","log","indexData","indexCurrentDate","currentAmount","currentLabel","i","category","price","push","createDataArr1","yearLabel","monthLabel","dayLabel","yearDate","monthData","dayData","today","createStandardLabelsArrHelper","incrementAmount","dayMonth","tmpDay","day","year","getFullYear","changeYear","getDate","setMonth","getMonth","setDate"],"mappings":"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":["import { useRef, useEffect, useContext } from \"react\";\nimport ExpenseDataContext from \"../../../../store/expenseData/expenseData--context\";\nimport style from \"./ChartMain.module.css\";\nimport Chart from \"chart.js/auto\";\n\nconst dateOptObj = { month: \"short\" };\n\nfunction ChartMain(props) {\n  const chartRef = useRef(null);\n  const { EXPENSE_DATA } = useContext(ExpenseDataContext);\n\n  let labels = [],\n    data = [];\n\n  if (props.chartData) {\n    const standardLabels = createStandardLabelsArr(\n      props.chartData.timeDuration,\n      props.chartData.startingDate\n    );\n\n    labels = createLabelsArr(standardLabels, props.chartData.timeDuration);\n\n    data = createDataArr(\n      standardLabels,\n      createFilteredData(standardLabels, EXPENSE_DATA)\n    );\n  }\n\n  const dataObj = {\n    labels: labels,\n    datasets: [\n      {\n        label: \"My First Dataset\",\n        data: data,\n        backgroundColor: [\n          \"rgba(255, 99, 132, 0.2)\",\n          \"rgba(255, 159, 64, 0.2)\",\n          \"rgba(255, 205, 86, 0.2)\",\n          \"rgba(75, 192, 192, 0.2)\",\n          \"rgba(54, 162, 235, 0.2)\",\n          \"rgba(153, 102, 255, 0.2)\",\n          \"rgba(201, 203, 207, 0.2)\",\n        ],\n        borderColor: [\n          \"rgb(255, 99, 132)\",\n          \"rgb(255, 159, 64)\",\n          \"rgb(255, 205, 86)\",\n          \"rgb(75, 192, 192)\",\n          \"rgb(54, 162, 235)\",\n          \"rgb(153, 102, 255)\",\n          \"rgb(201, 203, 207)\",\n        ],\n        borderWidth: 1,\n      },\n    ],\n  };\n\n  const config = {\n    type: \"bar\",\n    data: dataObj,\n    options: {\n      scales: {\n        y: {\n          beginAtZero: true,\n        },\n      },\n    },\n  };\n\n  // useEffect(() => {\n  //   const chart = new Chart(chartRef.current, config);\n\n  //   return function cleanUp() {\n  //     chart.destroy();\n  //   };\n  // }, [labels]);\n\n  return (\n    <div className={style.chartMain}>\n      <div>{/* <canvas ref={chartRef}></canvas> */}</div>\n    </div>\n  );\n}\n\nexport default ChartMain;\n\nfunction createLabelsArr(standardLabels, duration) {\n  if (duration === \"6\" || duration === \"12\") {\n    return standardLabels.map((label) =>\n      new Intl.DateTimeFormat(\"en-US\", dateOptObj).format(new Date(label))\n    );\n  }\n\n  return standardLabels.map((label) => `${label.slice(5, 7)}${label.slice(8)}`);\n}\n\nfunction createFilteredData(standardLabels, expensData) {\n  const numStartingDate = Number(new Date(standardLabels[0]));\n  const numEndingDate = Number(\n    new Date(standardLabels[standardLabels.length - 1])\n  );\n\n  return expensData\n    .filter(\n      (element) =>\n        Number(new Date(element.time)) >= numStartingDate &&\n        Number(new Date(element.time)) <= numEndingDate\n    )\n    .sort(\n      (elementA, elementB) =>\n        Number(new Date(elementA.time)) - Number(new Date(elementB.time))\n    );\n}\n\nfunction createDataArr(standardLabels, filteredData) {\n  console.log(filteredData);\n  const data = [];\n\n  let indexData = 0;\n  let indexCurrentDate = true;\n  let currentAmount = 0;\n  let currentLabel;\n\n  for (let i = 0; i < standardLabels.length; i++) {\n    currentLabel = Number(new Date(standardLabels[i]));\n    while (indexCurrentDate) {\n      if (Number(new Date(filteredData[indexData]?.time)) <= currentLabel) {\n        if (filteredData[indexData].category === \"expense\") {\n          currentAmount += Number(filteredData[indexData].price);\n        }\n\n        indexData++;\n      } else indexCurrentDate = false;\n    }\n\n    data.push(currentAmount);\n    currentAmount = 0;\n    indexCurrentDate = true;\n  }\n\n  console.log(filteredData);\n  console.log(standardLabels);\n  console.log(data);\n  // console.log(data);\n  return data;\n}\n\nfunction createDataArr1(standardLabels, filteredData) {\n  const data = [];\n\n  let indexData = 0;\n  let indexCurrentDate = true;\n  let currentAmount = 0;\n  let yearLabel, monthLabel, dayLabel, yearDate, monthData, dayData;\n\n  for (let i = 0; i < standardLabels.length; i++) {\n    yearLabel = standardLabels[i].slice(0, 4);\n    monthLabel = standardLabels[i].slice(5, 7);\n    dayLabel = standardLabels[i].slice(8);\n\n    while (indexCurrentDate) {\n      yearDate = filteredData[indexData]?.time.slice(0, 4);\n      monthData = filteredData[indexData]?.time.slice(5, 7);\n      dayData = filteredData[indexData]?.time.slice(8);\n\n      if (yearLabel === yearDate && monthLabel === monthData) {\n        if (Number(dayLabel) <= Number(dayData) && 31 >= Number(dayData))\n          if (filteredData[indexData].category === \"expense\") {\n            currentAmount += Number(filteredData[indexData].price);\n          }\n\n        indexData++;\n      } else indexCurrentDate = false;\n    }\n\n    data.push(currentAmount);\n    currentAmount = 0;\n    indexCurrentDate = true;\n  }\n\n  return data;\n}\n\nfunction createStandardLabelsArr(duration, startingDate) {\n  const today = new Date(startingDate);\n\n  let labels = [];\n\n  // one week\n  if (duration === \"7\") {\n    createStandardLabelsArrHelper(labels, 7, 1, \"day\", today);\n  }\n\n  if (duration === \"14\") {\n    createStandardLabelsArrHelper(labels, 14, 1, \"day\", today);\n  }\n\n  if (duration === \"30\") {\n    createStandardLabelsArrHelper(labels, 30, 1, \"day\", today);\n  }\n\n  if (duration === \"90\") {\n    createStandardLabelsArrHelper(labels, 30, 3, \"day\", today);\n  }\n\n  if (duration === \"6\") {\n    createStandardLabelsArrHelper(labels, 6, 1, \"month\", today);\n  }\n\n  if (duration === \"12\") {\n    createStandardLabelsArrHelper(labels, 12, 1, \"month\", today);\n  }\n\n  return labels;\n}\n\nfunction createStandardLabelsArrHelper(\n  labels,\n  duration,\n  incrementAmount,\n  dayMonth,\n  today\n) {\n  let tmpDay = today;\n  let day;\n  let month;\n  let year = today.getFullYear();\n  let changeYear = false;\n\n  // if it's increment by month, the day is never change\n  // we could put it outisde for-loop\n  if (dayMonth === \"month\") {\n    if (tmpDay.getDate() < 10) day = `0${tmpDay.getDate()}`;\n    else day = tmpDay.getDate();\n  }\n\n  for (let i = 0; i < duration; i++) {\n    // incremenet by month\n    if (dayMonth === \"month\")\n      tmpDay.setMonth(tmpDay.getMonth() + incrementAmount);\n\n    // increment by day\n    if (dayMonth === \"day\") {\n      tmpDay.setDate(tmpDay.getDate() + incrementAmount);\n\n      // day will change, so put this inside for-loop\n      if (tmpDay.getDate() < 10) day = `0${tmpDay.getDate()}`;\n      else day = tmpDay.getDate();\n    }\n\n    if (tmpDay.getMonth() + 1 < 10) month = `0${tmpDay.getMonth() + 1}`;\n    else month = tmpDay.getMonth() + 1;\n\n    // increment year\n    if (changeYear) {\n      year++;\n      changeYear = false;\n    }\n    if (tmpDay.getMonth() === 11) changeYear = true;\n\n    labels.push(`${year}-${month}-${day}`);\n  }\n}\n\n/*\n if (timeDuration === \"6\" || timeDuration === \"12\") {\n    if (mainCategory === \"income\" && subCategory.length === 3) {\n      const labelsLength = labels.length;\n      let indexLabel = 0;\n      let indexData = 0;\n      let indexCurrentDate = true;\n      let currentMonth;\n      let currentAmount = 0;\n\n      while (indexLabel < labelsLength) {\n        // keep adding if it's still at current date(time)\n        while (indexCurrentDate) {\n          currentMonth = new Intl.DateTimeFormat(\"en-US\", dateOptObj).format(\n            new Date(filteredData[indexData]?.time)\n          );\n          // check date(time)\n          if (currentMonth === labels1[indexLabel]) {\n            // check main category\n            if (filteredData[indexData].category === \"income\") {\n              currentAmount += Number(filteredData[indexData].price);\n            }\n\n            indexData++;\n          } else indexCurrentDate = false;\n        }\n\n        data.push(currentAmount);\n\n        currentAmount = 0;\n        indexCurrentDate = true;\n        indexLabel++;\n      }\n    }\n\n    if (mainCategory === \"expense\" && subCategory.length === 6) {\n      const labelsLength = labels.length;\n      let indexLabel = 0;\n      let indexData = 0;\n      let indexCurrentDate = true;\n      let currentMonth;\n      let currentAmount = 0;\n\n      while (indexLabel < labelsLength) {\n        // keep adding if it's still at current date(time)\n        while (indexCurrentDate) {\n          console.log(filteredData);\n          if (!filteredData[indexData]?.time)\n            currentMonth = new Intl.DateTimeFormat(\"en-US\", dateOptObj).format(\n              new Date(filteredData[indexData]?.time)\n            );\n          console.log(currentMonth);\n\n          if (currentMonth === labels1[indexLabel]) {\n            // check main category\n            if (filteredData[indexData].category === \"income\") {\n              currentAmount += Number(filteredData[indexData].price);\n            }\n\n            indexData++;\n          } else indexCurrentDate = false;\n        }\n\n        data.push(currentAmount);\n\n        currentAmount = 0;\n        indexCurrentDate = true;\n        indexLabel++;\n      }\n    }\n  }\n  // day base\n  else {\n    if (mainCategory === \"income\" && subCategory.length === 3) {\n      const labelsLength = labels.length;\n      let indexLabel = 0;\n      let indexData = 0;\n      let indexCurrentDate = true;\n      let currentDate;\n      let currentAmount = 0;\n\n      while (indexLabel < labelsLength) {\n        currentDate = `${year}-${labels[indexLabel].slice(0, 2)}-${labels[\n          indexLabel\n        ].slice(2)}`;\n\n        // keep adding if it's still at current date(time)\n        if (indexData < filteredData.length - 1) {\n          while (indexCurrentDate) {\n            // check date(time)\n            if (filteredData[indexData].time === currentDate) {\n              // check main category\n              if (filteredData[indexData].category === \"income\") {\n                currentAmount += Number(filteredData[indexData].price);\n              }\n\n              indexData++;\n            } else indexCurrentDate = false;\n          }\n        }\n\n        data.push(currentAmount);\n\n        currentAmount = 0;\n        indexCurrentDate = true;\n        indexLabel++;\n      }\n    }\n\n    if (mainCategory === \"expense\" && subCategory.length === 6) {\n      const labelsLength = labels.length;\n      let indexLabel = 0;\n      let indexData = 0;\n      let indexCurrentDate = true;\n      let currentDate;\n      let currentAmount = 0;\n\n      while (indexLabel < labelsLength) {\n        currentDate = `${year}-${labels[indexLabel].slice(0, 2)}-${labels[\n          indexLabel\n        ].slice(2)}`;\n\n        // keep adding if it's still at current date(time)\n\n        while (indexCurrentDate) {\n          // check date(time)\n          if (filteredData[indexData]?.time === currentDate) {\n            // check main category\n            if (filteredData[indexData].category === \"expense\") {\n              currentAmount += Number(filteredData[indexData].price);\n            }\n\n            indexData++;\n          } else indexCurrentDate = false;\n        }\n\n        data.push(currentAmount);\n\n        currentAmount = 0;\n        indexCurrentDate = true;\n        indexLabel++;\n      }\n    }\n  }\n*/\n"]},"metadata":{},"sourceType":"module"}