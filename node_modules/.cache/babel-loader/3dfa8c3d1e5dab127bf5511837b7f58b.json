{"ast":null,"code":"import createStandardLabelsArr from \"./createStandardLabelsArr\";\nimport createLabelsArr from \"./createLabelsArr\";\nimport createDataArr from \"./createDataArr\";\nimport createFilteredData from \"./createFilteredData\";\n\nfunction createConfigObj(mainType, timeDuration, startingDate, endingDate, expenseData, mainCategory, subCategory, theme, showLabel) {\n  if (mainType === \"time\") {\n    const standardLabels = createStandardLabelsArr(timeDuration, startingDate);\n    const labels = createLabelsArr(standardLabels, timeDuration);\n    const data = createDataArr(standardLabels, createFilteredData(standardLabels, expenseData), timeDuration, mainCategory, subCategory);\n    let legend = null;\n\n    if (showLabel && (timeDuration === \"7\" || timeDuration === \"6\" || timeDuration === \"12\")) {\n      legend = {\n        onClick: (e, legendItem, legend) => {\n          const index = legend.chart.data.labels.indexOf(legendItem.text);\n          legend.chart.toggleDataVisibility(index);\n          legend.chart.update();\n        },\n        labels: {\n          generateLabels: chart => {\n            const colorLength = chart.data.datasets[0].borderColor.length;\n            const visibility = [];\n\n            for (let i = 0; i < chart.data.labels.length; i++) {\n              if (chart.getDataVisibility(i)) visibility.push(false);else visibility.push(true);\n            }\n\n            return chart.data.labels.map((label, index) => {\n              const newIndex = index % colorLength;\n              return {\n                text: label,\n                strokeStyle: chart.data.datasets[0].borderColor[newIndex],\n                fillStyle: chart.data.datasets[0].backgroundColor[newIndex],\n                hidden: visibility[index]\n              };\n            });\n          }\n        }\n      };\n    }\n\n    return {\n      type: \"bar\",\n      data: {\n        labels: labels,\n        datasets: [{\n          label: \"\",\n          data: data,\n          backgroundColor: [\"rgba(255, 99, 132, 0.2)\", \"rgba(255, 159, 64, 0.2)\", \"rgba(255, 205, 86, 0.2)\", \"rgba(75, 192, 192, 0.2)\", \"rgba(54, 162, 235, 0.2)\", \"rgba(153, 102, 255, 0.2)\", \"rgba(201, 203, 207, 0.2)\"],\n          borderColor: [\"rgb(255, 99, 132)\", \"rgb(255, 159, 64)\", \"rgb(255, 205, 86)\", \"rgb(75, 192, 192)\", \"rgb(54, 162, 235)\", \"rgb(153, 102, 255)\", \"rgb(201, 203, 207)\"],\n          borderWidth: 1\n        }]\n      },\n      options: {\n        plugins: {\n          // title: {\n          //   display: true,\n          //   text: \"Custom Chart Title\",\n          // },\n          tooltip: {\n            yAlign: \"bottom\",\n            displayColors: false,\n            backgroundColor: tooltipItem => {\n              return tooltipItem.tooltip.labelColors[0].borderColor;\n            }\n          },\n          legend\n        },\n        scales: {\n          y: {\n            // title: {\n            //   display: true,\n            //   text: \"Money\",\n            //   color: \"white\",\n            //   padding: { top: 0, left: 0, right: 0, bottom: 20 },\n            // },\n            beginAtZero: true,\n            ticks: {\n              color: `${theme === \"dark\" ? \"rgb(190,190,190)\" : \"rgb(70,70,70)\"}`\n            }\n          },\n          x: {\n            // title: {\n            //   display: true,\n            //   text: \"Time\",\n            //   color: \"white\",\n            //   padding: { top: 20, left: 0, right: 0, bottom: 0 },\n            // },\n            ticks: {\n              color: `${theme === \"dark\" ? \"rgb(190,190,190)\" : \"rgb(70,70,70)\"}`\n            }\n          }\n        }\n      }\n    };\n  } else {\n    const filteredData = expenseData.filter(element => Number(new Date(element.time)) >= Number(new Date(startingDate)) && Number(new Date(element.time)) <= Number(new Date(endingDate)) && element.category === mainCategory); // const labels = subCategory;\n\n    let labels = [];\n    filteredData.forEach(element => {\n      if (!labels.includes(element.mainCate)) labels.push(element.mainCate);\n    });\n    let newFilteredData = [];\n    labels.forEach(label => {\n      newFilteredData.push(filteredData.filter(data => data.mainCate === label));\n    }); // const totalAmount = newFilteredData\n    //   .flat()\n    //   .reduce((acc, cur) => (acc += Number(cur.price)), 0);\n\n    const dataArr = [];\n    newFilteredData.forEach(data => {\n      let dataTmp;\n\n      if (data.length > 0) {\n        dataTmp = data.reduce((acc, cur) => acc += Number(cur.price), 0);\n      } else dataTmp = 0;\n\n      dataArr.push(dataTmp);\n    });\n    return {\n      type: \"pie\",\n      data: {\n        labels: labels,\n        datasets: [{\n          label: \"My First Dataset\",\n          data: dataArr,\n          backgroundColor: [\"rgb(255, 99, 132)\", \"rgb(255, 159, 64)\", \"rgb(255, 205, 86)\", \"rgb(75, 192, 192)\", \"rgb(54, 162, 235)\", \"rgb(153, 102, 255)\", \"rgb(201, 203, 207)\"],\n          hoverOffset: 4\n        }]\n      },\n      options: {\n        plugins: {\n          // labels: {\n          //   render: \"percentage\",\n          // },\n          legend: {\n            labels: {\n              // This is more specific font property overrides the global property\n              font: {\n                size: 14\n              },\n              color: `${theme === \"dark\" ? \"rgb(190,190,190)\" : \"rgb(70,70,70)\"}`\n            }\n          }\n        }\n      },\n      plugins: [100]\n    };\n  }\n}\n\nexport default createConfigObj;","map":{"version":3,"sources":["/Users/eyo/Desktop/expense-tracker/src/Others/CreateChartData/createConfigObj.js"],"names":["createStandardLabelsArr","createLabelsArr","createDataArr","createFilteredData","createConfigObj","mainType","timeDuration","startingDate","endingDate","expenseData","mainCategory","subCategory","theme","showLabel","standardLabels","labels","data","legend","onClick","e","legendItem","index","chart","indexOf","text","toggleDataVisibility","update","generateLabels","colorLength","datasets","borderColor","length","visibility","i","getDataVisibility","push","map","label","newIndex","strokeStyle","fillStyle","backgroundColor","hidden","type","borderWidth","options","plugins","tooltip","yAlign","displayColors","tooltipItem","labelColors","scales","y","beginAtZero","ticks","color","x","filteredData","filter","element","Number","Date","time","category","forEach","includes","mainCate","newFilteredData","dataArr","dataTmp","reduce","acc","cur","price","hoverOffset","font","size"],"mappings":"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","sourcesContent":["import createStandardLabelsArr from \"./createStandardLabelsArr\";\nimport createLabelsArr from \"./createLabelsArr\";\nimport createDataArr from \"./createDataArr\";\nimport createFilteredData from \"./createFilteredData\";\n\nfunction createConfigObj(\n  mainType,\n  timeDuration,\n  startingDate,\n  endingDate,\n  expenseData,\n  mainCategory,\n  subCategory,\n  theme,\n  showLabel\n) {\n  if (mainType === \"time\") {\n    const standardLabels = createStandardLabelsArr(timeDuration, startingDate);\n    const labels = createLabelsArr(standardLabels, timeDuration);\n    const data = createDataArr(\n      standardLabels,\n      createFilteredData(standardLabels, expenseData),\n      timeDuration,\n      mainCategory,\n      subCategory\n    );\n\n    let legend = null;\n\n    if (\n      showLabel &&\n      (timeDuration === \"7\" || timeDuration === \"6\" || timeDuration === \"12\")\n    ) {\n      legend = {\n        onClick: (e, legendItem, legend) => {\n          const index = legend.chart.data.labels.indexOf(legendItem.text);\n          legend.chart.toggleDataVisibility(index);\n          legend.chart.update();\n        },\n        labels: {\n          generateLabels: (chart) => {\n            const colorLength = chart.data.datasets[0].borderColor.length;\n            const visibility = [];\n            for (let i = 0; i < chart.data.labels.length; i++) {\n              if (chart.getDataVisibility(i)) visibility.push(false);\n              else visibility.push(true);\n            }\n            return chart.data.labels.map((label, index) => {\n              const newIndex = index % colorLength;\n              return {\n                text: label,\n                strokeStyle: chart.data.datasets[0].borderColor[newIndex],\n                fillStyle: chart.data.datasets[0].backgroundColor[newIndex],\n                hidden: visibility[index],\n              };\n            });\n          },\n        },\n      };\n    }\n\n    return {\n      type: \"bar\",\n      data: {\n        labels: labels,\n        datasets: [\n          {\n            label: \"\",\n            data: data,\n            backgroundColor: [\n              \"rgba(255, 99, 132, 0.2)\",\n              \"rgba(255, 159, 64, 0.2)\",\n              \"rgba(255, 205, 86, 0.2)\",\n              \"rgba(75, 192, 192, 0.2)\",\n              \"rgba(54, 162, 235, 0.2)\",\n              \"rgba(153, 102, 255, 0.2)\",\n              \"rgba(201, 203, 207, 0.2)\",\n            ],\n            borderColor: [\n              \"rgb(255, 99, 132)\",\n              \"rgb(255, 159, 64)\",\n              \"rgb(255, 205, 86)\",\n              \"rgb(75, 192, 192)\",\n              \"rgb(54, 162, 235)\",\n              \"rgb(153, 102, 255)\",\n              \"rgb(201, 203, 207)\",\n            ],\n            borderWidth: 1,\n          },\n        ],\n      },\n      options: {\n        plugins: {\n          // title: {\n          //   display: true,\n          //   text: \"Custom Chart Title\",\n          // },\n          tooltip: {\n            yAlign: \"bottom\",\n            displayColors: false,\n            backgroundColor: (tooltipItem) => {\n              return tooltipItem.tooltip.labelColors[0].borderColor;\n            },\n          },\n          legend,\n        },\n        scales: {\n          y: {\n            // title: {\n            //   display: true,\n            //   text: \"Money\",\n            //   color: \"white\",\n            //   padding: { top: 0, left: 0, right: 0, bottom: 20 },\n            // },\n            beginAtZero: true,\n            ticks: {\n              color: `${\n                theme === \"dark\" ? \"rgb(190,190,190)\" : \"rgb(70,70,70)\"\n              }`,\n            },\n          },\n          x: {\n            // title: {\n            //   display: true,\n            //   text: \"Time\",\n            //   color: \"white\",\n            //   padding: { top: 20, left: 0, right: 0, bottom: 0 },\n            // },\n            ticks: {\n              color: `${\n                theme === \"dark\" ? \"rgb(190,190,190)\" : \"rgb(70,70,70)\"\n              }`,\n            },\n          },\n        },\n      },\n    };\n  } else {\n    const filteredData = expenseData.filter(\n      (element) =>\n        Number(new Date(element.time)) >= Number(new Date(startingDate)) &&\n        Number(new Date(element.time)) <= Number(new Date(endingDate)) &&\n        element.category === mainCategory\n    );\n\n    // const labels = subCategory;\n    let labels = [];\n    filteredData.forEach((element) => {\n      if (!labels.includes(element.mainCate)) labels.push(element.mainCate);\n    });\n\n    let newFilteredData = [];\n    labels.forEach((label) => {\n      newFilteredData.push(\n        filteredData.filter((data) => data.mainCate === label)\n      );\n    });\n\n    // const totalAmount = newFilteredData\n    //   .flat()\n    //   .reduce((acc, cur) => (acc += Number(cur.price)), 0);\n\n    const dataArr = [];\n\n    newFilteredData.forEach((data) => {\n      let dataTmp;\n\n      if (data.length > 0) {\n        dataTmp = data.reduce((acc, cur) => (acc += Number(cur.price)), 0);\n      } else dataTmp = 0;\n\n      dataArr.push(dataTmp);\n    });\n\n    return {\n      type: \"pie\",\n      data: {\n        labels: labels,\n        datasets: [\n          {\n            label: \"My First Dataset\",\n            data: dataArr,\n            backgroundColor: [\n              \"rgb(255, 99, 132)\",\n              \"rgb(255, 159, 64)\",\n              \"rgb(255, 205, 86)\",\n              \"rgb(75, 192, 192)\",\n              \"rgb(54, 162, 235)\",\n              \"rgb(153, 102, 255)\",\n              \"rgb(201, 203, 207)\",\n            ],\n            hoverOffset: 4,\n          },\n        ],\n      },\n      options: {\n        plugins: {\n          // labels: {\n          //   render: \"percentage\",\n          // },\n          legend: {\n            labels: {\n              // This is more specific font property overrides the global property\n              font: {\n                size: 14,\n              },\n              color: `${\n                theme === \"dark\" ? \"rgb(190,190,190)\" : \"rgb(70,70,70)\"\n              }`,\n            },\n          },\n        },\n      },\n      plugins: [100],\n    };\n  }\n}\n\nexport default createConfigObj;\n"]},"metadata":{},"sourceType":"module"}