{"ast":null,"code":"import compareTime from \"../compareTime\";\nimport compareTimeWithRange from \"../compareTimeWithRange\";\n/*\nmain logic\n1) loop through each date inside standardLabels\n2) for each loop, use while-loop to keep accumulating the total amount within this date\n3) there are several conditions to make sure catching the correct data\n*/\n\nfunction createBarDataArr(standardLabels, filteredData, timeDuration, mainCategory, subCategory, showLabel, mainCategoryData, subCategoryData) {\n  const data = [];\n  let curExpense = 0,\n      curIncome = 0; // Reference 4\n\n  const checkboxNoChange = !showLabel || mainCategory === \"expense\" && subCategory.length === mainCategoryData.length || mainCategory === \"income\" && subCategory.length === subCategoryData.length || mainCategory === \"net\";\n  const type = timeDuration === \"12\" || timeDuration === \"6\" ? \"month\" : \"day\";\n  let indexData = 0;\n  let indexCurrentDate = true;\n  let currentAmount = 0;\n  let currentDate;\n\n  for (let i = 0; i < standardLabels.length; i++) {\n    // Reference 1\n    if (type === \"month\" && i === standardLabels.length - 1) break;\n    currentDate = new Date(standardLabels[i]);\n\n    while (indexCurrentDate) {\n      // Reference 2\n      let timeValidIndex = filteredData[indexData] && compareTime(filteredData[indexData], currentDate);\n\n      if (type === \"month\") {\n        timeValidIndex = filteredData[indexData] && compareTimeWithRange(filteredData[indexData], currentDate, new Date(standardLabels[i + 1]));\n      }\n\n      if (timeValidIndex) {\n        if (mainCategory === \"net\") {\n          if (filteredData[indexData].category === \"expense\") curExpense += Number(filteredData[indexData].price);else curIncome += Number(filteredData[indexData].price);\n        } else {\n          if (filteredData[indexData].category === mainCategory) {\n            // Reference 3\n            if (checkboxNoChange || subCategory.includes(filteredData[indexData].mainCate)) {\n              currentAmount += Number(filteredData[indexData].price);\n            }\n          }\n        } // index for expenseData, only update it when it's within the validTimeIndex\n\n\n        indexData++;\n      } // if not, we're done for while-loop which means going to next date (standardLabel)\n      else indexCurrentDate = false;\n    } // add the accumlated data, and empty\n\n\n    data.push(currentAmount);\n    currentAmount = 0;\n    indexCurrentDate = true;\n  }\n\n  console.log(checkboxNoChange);\n  console.log(mainCategory);\n  console.log(data);\n  return data;\n}\n\nexport default createBarDataArr;\n/*\nReference 1\nIf type === \"month\", have final extra element for accumulating month data\n(See createStandardLabels)\nLast data is for the purpose of accumulating month data\nAll we need is looping through from 0 ~ n - 2\n*/\n\n/*\nReference 2\nfind the date of data is less or eqaul to current date\nkeep doing the same thing until the date of data is greater than curret date\nwhich means have to go to next date\n\n\"month\" and \"day\" have different validIndex\nbecause it uses different helper function to validate\n\nNote\nBoth of validIndex has to first check if filteredData[indexData] is not undefined\nIt may have\n*/\n\n/*\nReference 3\n1) if checkbox has no change which means the user want to get all category, so can directly add the price\n2) otherwise, have to make sure the category is correct\n*/\n\n/*\nReference 4\nIt's like verbose at first, but we indeed need this variable\nThe reason we need this variable is inside the for-loop and while-loop\nafter validating the data if is within the valid time range\nwe also need to check if it's the correct main and sub category\n\nsubCategory.includes(filteredData[indexData].mainCate) -> O(n) works\nIf we can know the checkboxNoChange beforehand, in other words\nthe user want to get all the sub category\nthen we don't need to do the O(n) works\n\nIf user want to get all the sub category,\nwe only need to validate the main category, and add the price of data\nBUT\nif user want to get the specift sub category,\nwe need to first validate the main category,\nand validate the sub category\nthen add the price of data\n\nNext question\nWhy we need !showLabel\nIf we really think about it, when we will specifically set showLabel to true\nONLY in the ChartPic section, we won't set it to false when it's in the small chart section\nAND\nwe only need to validate sub category when user is in the Chart section\n\n\nFinally,\n  const checkboxNoChange =\n    !showLabel ||\n    (mainCategory === \"expense\" &&\n      subCategory.length === mainCategoryData.length) ||\n    (mainCategory === \"income\" &&\n      subCategory.length === subCategoryData.length);\nThis means\n1. Do you wanna validate sub category?\n   => we don't wanna validate when we're at SmallChart section\n   => we wanna validate when we're at Chart section\n2. If you wanna validate, keep validating\n3. If you don't want to, just set this to true immediately\n*/","map":{"version":3,"sources":["/Users/eyo/Desktop/expense-tracker/src/Others/CreateChartData/createBarDataArr.js"],"names":["compareTime","compareTimeWithRange","createBarDataArr","standardLabels","filteredData","timeDuration","mainCategory","subCategory","showLabel","mainCategoryData","subCategoryData","data","curExpense","curIncome","checkboxNoChange","length","type","indexData","indexCurrentDate","currentAmount","currentDate","i","Date","timeValidIndex","category","Number","price","includes","mainCate","push","console","log"],"mappings":"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","sourcesContent":["import compareTime from \"../compareTime\";\nimport compareTimeWithRange from \"../compareTimeWithRange\";\n\n/*\nmain logic\n1) loop through each date inside standardLabels\n2) for each loop, use while-loop to keep accumulating the total amount within this date\n3) there are several conditions to make sure catching the correct data\n*/\nfunction createBarDataArr(\n  standardLabels,\n  filteredData,\n  timeDuration,\n  mainCategory,\n  subCategory,\n  showLabel,\n  mainCategoryData,\n  subCategoryData\n) {\n  const data = [];\n  let curExpense = 0,\n    curIncome = 0;\n  // Reference 4\n  const checkboxNoChange =\n    !showLabel ||\n    (mainCategory === \"expense\" &&\n      subCategory.length === mainCategoryData.length) ||\n    (mainCategory === \"income\" &&\n      subCategory.length === subCategoryData.length) ||\n    mainCategory === \"net\";\n  const type = timeDuration === \"12\" || timeDuration === \"6\" ? \"month\" : \"day\";\n  let indexData = 0;\n  let indexCurrentDate = true;\n  let currentAmount = 0;\n  let currentDate;\n\n  for (let i = 0; i < standardLabels.length; i++) {\n    // Reference 1\n    if (type === \"month\" && i === standardLabels.length - 1) break;\n\n    currentDate = new Date(standardLabels[i]);\n\n    while (indexCurrentDate) {\n      // Reference 2\n      let timeValidIndex =\n        filteredData[indexData] &&\n        compareTime(filteredData[indexData], currentDate);\n\n      if (type === \"month\") {\n        timeValidIndex =\n          filteredData[indexData] &&\n          compareTimeWithRange(\n            filteredData[indexData],\n            currentDate,\n            new Date(standardLabels[i + 1])\n          );\n      }\n\n      if (timeValidIndex) {\n        if (mainCategory === \"net\") {\n          if (filteredData[indexData].category === \"expense\")\n            curExpense += Number(filteredData[indexData].price);\n          else curIncome += Number(filteredData[indexData].price);\n        } else {\n          if (filteredData[indexData].category === mainCategory) {\n            // Reference 3\n            if (\n              checkboxNoChange ||\n              subCategory.includes(filteredData[indexData].mainCate)\n            ) {\n              currentAmount += Number(filteredData[indexData].price);\n            }\n          }\n        }\n\n        // index for expenseData, only update it when it's within the validTimeIndex\n        indexData++;\n      }\n      // if not, we're done for while-loop which means going to next date (standardLabel)\n      else indexCurrentDate = false;\n    }\n\n    // add the accumlated data, and empty\n    data.push(currentAmount);\n    currentAmount = 0;\n    indexCurrentDate = true;\n  }\n\n  console.log(checkboxNoChange);\n  console.log(mainCategory);\n  console.log(data);\n\n  return data;\n}\n\nexport default createBarDataArr;\n\n/*\nReference 1\nIf type === \"month\", have final extra element for accumulating month data\n(See createStandardLabels)\nLast data is for the purpose of accumulating month data\nAll we need is looping through from 0 ~ n - 2\n*/\n\n/*\nReference 2\nfind the date of data is less or eqaul to current date\nkeep doing the same thing until the date of data is greater than curret date\nwhich means have to go to next date\n\n\"month\" and \"day\" have different validIndex\nbecause it uses different helper function to validate\n\nNote\nBoth of validIndex has to first check if filteredData[indexData] is not undefined\nIt may have\n*/\n\n/*\nReference 3\n1) if checkbox has no change which means the user want to get all category, so can directly add the price\n2) otherwise, have to make sure the category is correct\n*/\n\n/*\nReference 4\nIt's like verbose at first, but we indeed need this variable\nThe reason we need this variable is inside the for-loop and while-loop\nafter validating the data if is within the valid time range\nwe also need to check if it's the correct main and sub category\n\nsubCategory.includes(filteredData[indexData].mainCate) -> O(n) works\nIf we can know the checkboxNoChange beforehand, in other words\nthe user want to get all the sub category\nthen we don't need to do the O(n) works\n\nIf user want to get all the sub category,\nwe only need to validate the main category, and add the price of data\nBUT\nif user want to get the specift sub category,\nwe need to first validate the main category,\nand validate the sub category\nthen add the price of data\n\nNext question\nWhy we need !showLabel\nIf we really think about it, when we will specifically set showLabel to true\nONLY in the ChartPic section, we won't set it to false when it's in the small chart section\nAND\nwe only need to validate sub category when user is in the Chart section\n\n\nFinally,\n  const checkboxNoChange =\n    !showLabel ||\n    (mainCategory === \"expense\" &&\n      subCategory.length === mainCategoryData.length) ||\n    (mainCategory === \"income\" &&\n      subCategory.length === subCategoryData.length);\nThis means\n1. Do you wanna validate sub category?\n   => we don't wanna validate when we're at SmallChart section\n   => we wanna validate when we're at Chart section\n2. If you wanna validate, keep validating\n3. If you don't want to, just set this to true immediately\n*/\n"]},"metadata":{},"sourceType":"module"}