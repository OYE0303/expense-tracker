{"ast":null,"code":"import createPreAccAmount from \"./createPreAccAmount\"; // function createChartDataArr(labels, expenseData) {\n//   const finalDataArr = [];\n//   labels.forEach((label) => {\n//     const curAccAmount =\n//       createPreAccAmount(\"income\", expenseData, label) -\n//       createPreAccAmount(\"expense\", expenseData, label);\n//     finalDataArr.push(curAccAmount);\n//   });\n//   return finalDataArr;\n// }\n\nfunction createChartDataArr(labels, expenseData) {\n  const finalDataArr = [];\n  let curAccAmountExpense = 0;\n  let curAccAmountIncome = 0;\n  let expenseDataIndex = 0;\n  let labelIndex = 0;\n  let curLabelTime = Number(new Date(labels[0]));\n  const sortedData = expenseData.sort((a, b) => Number(new Date(a.time) - Number(new Date(b.time))));\n\n  while (expenseDataIndex < sortedData.length) {\n    if (labelIndex >= labels.length) break;\n    const data = sortedData[expenseDataIndex];\n\n    if (Number(new Date(data.time)) > curLabelTime) {\n      curLabelTime = Number(new Date(labels[++labelIndex]));\n      finalDataArr.push(curAccAmountIncome - curAccAmountExpense);\n    } else {\n      if (data.category === \"expense\") curAccAmountExpense += Number(data.price);else curAccAmountIncome += Number(data.price);\n      expenseDataIndex++;\n    }\n  }\n\n  if (labelIndex < labels.length) finalDataArr.push(curAccAmountIncome - curAccAmountExpense);\n  return finalDataArr;\n}\n\nfunction compareTime(data, curYear, curMonth, curDay) {\n  return data.year < curYear || data.year === curYear && data.month <= curMonth && data.day <= curDay;\n} // console.log(\n//   test(\n//     [\n//       \"2021-09-15\",\n//       \"2021-09-16\",\n//       \"2021-09-17\",\n//       \"2021-09-18\",\n//       \"2021-09-19\",\n//       \"2021-09-20\",\n//       \"2021-09-21\",\n//     ],\n//     ggg\n//   )\n// );\n\n\nexport default createChartDataArr;\n/*\nfunction createChartDataArr1(labels, expenseData) {\n  const newExpenseData = createFilteredData(labels, expenseData);\n\n  const prevTotalAccAmount =\n    createPreAccAmount(\"income\", expenseData, labels[0]) -\n    createPreAccAmount(\"expense\", expenseData, labels[0]);\n\n  const newExpenseDataExpense = newExpenseData.filter(\n    (element) => element.category === \"expense\"\n  );\n  const newExpenseDataIncome = newExpenseData.filter(\n    (element) => element.category === \"income\"\n  );\n\n  const dataArrExpense = createDataArrAccount(labels, newExpenseDataExpense);\n  const dataArrIncome = createDataArrAccount(labels, newExpenseDataIncome);\n\n  const finalDataArr = [];\n\n  dataArrExpense.forEach((expense, index) => {\n    finalDataArr.push(dataArrIncome[index] - expense + prevTotalAccAmount);\n  });\n\n  return finalDataArr;\n}\n*/\n\n/*\nfunction createDataArrAccount(labels, expensData) {\n  const data = [];\n  let indexCurrentDate = true;\n  let currentAmount = 0;\n  let indexData = 0;\n  let yearLabel, monthLabel, dayLabel, yearDate, monthData, dayData;\n\n  for (let i = 0; i < labels.length; i++) {\n    yearLabel = labels[i].slice(0, 4);\n    monthLabel = labels[i].slice(5, 7);\n    dayLabel = labels[i].slice(8);\n\n    while (indexCurrentDate) {\n      yearDate = expensData[indexData]?.time.slice(0, 4);\n      monthData = expensData[indexData]?.time.slice(5, 7);\n      dayData = expensData[indexData]?.time.slice(8);\n\n      if (\n        yearLabel === yearDate &&\n        monthLabel === monthData &&\n        dayLabel >= dayData\n      ) {\n        currentAmount += Number(expensData[indexData].price);\n        indexData++;\n      } else indexCurrentDate = false;\n    }\n\n    data.push(currentAmount);\n    indexCurrentDate = true;\n  }\n\n  return data;\n}\n\n*/","map":{"version":3,"sources":["/Users/eyo/Desktop/project-expenseTracker-main/src/Others/CreateAccountData/CreateChartDataArr.js"],"names":["createPreAccAmount","createChartDataArr","labels","expenseData","finalDataArr","curAccAmountExpense","curAccAmountIncome","expenseDataIndex","labelIndex","curLabelTime","Number","Date","sortedData","sort","a","b","time","length","data","push","category","price","compareTime","curYear","curMonth","curDay","year","month","day"],"mappings":"AAAA,OAAOA,kBAAP,MAA+B,sBAA/B,C,CAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;;AAEA,SAASC,kBAAT,CAA4BC,MAA5B,EAAoCC,WAApC,EAAiD;AAC/C,QAAMC,YAAY,GAAG,EAArB;AAEA,MAAIC,mBAAmB,GAAG,CAA1B;AACA,MAAIC,kBAAkB,GAAG,CAAzB;AACA,MAAIC,gBAAgB,GAAG,CAAvB;AACA,MAAIC,UAAU,GAAG,CAAjB;AAEA,MAAIC,YAAY,GAAGC,MAAM,CAAC,IAAIC,IAAJ,CAAST,MAAM,CAAC,CAAD,CAAf,CAAD,CAAzB;AAEA,QAAMU,UAAU,GAAGT,WAAW,CAACU,IAAZ,CAAiB,CAACC,CAAD,EAAIC,CAAJ,KAClCL,MAAM,CAAC,IAAIC,IAAJ,CAASG,CAAC,CAACE,IAAX,IAAmBN,MAAM,CAAC,IAAIC,IAAJ,CAASI,CAAC,CAACC,IAAX,CAAD,CAA1B,CADW,CAAnB;;AAIA,SAAOT,gBAAgB,GAAGK,UAAU,CAACK,MAArC,EAA6C;AAC3C,QAAIT,UAAU,IAAIN,MAAM,CAACe,MAAzB,EAAiC;AAEjC,UAAMC,IAAI,GAAGN,UAAU,CAACL,gBAAD,CAAvB;;AAEA,QAAIG,MAAM,CAAC,IAAIC,IAAJ,CAASO,IAAI,CAACF,IAAd,CAAD,CAAN,GAA8BP,YAAlC,EAAgD;AAC9CA,MAAAA,YAAY,GAAGC,MAAM,CAAC,IAAIC,IAAJ,CAAST,MAAM,CAAC,EAAEM,UAAH,CAAf,CAAD,CAArB;AACAJ,MAAAA,YAAY,CAACe,IAAb,CAAkBb,kBAAkB,GAAGD,mBAAvC;AACD,KAHD,MAGO;AACL,UAAIa,IAAI,CAACE,QAAL,KAAkB,SAAtB,EACEf,mBAAmB,IAAIK,MAAM,CAACQ,IAAI,CAACG,KAAN,CAA7B,CADF,KAEKf,kBAAkB,IAAII,MAAM,CAACQ,IAAI,CAACG,KAAN,CAA5B;AAELd,MAAAA,gBAAgB;AACjB;AACF;;AAED,MAAIC,UAAU,GAAGN,MAAM,CAACe,MAAxB,EACEb,YAAY,CAACe,IAAb,CAAkBb,kBAAkB,GAAGD,mBAAvC;AAEF,SAAOD,YAAP;AACD;;AAED,SAASkB,WAAT,CAAqBJ,IAArB,EAA2BK,OAA3B,EAAoCC,QAApC,EAA8CC,MAA9C,EAAsD;AACpD,SACEP,IAAI,CAACQ,IAAL,GAAYH,OAAZ,IACCL,IAAI,CAACQ,IAAL,KAAcH,OAAd,IAAyBL,IAAI,CAACS,KAAL,IAAcH,QAAvC,IAAmDN,IAAI,CAACU,GAAL,IAAYH,MAFlE;AAID,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,eAAexB,kBAAf;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import createPreAccAmount from \"./createPreAccAmount\";\n\n// function createChartDataArr(labels, expenseData) {\n//   const finalDataArr = [];\n\n//   labels.forEach((label) => {\n//     const curAccAmount =\n//       createPreAccAmount(\"income\", expenseData, label) -\n//       createPreAccAmount(\"expense\", expenseData, label);\n\n//     finalDataArr.push(curAccAmount);\n//   });\n\n//   return finalDataArr;\n// }\n\nfunction createChartDataArr(labels, expenseData) {\n  const finalDataArr = [];\n\n  let curAccAmountExpense = 0;\n  let curAccAmountIncome = 0;\n  let expenseDataIndex = 0;\n  let labelIndex = 0;\n\n  let curLabelTime = Number(new Date(labels[0]));\n\n  const sortedData = expenseData.sort((a, b) =>\n    Number(new Date(a.time) - Number(new Date(b.time)))\n  );\n\n  while (expenseDataIndex < sortedData.length) {\n    if (labelIndex >= labels.length) break;\n\n    const data = sortedData[expenseDataIndex];\n\n    if (Number(new Date(data.time)) > curLabelTime) {\n      curLabelTime = Number(new Date(labels[++labelIndex]));\n      finalDataArr.push(curAccAmountIncome - curAccAmountExpense);\n    } else {\n      if (data.category === \"expense\")\n        curAccAmountExpense += Number(data.price);\n      else curAccAmountIncome += Number(data.price);\n\n      expenseDataIndex++;\n    }\n  }\n\n  if (labelIndex < labels.length)\n    finalDataArr.push(curAccAmountIncome - curAccAmountExpense);\n\n  return finalDataArr;\n}\n\nfunction compareTime(data, curYear, curMonth, curDay) {\n  return (\n    data.year < curYear ||\n    (data.year === curYear && data.month <= curMonth && data.day <= curDay)\n  );\n}\n\n// console.log(\n//   test(\n//     [\n//       \"2021-09-15\",\n//       \"2021-09-16\",\n//       \"2021-09-17\",\n//       \"2021-09-18\",\n//       \"2021-09-19\",\n//       \"2021-09-20\",\n//       \"2021-09-21\",\n//     ],\n//     ggg\n//   )\n// );\n\nexport default createChartDataArr;\n\n/*\nfunction createChartDataArr1(labels, expenseData) {\n  const newExpenseData = createFilteredData(labels, expenseData);\n\n  const prevTotalAccAmount =\n    createPreAccAmount(\"income\", expenseData, labels[0]) -\n    createPreAccAmount(\"expense\", expenseData, labels[0]);\n\n  const newExpenseDataExpense = newExpenseData.filter(\n    (element) => element.category === \"expense\"\n  );\n  const newExpenseDataIncome = newExpenseData.filter(\n    (element) => element.category === \"income\"\n  );\n\n  const dataArrExpense = createDataArrAccount(labels, newExpenseDataExpense);\n  const dataArrIncome = createDataArrAccount(labels, newExpenseDataIncome);\n\n  const finalDataArr = [];\n\n  dataArrExpense.forEach((expense, index) => {\n    finalDataArr.push(dataArrIncome[index] - expense + prevTotalAccAmount);\n  });\n\n  return finalDataArr;\n}\n*/\n\n/*\nfunction createDataArrAccount(labels, expensData) {\n  const data = [];\n  let indexCurrentDate = true;\n  let currentAmount = 0;\n  let indexData = 0;\n  let yearLabel, monthLabel, dayLabel, yearDate, monthData, dayData;\n\n  for (let i = 0; i < labels.length; i++) {\n    yearLabel = labels[i].slice(0, 4);\n    monthLabel = labels[i].slice(5, 7);\n    dayLabel = labels[i].slice(8);\n\n    while (indexCurrentDate) {\n      yearDate = expensData[indexData]?.time.slice(0, 4);\n      monthData = expensData[indexData]?.time.slice(5, 7);\n      dayData = expensData[indexData]?.time.slice(8);\n\n      if (\n        yearLabel === yearDate &&\n        monthLabel === monthData &&\n        dayLabel >= dayData\n      ) {\n        currentAmount += Number(expensData[indexData].price);\n        indexData++;\n      } else indexCurrentDate = false;\n    }\n\n    data.push(currentAmount);\n    indexCurrentDate = true;\n  }\n\n  return data;\n}\n\n*/\n"]},"metadata":{},"sourceType":"module"}