{"ast":null,"code":"var _jsxFileName = \"/Users/eyo/Desktop/expense-tracker/src/components/MainContent/Calendar/CalendarTable/CalendarTable.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect, useContext, useRef } from \"react\";\nimport CreateCalendarTable from \"./CreateCalendarTable\";\nimport ExpenseDataContext from \"../../../../store/expenseData/expenseData--context\";\nimport ExpenseListModal from \"../../../UI/ExpenseListModal/ExpenseListModal\";\nimport AddDataForm from \"../../../UI/AddDataForm/AddDateForm\";\nimport BtnIcons from \"../../../UI/BtnIcons/BtnIcons\";\nimport SmallChartModal from \"../../../UI/SmallChartModal/SmallChartModal\";\nimport DataCardModal from \"../../../UI/DataCardModal/DataCardModal\";\nimport BtnIcon from \"../../../UI/BtnIcon/BtnIcon\";\nimport useAddDataForm from \"../../../../Others/Custom/useAddDataForm\";\nimport timeObj from \"../../../assets/timeObj/timeObj\";\nimport useExpenseDataList from \"../../../../Others/Custom/useExpenseDataList\";\nimport style from \"./CalendarTable.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst dateOptObj = {\n  month: \"long\"\n};\nconst {\n  TODAY\n} = timeObj;\n\nfunction CalendarTable(prop) {\n  _s();\n\n  const {\n    expenseData\n  } = useContext(ExpenseDataContext);\n  const [calendarState, setcalendarState] = useState(CreateCalendarTable(TODAY, expenseListModalToggler, expenseData));\n  const [date, setDate] = useState(new Date());\n  const [expenseListModal, setExpenseListModal] = useState(false);\n  const [addDataFormModal, addDataFormModalToggler] = useAddDataForm();\n  const [modalCard, setModalCard] = useState(false);\n  const [expenseDataList, selectedDate, setExpenseDataList] = useExpenseDataList(date, \"monthly\"); // useRef can be used to store data that should be persisted across re-renders\n\n  const skipInitialRender = useRef(false);\n  useEffect(() => {\n    // skip first render\n    if (skipInitialRender.current) {\n      const calendar = CreateCalendarTable(date, expenseListModalToggler, expenseData);\n      setcalendarState(calendar);\n    } else skipInitialRender.current = true;\n  }, [expenseData]);\n\n  function arrowBtnClickHandler(e) {\n    /*\n    Copying the new date object is vary important\n    Imagine without this\n    We set a variable called date outside the component function\n    And user modify the value whenever click the arrow btn\n     The weird thing's gonna happen after user exit the calendar page and come back again\n    the value of variable won't change back to initial value because it's outside the component function\n    For example, initial value\n    */\n    const newDate = new Date(date);\n\n    if (e.target.dataset.id === \"increase\") {\n      newDate.setMonth(newDate.getMonth() + 1);\n    } else {\n      newDate.setMonth(newDate.getMonth() - 1);\n    }\n\n    const calendar = CreateCalendarTable(newDate, expenseListModalToggler, expenseData);\n    setcalendarState(calendar);\n    setDate(newDate);\n  }\n\n  function expenseListModalToggler(e) {\n    if (expenseListModal) {\n      setExpenseListModal(false);\n    } else {\n      const date = e.target.dataset.id;\n      if (!date) return;\n      setExpenseDataList(date);\n      setExpenseListModal(true);\n    }\n  }\n\n  function modalCardToggler(e) {\n    if (modalCard) setModalCard(false);else {\n      const id = e.target.dataset.id;\n\n      if (id) {\n        setModalCard(id);\n      }\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [expenseListModal && /*#__PURE__*/_jsxDEV(ExpenseListModal, {\n      selectedDate: selectedDate,\n      expenseDataList: expenseDataList,\n      expenseListModalToggler: expenseListModalToggler,\n      addDataFormModalToggler: addDataFormModalToggler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }, this), addDataFormModal && /*#__PURE__*/_jsxDEV(AddDataForm, {\n      date: selectedDate,\n      addDataFormModalToggler: addDataFormModalToggler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 9\n    }, this), modalCard === \"chart\" && /*#__PURE__*/_jsxDEV(SmallChartModal, {\n      type: \"month\",\n      modalCardToggler: modalCardToggler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 9\n    }, this), modalCard === \"info\" && /*#__PURE__*/_jsxDEV(DataCardModal, {\n      type: \"month\",\n      modalCardToggler: modalCardToggler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: style[\"icon__container\"],\n      children: /*#__PURE__*/_jsxDEV(BtnIcons, {\n        onClick: modalCardToggler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: style[\"monthly__container\"],\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: style[\"monthly__month\"],\n        children: [/*#__PURE__*/_jsxDEV(BtnIcon, {\n          text: \"last month\",\n          onClick: arrowBtnClickHandler,\n          classBtn: style.btn,\n          classText: style[\"btn__text\"],\n          dataID: \"decrease\",\n          children: \"<\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: style[\"monthly__title\"],\n          children: [/*#__PURE__*/_jsxDEV(\"h6\", {\n            children: new Intl.DateTimeFormat(\"en-US\", dateOptObj).format(date)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"h6\", {\n            children: date.getFullYear()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(BtnIcon, {\n          text: \"next month\",\n          onClick: arrowBtnClickHandler,\n          classBtn: style.btn,\n          classText: style[\"btn__text\"],\n          dataID: \"increase\",\n          children: \">\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: style[\"monthly__week\"],\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Sun\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Mon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Tue\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Wed\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Thu\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Fri\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Sat\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: style[\"monthly__days\"],\n        children: calendarState\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(CalendarTable, \"kFz4HavY/sqjIO+bn4yKnCE1BhY=\", false, function () {\n  return [useAddDataForm, useExpenseDataList];\n});\n\n_c = CalendarTable;\nexport default CalendarTable;\n/*\n  // animation for month\n  useEffect(() => {\n    // if (index === 0) {\n    //   index++;\n    //   return;\n    // }\n\n    setAnimationMonth(true);\n\n    const time = setTimeout(() => {\n      setAnimationMonth(false);\n    }, 300);\n\n    return function cleanUp() {\n      clearTimeout(time);\n    };\n  }, [month]);\n\n  // animation for year\n  useEffect(() => {\n    // if (index1 === 0) {\n    //   index1++;\n    //   return;Ad\n    // }\n\n    setAnimationMonthYear(true);\n\n    const time = setTimeout(() => {\n      setAnimationMonthYear(false);\n    }, 300);\n\n    return function cleanUp() {\n      clearTimeout(time);\n    };\n  }, [year]);\n\n\n  */\n// const test = new Date();\n// test.setFullYear(date.getFullYear() - 1);\n// test.setMonth(11);\n// // test.setMonth(0);\n// console.log(test);\n// const initialObj = {\n//   calendar: createCalendarTable(date),\n//   month: new Intl.DateTimeFormat(\"en-US\", dateOptObj).format(date),\n//   year: date.getFullYear(),\n// };\n// function reducer(state, action) {\n//   switch (action.type) {\n//     case \"INCREMENT\": {\n//       //   if (state.month === \"December\") {\n//       //     date.setFullYear(date.getFullYear() + 1);\n//       //     date.setMonth(0);\n//       //   } else {\n//       date.setMonth(date.getMonth() + 1);\n//       //   }\n//       const month = new Intl.DateTimeFormat(\"en-US\", dateOptObj).format(date);\n//       //   console.log(month);\n//       const calendar = [];\n//       const year = date.getFullYear();\n//       //   console.log(month, year);\n//       return {\n//         calendar,\n//         month,\n//         year,\n//       };\n//     }\n//     case \"DECREMENT\": {\n//       if (state.month === \"January\") {\n//         date.setFullYear(date.getFullYear() - 1);\n//         date.setMonth(11);\n//       } else date.setMonth(date.getMonth() - 1);\n//       const calendar = createCalendarTable(date);\n//       const month = new Intl.DateTimeFormat(\"en-US\", dateOptObj).format(date);\n//       const year = date.getFullYear();\n//       return {\n//         calendar,\n//         month,\n//         year,\n//       };\n//     }\n//     default: {\n//       return state;\n//     }\n//   }\n// }\n\nvar _c;\n\n$RefreshReg$(_c, \"CalendarTable\");","map":{"version":3,"sources":["/Users/eyo/Desktop/expense-tracker/src/components/MainContent/Calendar/CalendarTable/CalendarTable.js"],"names":["useState","useEffect","useContext","useRef","CreateCalendarTable","ExpenseDataContext","ExpenseListModal","AddDataForm","BtnIcons","SmallChartModal","DataCardModal","BtnIcon","useAddDataForm","timeObj","useExpenseDataList","style","dateOptObj","month","TODAY","CalendarTable","prop","expenseData","calendarState","setcalendarState","expenseListModalToggler","date","setDate","Date","expenseListModal","setExpenseListModal","addDataFormModal","addDataFormModalToggler","modalCard","setModalCard","expenseDataList","selectedDate","setExpenseDataList","skipInitialRender","current","calendar","arrowBtnClickHandler","e","newDate","target","dataset","id","setMonth","getMonth","modalCardToggler","btn","Intl","DateTimeFormat","format","getFullYear"],"mappings":"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","sourcesContent":["import { useState, useEffect, useContext, useRef } from \"react\";\nimport CreateCalendarTable from \"./CreateCalendarTable\";\nimport ExpenseDataContext from \"../../../../store/expenseData/expenseData--context\";\nimport ExpenseListModal from \"../../../UI/ExpenseListModal/ExpenseListModal\";\nimport AddDataForm from \"../../../UI/AddDataForm/AddDateForm\";\nimport BtnIcons from \"../../../UI/BtnIcons/BtnIcons\";\nimport SmallChartModal from \"../../../UI/SmallChartModal/SmallChartModal\";\nimport DataCardModal from \"../../../UI/DataCardModal/DataCardModal\";\nimport BtnIcon from \"../../../UI/BtnIcon/BtnIcon\";\nimport useAddDataForm from \"../../../../Others/Custom/useAddDataForm\";\nimport timeObj from \"../../../assets/timeObj/timeObj\";\nimport useExpenseDataList from \"../../../../Others/Custom/useExpenseDataList\";\nimport style from \"./CalendarTable.module.css\";\n\nconst dateOptObj = { month: \"long\" };\nconst { TODAY } = timeObj;\n\nfunction CalendarTable(prop) {\n  const { expenseData } = useContext(ExpenseDataContext);\n  const [calendarState, setcalendarState] = useState(\n    CreateCalendarTable(TODAY, expenseListModalToggler, expenseData)\n  );\n  const [date, setDate] = useState(new Date());\n  const [expenseListModal, setExpenseListModal] = useState(false);\n  const [addDataFormModal, addDataFormModalToggler] = useAddDataForm();\n  const [modalCard, setModalCard] = useState(false);\n  const [expenseDataList, selectedDate, setExpenseDataList] =\n    useExpenseDataList(date, \"monthly\");\n  // useRef can be used to store data that should be persisted across re-renders\n  const skipInitialRender = useRef(false);\n\n  useEffect(() => {\n    // skip first render\n    if (skipInitialRender.current) {\n      const calendar = CreateCalendarTable(\n        date,\n        expenseListModalToggler,\n        expenseData\n      );\n      setcalendarState(calendar);\n    } else skipInitialRender.current = true;\n  }, [expenseData]);\n\n  function arrowBtnClickHandler(e) {\n    /*\n    Copying the new date object is vary important\n    Imagine without this\n    We set a variable called date outside the component function\n    And user modify the value whenever click the arrow btn\n\n    The weird thing's gonna happen after user exit the calendar page and come back again\n    the value of variable won't change back to initial value because it's outside the component function\n    For example, initial value\n    */\n    const newDate = new Date(date);\n    if (e.target.dataset.id === \"increase\") {\n      newDate.setMonth(newDate.getMonth() + 1);\n    } else {\n      newDate.setMonth(newDate.getMonth() - 1);\n    }\n\n    const calendar = CreateCalendarTable(\n      newDate,\n      expenseListModalToggler,\n      expenseData\n    );\n    setcalendarState(calendar);\n    setDate(newDate);\n  }\n\n  function expenseListModalToggler(e) {\n    if (expenseListModal) {\n      setExpenseListModal(false);\n    } else {\n      const date = e.target.dataset.id;\n\n      if (!date) return;\n      setExpenseDataList(date);\n      setExpenseListModal(true);\n    }\n  }\n\n  function modalCardToggler(e) {\n    if (modalCard) setModalCard(false);\n    else {\n      const id = e.target.dataset.id;\n\n      if (id) {\n        setModalCard(id);\n      }\n    }\n  }\n\n  return (\n    <>\n      {expenseListModal && (\n        <ExpenseListModal\n          selectedDate={selectedDate}\n          expenseDataList={expenseDataList}\n          expenseListModalToggler={expenseListModalToggler}\n          addDataFormModalToggler={addDataFormModalToggler}\n        />\n      )}\n      {addDataFormModal && (\n        <AddDataForm\n          date={selectedDate}\n          addDataFormModalToggler={addDataFormModalToggler}\n        />\n      )}\n      {modalCard === \"chart\" && (\n        <SmallChartModal type=\"month\" modalCardToggler={modalCardToggler} />\n      )}\n      {modalCard === \"info\" && (\n        <DataCardModal type=\"month\" modalCardToggler={modalCardToggler} />\n      )}\n\n      <div className={style[\"icon__container\"]}>\n        <BtnIcons onClick={modalCardToggler} />\n      </div>\n      <div className={style[\"monthly__container\"]}>\n        <div className={style[\"monthly__month\"]}>\n          <BtnIcon\n            text=\"last month\"\n            onClick={arrowBtnClickHandler}\n            classBtn={style.btn}\n            classText={style[\"btn__text\"]}\n            dataID=\"decrease\"\n          >\n            {\"<\"}\n          </BtnIcon>\n\n          <div className={style[\"monthly__title\"]}>\n            <h6>{new Intl.DateTimeFormat(\"en-US\", dateOptObj).format(date)}</h6>\n            <h6>{date.getFullYear()}</h6>\n          </div>\n          <BtnIcon\n            text=\"next month\"\n            onClick={arrowBtnClickHandler}\n            classBtn={style.btn}\n            classText={style[\"btn__text\"]}\n            dataID=\"increase\"\n          >\n            {\">\"}\n          </BtnIcon>\n        </div>\n        <div className={style[\"monthly__week\"]}>\n          <div>Sun</div>\n          <div>Mon</div>\n          <div>Tue</div>\n          <div>Wed</div>\n          <div>Thu</div>\n          <div>Fri</div>\n          <div>Sat</div>\n        </div>\n        <div className={style[\"monthly__days\"]}>{calendarState}</div>\n      </div>\n    </>\n  );\n}\nexport default CalendarTable;\n\n/*\n  // animation for month\n  useEffect(() => {\n    // if (index === 0) {\n    //   index++;\n    //   return;\n    // }\n\n    setAnimationMonth(true);\n\n    const time = setTimeout(() => {\n      setAnimationMonth(false);\n    }, 300);\n\n    return function cleanUp() {\n      clearTimeout(time);\n    };\n  }, [month]);\n\n  // animation for year\n  useEffect(() => {\n    // if (index1 === 0) {\n    //   index1++;\n    //   return;Ad\n    // }\n\n    setAnimationMonthYear(true);\n\n    const time = setTimeout(() => {\n      setAnimationMonthYear(false);\n    }, 300);\n\n    return function cleanUp() {\n      clearTimeout(time);\n    };\n  }, [year]);\n\n\n  */\n\n// const test = new Date();\n// test.setFullYear(date.getFullYear() - 1);\n// test.setMonth(11);\n// // test.setMonth(0);\n\n// console.log(test);\n\n// const initialObj = {\n//   calendar: createCalendarTable(date),\n//   month: new Intl.DateTimeFormat(\"en-US\", dateOptObj).format(date),\n//   year: date.getFullYear(),\n// };\n\n// function reducer(state, action) {\n//   switch (action.type) {\n//     case \"INCREMENT\": {\n//       //   if (state.month === \"December\") {\n//       //     date.setFullYear(date.getFullYear() + 1);\n//       //     date.setMonth(0);\n//       //   } else {\n//       date.setMonth(date.getMonth() + 1);\n//       //   }\n\n//       const month = new Intl.DateTimeFormat(\"en-US\", dateOptObj).format(date);\n//       //   console.log(month);\n//       const calendar = [];\n//       const year = date.getFullYear();\n\n//       //   console.log(month, year);\n\n//       return {\n//         calendar,\n//         month,\n//         year,\n//       };\n//     }\n\n//     case \"DECREMENT\": {\n//       if (state.month === \"January\") {\n//         date.setFullYear(date.getFullYear() - 1);\n//         date.setMonth(11);\n//       } else date.setMonth(date.getMonth() - 1);\n\n//       const calendar = createCalendarTable(date);\n//       const month = new Intl.DateTimeFormat(\"en-US\", dateOptObj).format(date);\n//       const year = date.getFullYear();\n\n//       return {\n//         calendar,\n//         month,\n//         year,\n//       };\n//     }\n\n//     default: {\n//       return state;\n//     }\n//   }\n// }\n"]},"metadata":{},"sourceType":"module"}