{"ast":null,"code":"var _jsxFileName = \"/Users/eyo/Desktop/expense-tracker/src/components/UI/AddDataForm/AddDateForm.js\",\n    _s = $RefreshSig$();\n\nimport { useContext, useReducer } from \"react\";\nimport EditModalContext from \"../../../store/editModal/editModal--context\";\nimport Modal from \"../Modal/Modal\";\nimport HorizontalLine from \"../HorizontalLine/HorizontalLine\";\nimport ExpenseDataContext from \"../../../store/expenseData/expenseData--context\";\nimport CategoryContext from \"../../../store/category/category--context\";\nimport createDateStringFormat from \"../../../Others/CreateDateStringFormat/CreateDateStringFormat\";\nimport FormBtn from \"./FormBtn\";\nimport FormPrice from \"./FormPrice\";\nimport FormDate from \"./FormDate\";\nimport FormDescription from \"./FormDescription\";\nimport FormSubCategory from \"./FormSubCategory\";\nimport FormMainCategory from \"./FormMainCategory\";\nimport FormTitle from \"./FormTitle\";\nimport useAddDataForm from \"../../../Others/Custom/useAddDataForm\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport style from \"./AddDataForm.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case \"CATEGORY\":\n      {\n        let mainCategoryArr, subCategoryArr;\n        const categoryExpenseKeyArr = Object.keys(state.categoryExpense);\n        const categoryIncomeKeyArr = Object.keys(state.categoryIncome);\n        /*\n        Note that do NOT directly hard code \"food\" or \"salary\"\n        because user may add, remove, edit main and sub category\n        what we want is showing the first main category, and it's sub category\n        */\n\n        if (action.value === \"expense\") {\n          mainCategoryArr = categoryExpenseKeyArr;\n          subCategoryArr = state.categoryExpense[categoryExpenseKeyArr[0]];\n        } else {\n          mainCategoryArr = categoryIncomeKeyArr;\n          subCategoryArr = state.categoryIncome[categoryIncomeKeyArr[0]];\n        }\n\n        return { ...state,\n          category: action.value,\n          mainCategoryArr,\n          subCategoryArr,\n          mainCategory: action.value === \"expense\" ? Object.keys(state.categoryExpense)[0] : Object.keys(state.categoryIncome)[0],\n          subCategory: action.value === \"expense\" ? state.categoryExpense[categoryExpenseKeyArr[0]][0] : state.categoryIncome[categoryIncomeKeyArr[0]][0],\n          icon: state.iconObj[action.value === \"expense\" ? Object.keys(state.categoryExpense)[0] : Object.keys(state.categoryIncome)[0]]\n        };\n      }\n\n    case \"MAIN_CATEGORY\":\n      {\n        let subCategoryArr;\n        if (state.category === \"expense\") subCategoryArr = state.categoryExpense[action.value];else subCategoryArr = state.categoryIncome[action.value];\n        return { ...state,\n          mainCategory: action.value,\n          subCategoryArr,\n          subCategory: subCategoryArr[0],\n          icon: state.iconObj[action.value]\n        };\n      }\n\n    case \"SUB_CATEGORY\":\n      {\n        return { ...state,\n          subCategory: action.value\n        };\n      }\n\n    case \"DESCRIPTION\":\n      {\n        return { ...state,\n          description: action.value\n        };\n      }\n\n    case \"DATE\":\n      {\n        return { ...state,\n          date: action.value\n        };\n      }\n\n    case \"PRICE\":\n      {\n        let valid = false;\n        if (action.value.trim().length > 0 && !Object.is(-0, Number(action.value)) && Number(action.value) >= 0) valid = true;\n        return { ...state,\n          isValid: valid,\n          price: action.value\n        };\n      }\n\n    case \"PRICE--TOUCH\":\n      {\n        // it will always be true once user have selected or touched the price input\n        return { ...state,\n          priceTouch: true\n        };\n      }\n\n    default:\n      {\n        return state;\n      }\n  }\n}\n\nfunction AddDataForm(props) {\n  _s();\n\n  const {\n    addExpenseData,\n    editExpenseData\n  } = useContext(ExpenseDataContext);\n  const [, setEditModal] = useContext(EditModalContext);\n  const {\n    categoryExpense,\n    categoryIncome,\n    iconObj\n  } = useContext(CategoryContext);\n  const mainCateExpenseArr = Object.keys(categoryExpense);\n  const mainCateIncomeArr = Object.keys(categoryIncome);\n  const {\n    categoryChangeHandler,\n    mainCategoryChangeHandler,\n    subCategoryChangeHandler,\n    descriptionChangeHandler,\n    dateChangeHandler,\n    priceChangeHandler,\n    inputPriceTouchHandler,\n    cancelClickHandler,\n    formSubmitHandler,\n    addDataFormModal,\n    formData\n  } = useAddDataForm(mainCateExpenseArr, mainCateIncomeArr, categoryExpense, categoryIncome, iconObj, setEditModal, initialObj);\n  /*\n  the data storing in expenseDataProvider do NOT have\n  mainCategoryArr, subCategoryArr categoryExpense, categoryIncome, iconObj, priceTouch\n  but we need this data in the form, so add them\n  */\n  // let initialObj;\n  // if (props.initialObj)\n  //   initialObj = {\n  //     ...props.initialObj,\n  //     mainCategoryArr:\n  //       props.initialObj.category === \"expense\"\n  //         ? mainCateExpenseArr\n  //         : mainCateIncomeArr,\n  //     subCategoryArr:\n  //       props.initialObj.category === \"expense\"\n  //         ? categoryExpense[props.initialObj.mainCategory]\n  //         : categoryIncome[props.initialObj.mainCategory],\n  //     categoryExpense,\n  //     categoryIncome,\n  //     iconObj,\n  //     priceTouch: true,\n  //   };\n  // else\n  //   initialObj = {\n  //     category: \"expense\",\n  //     mainCategoryArr: mainCateExpenseArr,\n  //     subCategoryArr: categoryExpense[mainCateExpenseArr[0]],\n  //     mainCategory: mainCateExpenseArr[0],\n  //     subCategory: categoryExpense[mainCateExpenseArr[0]][0],\n  //     date:\n  //       props.date === undefined\n  //         ? createDateStringFormat(new Date())\n  //         : createDateStringFormat(new Date(props.date)),\n  //     description: \"\",\n  //     price: \"\",\n  //     priceTouch: false,\n  //     icon: iconObj[Object.keys(categoryExpense)[0]],\n  //     isValid: false,\n  //     iconObj,\n  //     categoryExpense,\n  //     categoryIncome,\n  //   };\n  // const [formData, formDataDispatch] = useReducer(reducer, initialObj);\n  // function categoryChangeHandler(e) {\n  //   formDataDispatch({ type: \"CATEGORY\", value: e.target.value });\n  // }\n  // function mainCategoryChangeHandler(e) {\n  //   formDataDispatch({\n  //     type: \"MAIN_CATEGORY\",\n  //     value: e.target.value,\n  //   });\n  // }\n  // function subCategoryChangeHandler(e) {\n  //   formDataDispatch({\n  //     type: \"SUB_CATEGORY\",\n  //     value: e.target.value,\n  //   });\n  // }\n  // function descriptionChangeHandler(e) {\n  //   formDataDispatch({\n  //     type: \"DESCRIPTION\",\n  //     value: e.target.value,\n  //   });\n  // }\n  // function dateChangeHandler(e) {\n  //   formDataDispatch({\n  //     type: \"DATE\",\n  //     value: e.target.value,\n  //   });\n  // }\n  // function priceChangeHandler(e) {\n  //   formDataDispatch({\n  //     type: \"PRICE\",\n  //     value: e.target.value,\n  //   });\n  // }\n  // function inputPriceTouchHandler() {\n  //   // it will always be true until user select or touch the price input\n  //   formDataDispatch({\n  //     type: \"PRICE--TOUCH\",\n  //   });\n  // }\n  // function cancelClickHandler() {\n  //   // close the form from home\n  //   if (props.closeFormHandlerFromHome) props.closeFormHandlerFromHome();\n  //   // close from calendar\n  //   if (props.closeAddDataFormHandlerFromCalendar)\n  //     props.closeAddDataFormHandlerFromCalendar();\n  //   // close from expense item\n  //   if (props.closeAddDataFormHandlerExpenseItem)\n  //     props.closeAddDataFormHandlerExpenseItem();\n  // }\n  // function formSubmitHandler(e) {\n  //   e.preventDefault();\n  //   const newFormData = {\n  //     id: props.initialObj ? props.initialObj.id : uuidv4(),\n  //     category: formData.category,\n  //     mainCate: formData.mainCategory,\n  //     subCate: formData.subCategory,\n  //     time: formData.date,\n  //     description: formData.description,\n  //     price: formData.price,\n  //     year: formData.date.slice(0, 4),\n  //     month: formData.date.slice(5, 7),\n  //     day: formData.date.slice(8, 10),\n  //   };\n  //   //////////////////////////////////////////////////\n  //   // add new data or edited old data\n  //   // if props.initialObj exist, it means it's editing the old data\n  //   if (props.initialObj) editExpenseData(newFormData);\n  //   else addExpenseData(newFormData);\n  //   //////////////////////////////////////////////////\n  //   // close the form from Home\n  //   if (props.closeFormHandlerFromHome) props.closeFormHandlerFromHome();\n  //   // close from Calendar\n  //   if (props.closeAddDataFormHandlerFromCalendar)\n  //     props.closeAddDataFormHandlerFromCalendar();\n  //   // close from expense item\n  //   if (props.closeAddDataFormHandlerExpenseItem) {\n  //     props.closeAddDataFormHandlerExpenseItem();\n  //     // edit successfully\n  //     setEditModal(true);\n  //   }\n  // }\n\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    classModal: style.modal,\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: formSubmitHandler,\n      className: style.form,\n      children: [/*#__PURE__*/_jsxDEV(FormTitle, {\n        classNameContainer: style[\"title__container\"],\n        classNameInput: style.input,\n        classNameExpense: style.expense,\n        classNameIncome: style.income,\n        classNameCheck: style.check,\n        classNameTitle: style.title,\n        category: formData.category,\n        categoryChangeHandler: categoryChangeHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(HorizontalLine, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: style[\"form__container\"],\n        children: [/*#__PURE__*/_jsxDEV(FormMainCategory, {\n          classNameLabel: style.label,\n          classNameIcon: style.icon,\n          classNameInput: style.input,\n          mainCategory: formData.mainCategory,\n          icon: formData.icon,\n          mainCategoryChangeHandler: mainCategoryChangeHandler,\n          mainCategoryArr: formData.mainCategoryArr\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 300,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FormSubCategory, {\n          classNameLabel: style.label,\n          classNameInput: style.input,\n          subCategoryChangeHandler: subCategoryChangeHandler,\n          subCategory: formData.subCategory,\n          subCategoryArr: formData.subCategoryArr\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 310,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FormDescription, {\n          classNameLabel: style.label,\n          classNameInput: style.input,\n          description: formData.description,\n          descriptionChangeHandler: descriptionChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 318,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FormDate, {\n          classNameLabel: style.label,\n          classNameInput: style.input,\n          date: formData.date,\n          dateChangeHandler: dateChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 325,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FormPrice, {\n          classNameContainer: style[\"container--last\"],\n          classNameLabel: style.label,\n          classNameInput: style.input,\n          classNameInputNonValid: style[\"input--nonValid\"],\n          classNameWarn: style.warning,\n          classNameWarnShow: style[\"warning--show\"],\n          price: formData.price,\n          priceTouch: formData.priceTouch,\n          isValid: !formData.isValid,\n          priceChangeHandler: priceChangeHandler,\n          inputPriceTouchHandler: inputPriceTouchHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 332,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FormBtn, {\n          classNameContainer: `${style[\"btn__container\"]} `,\n          classNameCancel: `${style.btn} ${style[\"btn--isValid\"]}`,\n          cancelClickHandler: cancelClickHandler,\n          classNameAdd: formData.isValid ? `${style[\"btn--isValid\"]} ${style.btn}` : `${style.btn}`,\n          isValid: !formData.isValid,\n          initialObj: props.initialObj\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 346,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 285,\n    columnNumber: 5\n  }, this);\n}\n\n_s(AddDataForm, \"rbzVhZUFVPpH+Z6jl2yQKdDMYrc=\", false, function () {\n  return [useAddDataForm];\n});\n\n_c = AddDataForm;\nexport default AddDataForm;\n/*\n  <div className={style[\"title__container\"]}>\n          <InputRadio\n            classInput={style.input}\n            classCheck={`${style.expense} ${style.check}`}\n            classLabel={style.title}\n            label=\"expense\"\n            name=\"title\"\n            value=\"expense\"\n            onChange={categoryChangeHandler}\n            checked={formData.category === \"expense\"}\n          />\n          <InputRadio\n            classInput={style.input}\n            classCheck={`${style.income} ${style.check}`}\n            classLabel={style.title}\n            label=\"income\"\n            name=\"title\"\n            value=\"income\"\n            onChange={categoryChangeHandler}\n            checked={formData.category === \"income\"}\n          />\n        </div>\n\n\n          <div className={style[\"container\"]}>\n            <label className={style.label}>\n              main category\n              <div className={style.icon}>{formData.icon}</div>\n            </label>\n            <select\n              value={formData.mainCategory}\n              onChange={mainCategoryChangeHandler}\n              className={style.input}\n              type=\"select\"\n            >\n              {formData.mainCategoryArr.map((element) => (\n                <option value={element} key={element}>\n                  {element}\n                </option>\n              ))}\n            </select>\n          </div>\n*/\n\n{\n  /* <div className={style[\"container\"]}>\n            <label className={style.label}>sub category</label>\n             <select\n              value={formData.subCategory}\n              onChange={subCategoryChangeHandler}\n              className={style.input}\n              type=\"select\"\n            >\n              {formData.subCategoryArr.map((element) => (\n                <option value={element} key={element}>\n                  {element}\n                </option>\n              ))}\n            </select>\n          </div> */\n}\n{\n  /* <div className={style[\"container\"]}>\n            <label className={style.label}>description (optional)</label>\n            <input\n              value={formData.description}\n              onChange={descriptionChangeHandler}\n              className={style.input}\n              type=\"text\"\n            ></input>\n          </div> */\n}\n{\n  /* <div className={style[\"container\"]}>\n            <label className={style.label}>date</label>\n            <input\n              value={formData.date}\n              className={style.input}\n              type=\"date\"\n              onChange={dateChangeHandler}\n            ></input>\n          </div> */\n}\n{\n  /* <div className={`${style[\"container\"]} ${style[\"container--last\"]}`}>\n            <label className={style.label}>price *</label>\n            <input\n              onChange={priceChangeHandler}\n              className={style.input}\n              type=\"number\"\n              value={formData.price}\n            ></input>\n          </div> */\n}\n{\n  /* <div className={`${style[\"btn__container\"]} `}>\n            <Button\n              type=\"button\"\n              className={`${style.btn} ${style[\"btn--isValid\"]}`}\n              onClick={cancelClickHandler}\n            >\n              cancel\n            </Button>\n            <Button\n              type=\"submit\"\n              className={\n                formData.isValid\n                  ? `${style[\"btn--isValid\"]} ${style.btn}`\n                  : `${style.btn}`\n              }\n              disabled={formData.isValid}\n            >\n              {props.initialObj ? \"edit\" : \"add\"}\n            </Button>\n          </div> */\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"AddDataForm\");","map":{"version":3,"sources":["/Users/eyo/Desktop/expense-tracker/src/components/UI/AddDataForm/AddDateForm.js"],"names":["useContext","useReducer","EditModalContext","Modal","HorizontalLine","ExpenseDataContext","CategoryContext","createDateStringFormat","FormBtn","FormPrice","FormDate","FormDescription","FormSubCategory","FormMainCategory","FormTitle","useAddDataForm","v4","uuidv4","style","reducer","state","action","type","mainCategoryArr","subCategoryArr","categoryExpenseKeyArr","Object","keys","categoryExpense","categoryIncomeKeyArr","categoryIncome","value","category","mainCategory","subCategory","icon","iconObj","description","date","valid","trim","length","is","Number","isValid","price","priceTouch","AddDataForm","props","addExpenseData","editExpenseData","setEditModal","mainCateExpenseArr","mainCateIncomeArr","categoryChangeHandler","mainCategoryChangeHandler","subCategoryChangeHandler","descriptionChangeHandler","dateChangeHandler","priceChangeHandler","inputPriceTouchHandler","cancelClickHandler","formSubmitHandler","addDataFormModal","formData","initialObj","modal","form","input","expense","income","check","title","label","warning","btn"],"mappings":";;;AAAA,SAASA,UAAT,EAAqBC,UAArB,QAAuC,OAAvC;AACA,OAAOC,gBAAP,MAA6B,6CAA7B;AACA,OAAOC,KAAP,MAAkB,gBAAlB;AACA,OAAOC,cAAP,MAA2B,kCAA3B;AACA,OAAOC,kBAAP,MAA+B,iDAA/B;AACA,OAAOC,eAAP,MAA4B,2CAA5B;AACA,OAAOC,sBAAP,MAAmC,+DAAnC;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,cAAP,MAA2B,uCAA3B;AACA,SAASC,EAAE,IAAIC,MAAf,QAA6B,MAA7B;AACA,OAAOC,KAAP,MAAkB,0BAAlB;;;AAEA,SAASC,OAAT,CAAiBC,KAAjB,EAAwBC,MAAxB,EAAgC;AAC9B,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,UAAL;AAAiB;AACf,YAAIC,eAAJ,EAAqBC,cAArB;AACA,cAAMC,qBAAqB,GAAGC,MAAM,CAACC,IAAP,CAAYP,KAAK,CAACQ,eAAlB,CAA9B;AACA,cAAMC,oBAAoB,GAAGH,MAAM,CAACC,IAAP,CAAYP,KAAK,CAACU,cAAlB,CAA7B;AAEA;AACN;AACA;AACA;AACA;;AACM,YAAIT,MAAM,CAACU,KAAP,KAAiB,SAArB,EAAgC;AAC9BR,UAAAA,eAAe,GAAGE,qBAAlB;AACAD,UAAAA,cAAc,GAAGJ,KAAK,CAACQ,eAAN,CAAsBH,qBAAqB,CAAC,CAAD,CAA3C,CAAjB;AACD,SAHD,MAGO;AACLF,UAAAA,eAAe,GAAGM,oBAAlB;AACAL,UAAAA,cAAc,GAAGJ,KAAK,CAACU,cAAN,CAAqBD,oBAAoB,CAAC,CAAD,CAAzC,CAAjB;AACD;;AAED,eAAO,EACL,GAAGT,KADE;AAELY,UAAAA,QAAQ,EAAEX,MAAM,CAACU,KAFZ;AAGLR,UAAAA,eAHK;AAILC,UAAAA,cAJK;AAKLS,UAAAA,YAAY,EACVZ,MAAM,CAACU,KAAP,KAAiB,SAAjB,GACIL,MAAM,CAACC,IAAP,CAAYP,KAAK,CAACQ,eAAlB,EAAmC,CAAnC,CADJ,GAEIF,MAAM,CAACC,IAAP,CAAYP,KAAK,CAACU,cAAlB,EAAkC,CAAlC,CARD;AASLI,UAAAA,WAAW,EACTb,MAAM,CAACU,KAAP,KAAiB,SAAjB,GACIX,KAAK,CAACQ,eAAN,CAAsBH,qBAAqB,CAAC,CAAD,CAA3C,EAAgD,CAAhD,CADJ,GAEIL,KAAK,CAACU,cAAN,CAAqBD,oBAAoB,CAAC,CAAD,CAAzC,EAA8C,CAA9C,CAZD;AAaLM,UAAAA,IAAI,EAAEf,KAAK,CAACgB,OAAN,CACJf,MAAM,CAACU,KAAP,KAAiB,SAAjB,GACIL,MAAM,CAACC,IAAP,CAAYP,KAAK,CAACQ,eAAlB,EAAmC,CAAnC,CADJ,GAEIF,MAAM,CAACC,IAAP,CAAYP,KAAK,CAACU,cAAlB,EAAkC,CAAlC,CAHA;AAbD,SAAP;AAmBD;;AAED,SAAK,eAAL;AAAsB;AACpB,YAAIN,cAAJ;AAEA,YAAIJ,KAAK,CAACY,QAAN,KAAmB,SAAvB,EACER,cAAc,GAAGJ,KAAK,CAACQ,eAAN,CAAsBP,MAAM,CAACU,KAA7B,CAAjB,CADF,KAEKP,cAAc,GAAGJ,KAAK,CAACU,cAAN,CAAqBT,MAAM,CAACU,KAA5B,CAAjB;AAEL,eAAO,EACL,GAAGX,KADE;AAELa,UAAAA,YAAY,EAAEZ,MAAM,CAACU,KAFhB;AAGLP,UAAAA,cAHK;AAILU,UAAAA,WAAW,EAAEV,cAAc,CAAC,CAAD,CAJtB;AAKLW,UAAAA,IAAI,EAAEf,KAAK,CAACgB,OAAN,CAAcf,MAAM,CAACU,KAArB;AALD,SAAP;AAOD;;AAED,SAAK,cAAL;AAAqB;AACnB,eAAO,EAAE,GAAGX,KAAL;AAAYc,UAAAA,WAAW,EAAEb,MAAM,CAACU;AAAhC,SAAP;AACD;;AAED,SAAK,aAAL;AAAoB;AAClB,eAAO,EAAE,GAAGX,KAAL;AAAYiB,UAAAA,WAAW,EAAEhB,MAAM,CAACU;AAAhC,SAAP;AACD;;AAED,SAAK,MAAL;AAAa;AACX,eAAO,EAAE,GAAGX,KAAL;AAAYkB,UAAAA,IAAI,EAAEjB,MAAM,CAACU;AAAzB,SAAP;AACD;;AAED,SAAK,OAAL;AAAc;AACZ,YAAIQ,KAAK,GAAG,KAAZ;AACA,YACElB,MAAM,CAACU,KAAP,CAAaS,IAAb,GAAoBC,MAApB,GAA6B,CAA7B,IACA,CAACf,MAAM,CAACgB,EAAP,CAAU,CAAC,CAAX,EAAcC,MAAM,CAACtB,MAAM,CAACU,KAAR,CAApB,CADD,IAEAY,MAAM,CAACtB,MAAM,CAACU,KAAR,CAAN,IAAwB,CAH1B,EAKEQ,KAAK,GAAG,IAAR;AAEF,eAAO,EAAE,GAAGnB,KAAL;AAAYwB,UAAAA,OAAO,EAAEL,KAArB;AAA4BM,UAAAA,KAAK,EAAExB,MAAM,CAACU;AAA1C,SAAP;AACD;;AAED,SAAK,cAAL;AAAqB;AACnB;AACA,eAAO,EAAE,GAAGX,KAAL;AAAY0B,UAAAA,UAAU,EAAE;AAAxB,SAAP;AACD;;AAED;AAAS;AACP,eAAO1B,KAAP;AACD;AAvFH;AAyFD;;AAED,SAAS2B,WAAT,CAAqBC,KAArB,EAA4B;AAAA;;AAC1B,QAAM;AAAEC,IAAAA,cAAF;AAAkBC,IAAAA;AAAlB,MAAsClD,UAAU,CAACK,kBAAD,CAAtD;AACA,QAAM,GAAG8C,YAAH,IAAmBnD,UAAU,CAACE,gBAAD,CAAnC;AACA,QAAM;AAAE0B,IAAAA,eAAF;AAAmBE,IAAAA,cAAnB;AAAmCM,IAAAA;AAAnC,MACJpC,UAAU,CAACM,eAAD,CADZ;AAGA,QAAM8C,kBAAkB,GAAG1B,MAAM,CAACC,IAAP,CAAYC,eAAZ,CAA3B;AACA,QAAMyB,iBAAiB,GAAG3B,MAAM,CAACC,IAAP,CAAYG,cAAZ,CAA1B;AACA,QAAM;AACJwB,IAAAA,qBADI;AAEJC,IAAAA,yBAFI;AAGJC,IAAAA,wBAHI;AAIJC,IAAAA,wBAJI;AAKJC,IAAAA,iBALI;AAMJC,IAAAA,kBANI;AAOJC,IAAAA,sBAPI;AAQJC,IAAAA,kBARI;AASJC,IAAAA,iBATI;AAUJC,IAAAA,gBAVI;AAWJC,IAAAA;AAXI,MAYFjD,cAAc,CAChBqC,kBADgB,EAEhBC,iBAFgB,EAGhBzB,eAHgB,EAIhBE,cAJgB,EAKhBM,OALgB,EAMhBe,YANgB,EAOhBc,UAPgB,CAZlB;AAssBACE,QAAC,KAAD;AAAO,IAAA,UAAU,EAAE/C,KAAK,CAACgD,KAAzB;AAAA,2BACE;AAAM,MAAA,QAAQ,EAAEJ,iBAAhB;AAAmC,MAAA,SAAS,EAAE5C,KAAK,CAACiD,IAApD;AAAA,8BACE,QAAC,SAAD;AACE,QAAA,kBAAkB,EAAEjD,KAAK,CAAC,kBAAD,CAD3B;AAEE,QAAA,cAAc,EAAEA,KAAK,CAACkD,KAFxB;AAGE,QAAA,gBAAgB,EAAElD,KAAK,CAACmD,OAH1B;AAIE,QAAA,eAAe,EAAEnD,KAAK,CAACoD,MAJzB;AAKE,QAAA,cAAc,EAAEpD,KAAK,CAACqD,KALxB;AAME,QAAA,cAAc,EAAErD,KAAK,CAACsD,KANxB;AAOE,QAAA,QAAQ,EAAER,QAAQ,CAAChC,QAPrB;AAQE,QAAA,qBAAqB,EAAEsB;AARzB;AAAA;AAAA;AAAA;AAAA,cADF,eAYE,QAAC,cAAD;AAAA;AAAA;AAAA;AAAA,cAZF,eAaE;AAAK,QAAA,SAAS,EAAEpC,KAAK,CAAC,iBAAD,CAArB;AAAA,gCACE,QAAC,gBAAD;AACE,UAAA,cAAc,EAAEA,KAAK,CAACuD,KADxB;AAEE,UAAA,aAAa,EAAEvD,KAAK,CAACiB,IAFvB;AAGE,UAAA,cAAc,EAAEjB,KAAK,CAACkD,KAHxB;AAIE,UAAA,YAAY,EAAEJ,QAAQ,CAAC/B,YAJzB;AAKE,UAAA,IAAI,EAAE+B,QAAQ,CAAC7B,IALjB;AAME,UAAA,yBAAyB,EAAEoB,yBAN7B;AAOE,UAAA,eAAe,EAAES,QAAQ,CAACzC;AAP5B;AAAA;AAAA;AAAA;AAAA,gBADF,eAWE,QAAC,eAAD;AACE,UAAA,cAAc,EAAEL,KAAK,CAACuD,KADxB;AAEE,UAAA,cAAc,EAAEvD,KAAK,CAACkD,KAFxB;AAGE,UAAA,wBAAwB,EAAEZ,wBAH5B;AAIE,UAAA,WAAW,EAAEQ,QAAQ,CAAC9B,WAJxB;AAKE,UAAA,cAAc,EAAE8B,QAAQ,CAACxC;AAL3B;AAAA;AAAA;AAAA;AAAA,gBAXF,eAmBE,QAAC,eAAD;AACE,UAAA,cAAc,EAAEN,KAAK,CAACuD,KADxB;AAEE,UAAA,cAAc,EAAEvD,KAAK,CAACkD,KAFxB;AAGE,UAAA,WAAW,EAAEJ,QAAQ,CAAC3B,WAHxB;AAIE,UAAA,wBAAwB,EAAEoB;AAJ5B;AAAA;AAAA;AAAA;AAAA,gBAnBF,eA0BE,QAAC,QAAD;AACE,UAAA,cAAc,EAAEvC,KAAK,CAACuD,KADxB;AAEE,UAAA,cAAc,EAAEvD,KAAK,CAACkD,KAFxB;AAGE,UAAA,IAAI,EAAEJ,QAAQ,CAAC1B,IAHjB;AAIE,UAAA,iBAAiB,EAAEoB;AAJrB;AAAA;AAAA;AAAA;AAAA,gBA1BF,eAiCE,QAAC,SAAD;AACE,UAAA,kBAAkB,EAAExC,KAAK,CAAC,iBAAD,CAD3B;AAEE,UAAA,cAAc,EAAEA,KAAK,CAACuD,KAFxB;AAGE,UAAA,cAAc,EAAEvD,KAAK,CAACkD,KAHxB;AAIE,UAAA,sBAAsB,EAAElD,KAAK,CAAC,iBAAD,CAJ/B;AAKE,UAAA,aAAa,EAAEA,KAAK,CAACwD,OALvB;AAME,UAAA,iBAAiB,EAAExD,KAAK,CAAC,eAAD,CAN1B;AAOE,UAAA,KAAK,EAAE8C,QAAQ,CAACnB,KAPlB;AAQE,UAAA,UAAU,EAAEmB,QAAQ,CAAClB,UARvB;AASE,UAAA,OAAO,EAAE,CAACkB,QAAQ,CAACpB,OATrB;AAUE,UAAA,kBAAkB,EAAEe,kBAVtB;AAWE,UAAA,sBAAsB,EAAEC;AAX1B;AAAA;AAAA;AAAA;AAAA,gBAjCF,eA+CE,QAAC,OAAD;AACE,UAAA,kBAAkB,EAAG,GAAE1C,KAAK,CAAC,gBAAD,CAAmB,GADjD;AAEE,UAAA,eAAe,EAAG,GAAEA,KAAK,CAACyD,GAAI,IAAGzD,KAAK,CAAC,cAAD,CAAiB,EAFzD;AAGE,UAAA,kBAAkB,EAAE2C,kBAHtB;AAIE,UAAA,YAAY,EACVG,QAAQ,CAACpB,OAAT,GACK,GAAE1B,KAAK,CAAC,cAAD,CAAiB,IAAGA,KAAK,CAACyD,GAAI,EAD1C,GAEK,GAAEzD,KAAK,CAACyD,GAAI,EAPrB;AASE,UAAA,OAAO,EAAE,CAACX,QAAQ,CAACpB,OATrB;AAUE,UAAA,UAAU,EAAEI,KAAK,CAACiB;AAVpB;AAAA;AAAA;AAAA;AAAA,gBA/CF;AAAA;AAAA;AAAA;AAAA;AAAA,cAbF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AA8ED;;GA3PQlB,W;UAoBHhC,c;;;KApBGgC,W;AA6PT,eAAeA,WAAf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEC;AACD;AACE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC;AACD;AACE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC;AAED;AACE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC;AACD;AACE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC","sourcesContent":["import { useContext, useReducer } from \"react\";\nimport EditModalContext from \"../../../store/editModal/editModal--context\";\nimport Modal from \"../Modal/Modal\";\nimport HorizontalLine from \"../HorizontalLine/HorizontalLine\";\nimport ExpenseDataContext from \"../../../store/expenseData/expenseData--context\";\nimport CategoryContext from \"../../../store/category/category--context\";\nimport createDateStringFormat from \"../../../Others/CreateDateStringFormat/CreateDateStringFormat\";\nimport FormBtn from \"./FormBtn\";\nimport FormPrice from \"./FormPrice\";\nimport FormDate from \"./FormDate\";\nimport FormDescription from \"./FormDescription\";\nimport FormSubCategory from \"./FormSubCategory\";\nimport FormMainCategory from \"./FormMainCategory\";\nimport FormTitle from \"./FormTitle\";\nimport useAddDataForm from \"../../../Others/Custom/useAddDataForm\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport style from \"./AddDataForm.module.css\";\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case \"CATEGORY\": {\n      let mainCategoryArr, subCategoryArr;\n      const categoryExpenseKeyArr = Object.keys(state.categoryExpense);\n      const categoryIncomeKeyArr = Object.keys(state.categoryIncome);\n\n      /*\n      Note that do NOT directly hard code \"food\" or \"salary\"\n      because user may add, remove, edit main and sub category\n      what we want is showing the first main category, and it's sub category\n      */\n      if (action.value === \"expense\") {\n        mainCategoryArr = categoryExpenseKeyArr;\n        subCategoryArr = state.categoryExpense[categoryExpenseKeyArr[0]];\n      } else {\n        mainCategoryArr = categoryIncomeKeyArr;\n        subCategoryArr = state.categoryIncome[categoryIncomeKeyArr[0]];\n      }\n\n      return {\n        ...state,\n        category: action.value,\n        mainCategoryArr,\n        subCategoryArr,\n        mainCategory:\n          action.value === \"expense\"\n            ? Object.keys(state.categoryExpense)[0]\n            : Object.keys(state.categoryIncome)[0],\n        subCategory:\n          action.value === \"expense\"\n            ? state.categoryExpense[categoryExpenseKeyArr[0]][0]\n            : state.categoryIncome[categoryIncomeKeyArr[0]][0],\n        icon: state.iconObj[\n          action.value === \"expense\"\n            ? Object.keys(state.categoryExpense)[0]\n            : Object.keys(state.categoryIncome)[0]\n        ],\n      };\n    }\n\n    case \"MAIN_CATEGORY\": {\n      let subCategoryArr;\n\n      if (state.category === \"expense\")\n        subCategoryArr = state.categoryExpense[action.value];\n      else subCategoryArr = state.categoryIncome[action.value];\n\n      return {\n        ...state,\n        mainCategory: action.value,\n        subCategoryArr,\n        subCategory: subCategoryArr[0],\n        icon: state.iconObj[action.value],\n      };\n    }\n\n    case \"SUB_CATEGORY\": {\n      return { ...state, subCategory: action.value };\n    }\n\n    case \"DESCRIPTION\": {\n      return { ...state, description: action.value };\n    }\n\n    case \"DATE\": {\n      return { ...state, date: action.value };\n    }\n\n    case \"PRICE\": {\n      let valid = false;\n      if (\n        action.value.trim().length > 0 &&\n        !Object.is(-0, Number(action.value)) &&\n        Number(action.value) >= 0\n      )\n        valid = true;\n\n      return { ...state, isValid: valid, price: action.value };\n    }\n\n    case \"PRICE--TOUCH\": {\n      // it will always be true once user have selected or touched the price input\n      return { ...state, priceTouch: true };\n    }\n\n    default: {\n      return state;\n    }\n  }\n}\n\nfunction AddDataForm(props) {\n  const { addExpenseData, editExpenseData } = useContext(ExpenseDataContext);\n  const [, setEditModal] = useContext(EditModalContext);\n  const { categoryExpense, categoryIncome, iconObj } =\n    useContext(CategoryContext);\n\n  const mainCateExpenseArr = Object.keys(categoryExpense);\n  const mainCateIncomeArr = Object.keys(categoryIncome);\n  const {\n    categoryChangeHandler,\n    mainCategoryChangeHandler,\n    subCategoryChangeHandler,\n    descriptionChangeHandler,\n    dateChangeHandler,\n    priceChangeHandler,\n    inputPriceTouchHandler,\n    cancelClickHandler,\n    formSubmitHandler,\n    addDataFormModal,\n    formData,\n  } = useAddDataForm(\n    mainCateExpenseArr,\n    mainCateIncomeArr,\n    categoryExpense,\n    categoryIncome,\n    iconObj,\n    setEditModal,\n    initialObj\n  );\n\n  /*\n  the data storing in expenseDataProvider do NOT have\n  mainCategoryArr, subCategoryArr categoryExpense, categoryIncome, iconObj, priceTouch\n  but we need this data in the form, so add them\n  */\n  // let initialObj;\n  // if (props.initialObj)\n  //   initialObj = {\n  //     ...props.initialObj,\n  //     mainCategoryArr:\n  //       props.initialObj.category === \"expense\"\n  //         ? mainCateExpenseArr\n  //         : mainCateIncomeArr,\n  //     subCategoryArr:\n  //       props.initialObj.category === \"expense\"\n  //         ? categoryExpense[props.initialObj.mainCategory]\n  //         : categoryIncome[props.initialObj.mainCategory],\n  //     categoryExpense,\n  //     categoryIncome,\n  //     iconObj,\n  //     priceTouch: true,\n  //   };\n  // else\n  //   initialObj = {\n  //     category: \"expense\",\n  //     mainCategoryArr: mainCateExpenseArr,\n  //     subCategoryArr: categoryExpense[mainCateExpenseArr[0]],\n  //     mainCategory: mainCateExpenseArr[0],\n  //     subCategory: categoryExpense[mainCateExpenseArr[0]][0],\n  //     date:\n  //       props.date === undefined\n  //         ? createDateStringFormat(new Date())\n  //         : createDateStringFormat(new Date(props.date)),\n  //     description: \"\",\n  //     price: \"\",\n  //     priceTouch: false,\n  //     icon: iconObj[Object.keys(categoryExpense)[0]],\n  //     isValid: false,\n  //     iconObj,\n  //     categoryExpense,\n  //     categoryIncome,\n  //   };\n\n  // const [formData, formDataDispatch] = useReducer(reducer, initialObj);\n\n  // function categoryChangeHandler(e) {\n  //   formDataDispatch({ type: \"CATEGORY\", value: e.target.value });\n  // }\n\n  // function mainCategoryChangeHandler(e) {\n  //   formDataDispatch({\n  //     type: \"MAIN_CATEGORY\",\n  //     value: e.target.value,\n  //   });\n  // }\n\n  // function subCategoryChangeHandler(e) {\n  //   formDataDispatch({\n  //     type: \"SUB_CATEGORY\",\n  //     value: e.target.value,\n  //   });\n  // }\n\n  // function descriptionChangeHandler(e) {\n  //   formDataDispatch({\n  //     type: \"DESCRIPTION\",\n  //     value: e.target.value,\n  //   });\n  // }\n\n  // function dateChangeHandler(e) {\n  //   formDataDispatch({\n  //     type: \"DATE\",\n  //     value: e.target.value,\n  //   });\n  // }\n\n  // function priceChangeHandler(e) {\n  //   formDataDispatch({\n  //     type: \"PRICE\",\n  //     value: e.target.value,\n  //   });\n  // }\n\n  // function inputPriceTouchHandler() {\n  //   // it will always be true until user select or touch the price input\n  //   formDataDispatch({\n  //     type: \"PRICE--TOUCH\",\n  //   });\n  // }\n\n  // function cancelClickHandler() {\n  //   // close the form from home\n  //   if (props.closeFormHandlerFromHome) props.closeFormHandlerFromHome();\n\n  //   // close from calendar\n  //   if (props.closeAddDataFormHandlerFromCalendar)\n  //     props.closeAddDataFormHandlerFromCalendar();\n\n  //   // close from expense item\n  //   if (props.closeAddDataFormHandlerExpenseItem)\n  //     props.closeAddDataFormHandlerExpenseItem();\n  // }\n\n  // function formSubmitHandler(e) {\n  //   e.preventDefault();\n\n  //   const newFormData = {\n  //     id: props.initialObj ? props.initialObj.id : uuidv4(),\n  //     category: formData.category,\n  //     mainCate: formData.mainCategory,\n  //     subCate: formData.subCategory,\n  //     time: formData.date,\n  //     description: formData.description,\n  //     price: formData.price,\n  //     year: formData.date.slice(0, 4),\n  //     month: formData.date.slice(5, 7),\n  //     day: formData.date.slice(8, 10),\n  //   };\n\n  //   //////////////////////////////////////////////////\n  //   // add new data or edited old data\n  //   // if props.initialObj exist, it means it's editing the old data\n  //   if (props.initialObj) editExpenseData(newFormData);\n  //   else addExpenseData(newFormData);\n\n  //   //////////////////////////////////////////////////\n  //   // close the form from Home\n  //   if (props.closeFormHandlerFromHome) props.closeFormHandlerFromHome();\n\n  //   // close from Calendar\n  //   if (props.closeAddDataFormHandlerFromCalendar)\n  //     props.closeAddDataFormHandlerFromCalendar();\n\n  //   // close from expense item\n  //   if (props.closeAddDataFormHandlerExpenseItem) {\n  //     props.closeAddDataFormHandlerExpenseItem();\n\n  //     // edit successfully\n  //     setEditModal(true);\n  //   }\n  // }\n\n  return (\n    <Modal classModal={style.modal}>\n      <form onSubmit={formSubmitHandler} className={style.form}>\n        <FormTitle\n          classNameContainer={style[\"title__container\"]}\n          classNameInput={style.input}\n          classNameExpense={style.expense}\n          classNameIncome={style.income}\n          classNameCheck={style.check}\n          classNameTitle={style.title}\n          category={formData.category}\n          categoryChangeHandler={categoryChangeHandler}\n        />\n\n        <HorizontalLine />\n        <div className={style[\"form__container\"]}>\n          <FormMainCategory\n            classNameLabel={style.label}\n            classNameIcon={style.icon}\n            classNameInput={style.input}\n            mainCategory={formData.mainCategory}\n            icon={formData.icon}\n            mainCategoryChangeHandler={mainCategoryChangeHandler}\n            mainCategoryArr={formData.mainCategoryArr}\n          />\n\n          <FormSubCategory\n            classNameLabel={style.label}\n            classNameInput={style.input}\n            subCategoryChangeHandler={subCategoryChangeHandler}\n            subCategory={formData.subCategory}\n            subCategoryArr={formData.subCategoryArr}\n          />\n\n          <FormDescription\n            classNameLabel={style.label}\n            classNameInput={style.input}\n            description={formData.description}\n            descriptionChangeHandler={descriptionChangeHandler}\n          />\n\n          <FormDate\n            classNameLabel={style.label}\n            classNameInput={style.input}\n            date={formData.date}\n            dateChangeHandler={dateChangeHandler}\n          />\n\n          <FormPrice\n            classNameContainer={style[\"container--last\"]}\n            classNameLabel={style.label}\n            classNameInput={style.input}\n            classNameInputNonValid={style[\"input--nonValid\"]}\n            classNameWarn={style.warning}\n            classNameWarnShow={style[\"warning--show\"]}\n            price={formData.price}\n            priceTouch={formData.priceTouch}\n            isValid={!formData.isValid}\n            priceChangeHandler={priceChangeHandler}\n            inputPriceTouchHandler={inputPriceTouchHandler}\n          />\n\n          <FormBtn\n            classNameContainer={`${style[\"btn__container\"]} `}\n            classNameCancel={`${style.btn} ${style[\"btn--isValid\"]}`}\n            cancelClickHandler={cancelClickHandler}\n            classNameAdd={\n              formData.isValid\n                ? `${style[\"btn--isValid\"]} ${style.btn}`\n                : `${style.btn}`\n            }\n            isValid={!formData.isValid}\n            initialObj={props.initialObj}\n          />\n        </div>\n      </form>\n    </Modal>\n  );\n}\n\nexport default AddDataForm;\n/*\n  <div className={style[\"title__container\"]}>\n          <InputRadio\n            classInput={style.input}\n            classCheck={`${style.expense} ${style.check}`}\n            classLabel={style.title}\n            label=\"expense\"\n            name=\"title\"\n            value=\"expense\"\n            onChange={categoryChangeHandler}\n            checked={formData.category === \"expense\"}\n          />\n          <InputRadio\n            classInput={style.input}\n            classCheck={`${style.income} ${style.check}`}\n            classLabel={style.title}\n            label=\"income\"\n            name=\"title\"\n            value=\"income\"\n            onChange={categoryChangeHandler}\n            checked={formData.category === \"income\"}\n          />\n        </div>\n\n\n          <div className={style[\"container\"]}>\n            <label className={style.label}>\n              main category\n              <div className={style.icon}>{formData.icon}</div>\n            </label>\n            <select\n              value={formData.mainCategory}\n              onChange={mainCategoryChangeHandler}\n              className={style.input}\n              type=\"select\"\n            >\n              {formData.mainCategoryArr.map((element) => (\n                <option value={element} key={element}>\n                  {element}\n                </option>\n              ))}\n            </select>\n          </div>\n*/\n\n{\n  /* <div className={style[\"container\"]}>\n            <label className={style.label}>sub category</label>\n\n            <select\n              value={formData.subCategory}\n              onChange={subCategoryChangeHandler}\n              className={style.input}\n              type=\"select\"\n            >\n              {formData.subCategoryArr.map((element) => (\n                <option value={element} key={element}>\n                  {element}\n                </option>\n              ))}\n            </select>\n          </div> */\n}\n{\n  /* <div className={style[\"container\"]}>\n            <label className={style.label}>description (optional)</label>\n            <input\n              value={formData.description}\n              onChange={descriptionChangeHandler}\n              className={style.input}\n              type=\"text\"\n            ></input>\n          </div> */\n}\n{\n  /* <div className={style[\"container\"]}>\n            <label className={style.label}>date</label>\n            <input\n              value={formData.date}\n              className={style.input}\n              type=\"date\"\n              onChange={dateChangeHandler}\n            ></input>\n          </div> */\n}\n\n{\n  /* <div className={`${style[\"container\"]} ${style[\"container--last\"]}`}>\n            <label className={style.label}>price *</label>\n            <input\n              onChange={priceChangeHandler}\n              className={style.input}\n              type=\"number\"\n              value={formData.price}\n            ></input>\n          </div> */\n}\n{\n  /* <div className={`${style[\"btn__container\"]} `}>\n            <Button\n              type=\"button\"\n              className={`${style.btn} ${style[\"btn--isValid\"]}`}\n              onClick={cancelClickHandler}\n            >\n              cancel\n            </Button>\n            <Button\n              type=\"submit\"\n              className={\n                formData.isValid\n                  ? `${style[\"btn--isValid\"]} ${style.btn}`\n                  : `${style.btn}`\n              }\n              disabled={formData.isValid}\n            >\n              {props.initialObj ? \"edit\" : \"add\"}\n            </Button>\n          </div> */\n}\n"]},"metadata":{},"sourceType":"module"}