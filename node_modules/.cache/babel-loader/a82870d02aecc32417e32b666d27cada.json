{"ast":null,"code":"import compareTime from \"../CompareTime/compareTime\"; // Reference 1\n\nfunction createLineDataArr(labels, expenseData) {\n  const finalDataArr = [];\n  let curAccExpense = 0;\n  let curAccIncome = 0;\n  let expenseDataIndex = 0;\n  let labelIndex = 0;\n  let curLabelTime = new Date(labels[0]);\n  const sortedData = expenseData.sort((a, b) => Number(new Date(a.time) - Number(new Date(b.time))));\n\n  while (expenseDataIndex < sortedData.length) {\n    // Reference 2\n    if (labelIndex >= labels.length) break;\n    const data = sortedData[expenseDataIndex]; // we want accumulated data, so use compareTime function\n\n    if (!compareTime(data, curLabelTime)) {\n      curLabelTime = new Date(labels[++labelIndex]);\n      finalDataArr.push(curAccIncome - curAccExpense);\n    } else {\n      if (data.type === \"expense\") curAccExpense += Number(data.price);else curAccIncome += Number(data.price);\n      expenseDataIndex++;\n    }\n  } // Reference 3\n\n\n  if (labelIndex < labels.length) {\n    const remainingLabel = labels.length - labelIndex;\n\n    for (let i = 0; i < remainingLabel; i++) {\n      finalDataArr.push(curAccIncome - curAccExpense);\n    }\n  }\n\n  return finalDataArr;\n}\n\nexport default createLineDataArr;\n/*\nReference 1\nNote that this function cannot be bundled with createBarDataArr\nIt's similar\nbut has several difference\n*/\n\n/*\nReference 2\nUser may store some data is beyond current date\nFor example, current date is 2022-02-06\nUser may store the data in 2022-03-05, which means user store the data before hand\nIn this case, labelIndex will be out of the bound, and have some unexpected error\nIn addition, we don't wanna count that over range data\nSo if the labelIndex is out of the bound, break the while-loop\n*/\n\n/*\nReference 3\nThis is for the case when the data is shortage\nFor example, current date is 2022-02-06\nBut user only store the data before 2022-01-10\nIn this case, labelIndex will not run at the end of index, \nwhich means the finalDataArr is incomplete, or not filled out\nIt may be only [val, val, val] or [val, val, val, val]\ndepend on the last date user storing\nThe point is the length of finalDataArr should be always 7\nIf while-loop finish running, and the length of finalDataArr is still not 7\nWe wanna complete it\n*/\n// const testCase = [\n//   {\n//     category: \"income\",\n//     mainCate: \"salary\",\n//     subCate: \"bonus\",\n//     time: \"2022-01-10\",\n//     year: \"2022\",\n//     month: \"01\",\n//     day: \"10\",\n//     description: \"\",\n//     price: \"300\",\n//   },\n//   {\n//     category: \"expense\",\n//     mainCate: \"food\",\n//     subCate: \"shoes\",\n//     time: \"2022-01-11\",\n//     year: \"2022\",\n//     month: \"01\",\n//     day: \"11\",\n//     description: \"\",\n//     price: \"300\",\n//   },\n//   {\n//     category: \"expense\",\n//     mainCate: \"food\",\n//     subCate: \"shoes\",\n//     time: \"2022-01-13\",\n//     year: \"2022\",\n//     month: \"01\",\n//     day: \"13\",\n//     description: \"\",\n//     price: \"300\",\n//   },\n//   {\n//     category: \"expense\",\n//     mainCate: \"food\",\n//     subCate: \"shoes\",\n//     time: \"2022-01-15\",\n//     year: \"2022\",\n//     month: \"01\",\n//     day: \"15\",\n//     description: \"\",\n//     price: \"300\",\n//   },\n//   {\n//     category: \"expense\",\n//     mainCate: \"food\",\n//     subCate: \"shoes\",\n//     time: \"2022-01-18\",\n//     year: \"2022\",\n//     month: \"01\",\n//     day: \"18\",\n//     description: \"\",\n//     price: \"300\",\n//   },\n//   {\n//     category: \"expense\",\n//     mainCate: \"food\",\n//     subCate: \"shoes\",\n//     time: \"2022-01-20\",\n//     year: \"2022\",\n//     month: \"01\",\n//     day: \"20\",\n//     description: \"\",\n//     price: \"300\",\n//   },\n//   {\n//     category: \"expense\",\n//     mainCate: \"food\",\n//     subCate: \"shoes\",\n//     time: \"2022-01-21\",\n//     year: \"2022\",\n//     month: \"01\",\n//     day: \"21\",\n//     description: \"\",\n//     price: \"300\",\n//   },\n//   {\n//     category: \"expense\",\n//     mainCate: \"food\",\n//     subCate: \"shoes\",\n//     time: \"2022-01-23\",\n//     year: \"2022\",\n//     month: \"01\",\n//     day: \"23\",\n//     description: \"\",\n//     price: \"300\",\n//   },\n//   {\n//     category: \"expense\",\n//     mainCate: \"food\",\n//     subCate: \"shoes\",\n//     time: \"2022-01-24\",\n//     year: \"2022\",\n//     month: \"01\",\n//     day: \"24\",\n//     description: \"\",\n//     price: \"300\",\n//   },\n//   {\n//     category: \"expense\",\n//     mainCate: \"food\",\n//     subCate: \"shoes\",\n//     time: \"2022-01-31\",\n//     year: \"2022\",\n//     month: \"01\",\n//     day: \"24\",\n//     description: \"\",\n//     price: \"300\",\n//   },\n//   {\n//     category: \"expense\",\n//     mainCate: \"food\",\n//     subCate: \"shoes\",\n//     time: \"2022-02-01\",\n//     year: \"2022\",\n//     month: \"02\",\n//     day: \"01\",\n//     description: \"\",\n//     price: \"300\",\n//   },\n//   {\n//     category: \"expense\",\n//     mainCate: \"food\",\n//     subCate: \"shoes\",\n//     time: \"2022-02-02\",\n//     year: \"2022\",\n//     month: \"02\",\n//     day: \"02\",\n//     description: \"\",\n//     price: \"300\",\n//   },\n// ];\n// createChartDataArr(\n//   [\n//     \"2022-01-30\",\n//     \"2022-01-31\",\n//     \"2022-02-01\",\n//     \"2022-02-02\",\n//     \"2022-02-03\",\n//     \"2022-02-04\",\n//     \"2022-02-05\",\n//   ],\n//   testCase\n// );\n\n/*\nThis is an old way of implement (using new Date())\n\nfunction createChartDataArr(labels, expenseData) {\n  const finalDataArr = [];\n\n  let curAccAmountExpense = 0;\n  let curAccAmountIncome = 0;\n  let expenseDataIndex = 0;\n  let labelIndex = 0;\n\n  // small difference\n  let curLabelTime = Number(new Date(labels[0]));\n\n  const sortedData = expenseData.sort((a, b) =>\n    Number(new Date(a.time) - Number(new Date(b.time)))\n  );\n\n  while (expenseDataIndex < sortedData.length) {\n    if (labelIndex >= labels.length) break;\n\n    const data = sortedData[expenseDataIndex];\n\n    // main difference\n    if (Number(new Date(data.time)) > curLabelTime) {\n      // small difference\n      curLabelTime = Number(new Date(labels[++labelIndex]));\n      finalDataArr.push(curAccAmountIncome - curAccAmountExpense);\n    } else {\n      if (data.category === \"expense\")\n        curAccAmountExpense += Number(data.price);\n      else curAccAmountIncome += Number(data.price);\n\n      expenseDataIndex++;\n    }\n  }\n\n  if (labelIndex < labels.length)\n    finalDataArr.push(curAccAmountIncome - curAccAmountExpense);\n\n  return finalDataArr;\n}\n*/\n// function createChartDataArr(labels, expenseData) {\n//   const finalDataArr = [];\n//   labels.forEach((label) => {\n//     const curAccAmount =\n//       createPreAccAmount(\"income\", expenseData, label) -\n//       createPreAccAmount(\"expense\", expenseData, label);\n//     finalDataArr.push(curAccAmount);\n//   });\n//   return finalDataArr;\n// }","map":{"version":3,"sources":["/Users/eyo/Desktop/expense-tracker/src/Others/CreateChartData/createLineDataArr.js"],"names":["compareTime","createLineDataArr","labels","expenseData","finalDataArr","curAccExpense","curAccIncome","expenseDataIndex","labelIndex","curLabelTime","Date","sortedData","sort","a","b","Number","time","length","data","push","type","price","remainingLabel","i"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,4BAAxB,C,CAEA;;AACA,SAASC,iBAAT,CAA2BC,MAA3B,EAAmCC,WAAnC,EAAgD;AAC9C,QAAMC,YAAY,GAAG,EAArB;AACA,MAAIC,aAAa,GAAG,CAApB;AACA,MAAIC,YAAY,GAAG,CAAnB;AACA,MAAIC,gBAAgB,GAAG,CAAvB;AACA,MAAIC,UAAU,GAAG,CAAjB;AACA,MAAIC,YAAY,GAAG,IAAIC,IAAJ,CAASR,MAAM,CAAC,CAAD,CAAf,CAAnB;AACA,QAAMS,UAAU,GAAGR,WAAW,CAACS,IAAZ,CAAiB,CAACC,CAAD,EAAIC,CAAJ,KAClCC,MAAM,CAAC,IAAIL,IAAJ,CAASG,CAAC,CAACG,IAAX,IAAmBD,MAAM,CAAC,IAAIL,IAAJ,CAASI,CAAC,CAACE,IAAX,CAAD,CAA1B,CADW,CAAnB;;AAIA,SAAOT,gBAAgB,GAAGI,UAAU,CAACM,MAArC,EAA6C;AAC3C;AACA,QAAIT,UAAU,IAAIN,MAAM,CAACe,MAAzB,EAAiC;AAEjC,UAAMC,IAAI,GAAGP,UAAU,CAACJ,gBAAD,CAAvB,CAJ2C,CAM3C;;AACA,QAAI,CAACP,WAAW,CAACkB,IAAD,EAAOT,YAAP,CAAhB,EAAsC;AACpCA,MAAAA,YAAY,GAAG,IAAIC,IAAJ,CAASR,MAAM,CAAC,EAAEM,UAAH,CAAf,CAAf;AACAJ,MAAAA,YAAY,CAACe,IAAb,CAAkBb,YAAY,GAAGD,aAAjC;AACD,KAHD,MAGO;AACL,UAAIa,IAAI,CAACE,IAAL,KAAc,SAAlB,EAA6Bf,aAAa,IAAIU,MAAM,CAACG,IAAI,CAACG,KAAN,CAAvB,CAA7B,KACKf,YAAY,IAAIS,MAAM,CAACG,IAAI,CAACG,KAAN,CAAtB;AAELd,MAAAA,gBAAgB;AACjB;AACF,GA3B6C,CA6B9C;;;AACA,MAAIC,UAAU,GAAGN,MAAM,CAACe,MAAxB,EAAgC;AAC9B,UAAMK,cAAc,GAAGpB,MAAM,CAACe,MAAP,GAAgBT,UAAvC;;AAEA,SAAK,IAAIe,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,cAApB,EAAoCC,CAAC,EAArC,EAAyC;AACvCnB,MAAAA,YAAY,CAACe,IAAb,CAAkBb,YAAY,GAAGD,aAAjC;AACD;AACF;;AAED,SAAOD,YAAP;AACD;;AAED,eAAeH,iBAAfsourcesContent":["import compareTime from \"../CompareTime/compareTime\";\n\n// Reference 1\nfunction createLineDataArr(labels, expenseData) {\n  const finalDataArr = [];\n  let curAccExpense = 0;\n  let curAccIncome = 0;\n  let expenseDataIndex = 0;\n  let labelIndex = 0;\n  let curLabelTime = new Date(labels[0]);\n  const sortedData = expenseData.sort((a, b) =>\n    Number(new Date(a.time) - Number(new Date(b.time)))\n  );\n\n  while (expenseDataIndex < sortedData.length) {\n    // Reference 2\n    if (labelIndex >= labels.length) break;\n\n    const data = sortedData[expenseDataIndex];\n\n    // we want accumulated data, so use compareTime function\n    if (!compareTime(data, curLabelTime)) {\n      curLabelTime = new Date(labels[++labelIndex]);\n      finalDataArr.push(curAccIncome - curAccExpense);\n    } else {\n      if (data.type === \"expense\") curAccExpense += Number(data.price);\n      else curAccIncome += Number(data.price);\n\n      expenseDataIndex++;\n    }\n  }\n\n  // Reference 3\n  if (labelIndex < labels.length) {\n    const remainingLabel = labels.length - labelIndex;\n\n    for (let i = 0; i < remainingLabel; i++) {\n      finalDataArr.push(curAccIncome - curAccExpense);\n    }\n  }\n\n  return finalDataArr;\n}\n\nexport default createLineDataArr;\n/*\nReference 1\nNote that this function cannot be bundled with createBarDataArr\nIt's similar\nbut has several difference\n*/\n\n/*\nReference 2\nUser may store some data is beyond current date\nFor example, current date is 2022-02-06\nUser may store the data in 2022-03-05, which means user store the data before hand\nIn this case, labelIndex will be out of the bound, and have some unexpected error\nIn addition, we don't wanna count that over range data\nSo if the labelIndex is out of the bound, break the while-loop\n*/\n\n/*\nReference 3\nThis is for the case when the data is shortage\nFor example, current date is 2022-02-06\nBut user only store the data before 2022-01-10\nIn this case, labelIndex will not run at the end of index, \nwhich means the finalDataArr is incomplete, or not filled out\nIt may be only [val, val, val] or [val, val, val, val]\ndepend on the last date user storing\nThe point is the length of finalDataArr should be always 7\nIf while-loop finish running, and the length of finalDataArr is still not 7\nWe wanna complete it\n*/\n\n// const testCase = [\n//   {\n//     category: \"income\",\n//     mainCate: \"salary\",\n//     subCate: \"bonus\",\n//     time: \"2022-01-10\",\n//     year: \"2022\",\n//     month: \"01\",\n//     day: \"10\",\n//     description: \"\",\n//     price: \"300\",\n//   },\n//   {\n//     category: \"expense\",\n//     mainCate: \"food\",\n//     subCate: \"shoes\",\n//     time: \"2022-01-11\",\n//     year: \"2022\",\n//     month: \"01\",\n//     day: \"11\",\n//     description: \"\",\n//     price: \"300\",\n//   },\n//   {\n//     category: \"expense\",\n//     mainCate: \"food\",\n//     subCate: \"shoes\",\n//     time: \"2022-01-13\",\n//     year: \"2022\",\n//     month: \"01\",\n//     day: \"13\",\n//     description: \"\",\n//     price: \"300\",\n//   },\n//   {\n//     category: \"expense\",\n//     mainCate: \"food\",\n//     subCate: \"shoes\",\n//     time: \"2022-01-15\",\n//     year: \"2022\",\n//     month: \"01\",\n//     day: \"15\",\n//     description: \"\",\n//     price: \"300\",\n//   },\n//   {\n//     category: \"expense\",\n//     mainCate: \"food\",\n//     subCate: \"shoes\",\n//     time: \"2022-01-18\",\n//     year: \"2022\",\n//     month: \"01\",\n//     day: \"18\",\n//     description: \"\",\n//     price: \"300\",\n//   },\n//   {\n//     category: \"expense\",\n//     mainCate: \"food\",\n//     subCate: \"shoes\",\n//     time: \"2022-01-20\",\n//     year: \"2022\",\n//     month: \"01\",\n//     day: \"20\",\n//     description: \"\",\n//     price: \"300\",\n//   },\n//   {\n//     category: \"expense\",\n//     mainCate: \"food\",\n//     subCate: \"shoes\",\n//     time: \"2022-01-21\",\n//     year: \"2022\",\n//     month: \"01\",\n//     day: \"21\",\n//     description: \"\",\n//     price: \"300\",\n//   },\n//   {\n//     category: \"expense\",\n//     mainCate: \"food\",\n//     subCate: \"shoes\",\n//     time: \"2022-01-23\",\n//     year: \"2022\",\n//     month: \"01\",\n//     day: \"23\",\n//     description: \"\",\n//     price: \"300\",\n//   },\n//   {\n//     category: \"expense\",\n//     mainCate: \"food\",\n//     subCate: \"shoes\",\n//     time: \"2022-01-24\",\n//     year: \"2022\",\n//     month: \"01\",\n//     day: \"24\",\n//     description: \"\",\n//     price: \"300\",\n//   },\n//   {\n//     category: \"expense\",\n//     mainCate: \"food\",\n//     subCate: \"shoes\",\n//     time: \"2022-01-31\",\n//     year: \"2022\",\n//     month: \"01\",\n//     day: \"24\",\n//     description: \"\",\n//     price: \"300\",\n//   },\n//   {\n//     category: \"expense\",\n//     mainCate: \"food\",\n//     subCate: \"shoes\",\n//     time: \"2022-02-01\",\n//     year: \"2022\",\n//     month: \"02\",\n//     day: \"01\",\n//     description: \"\",\n//     price: \"300\",\n//   },\n//   {\n//     category: \"expense\",\n//     mainCate: \"food\",\n//     subCate: \"shoes\",\n//     time: \"2022-02-02\",\n//     year: \"2022\",\n//     month: \"02\",\n//     day: \"02\",\n//     description: \"\",\n//     price: \"300\",\n//   },\n// ];\n\n// createChartDataArr(\n//   [\n//     \"2022-01-30\",\n//     \"2022-01-31\",\n//     \"2022-02-01\",\n//     \"2022-02-02\",\n//     \"2022-02-03\",\n//     \"2022-02-04\",\n//     \"2022-02-05\",\n//   ],\n//   testCase\n// );\n/*\nThis is an old way of implement (using new Date())\n\nfunction createChartDataArr(labels, expenseData) {\n  const finalDataArr = [];\n\n  let curAccAmountExpense = 0;\n  let curAccAmountIncome = 0;\n  let expenseDataIndex = 0;\n  let labelIndex = 0;\n\n  // small difference\n  let curLabelTime = Number(new Date(labels[0]));\n\n  const sortedData = expenseData.sort((a, b) =>\n    Number(new Date(a.time) - Number(new Date(b.time)))\n  );\n\n  while (expenseDataIndex < sortedData.length) {\n    if (labelIndex >= labels.length) break;\n\n    const data = sortedData[expenseDataIndex];\n\n    // main difference\n    if (Number(new Date(data.time)) > curLabelTime) {\n      // small difference\n      curLabelTime = Number(new Date(labels[++labelIndex]));\n      finalDataArr.push(curAccAmountIncome - curAccAmountExpense);\n    } else {\n      if (data.category === \"expense\")\n        curAccAmountExpense += Number(data.price);\n      else curAccAmountIncome += Number(data.price);\n\n      expenseDataIndex++;\n    }\n  }\n\n  if (labelIndex < labels.length)\n    finalDataArr.push(curAccAmountIncome - curAccAmountExpense);\n\n  return finalDataArr;\n}\n*/\n\n// function createChartDataArr(labels, expenseData) {\n//   const finalDataArr = [];\n\n//   labels.forEach((label) => {\n//     const curAccAmount =\n//       createPreAccAmount(\"income\", expenseData, label) -\n//       createPreAccAmount(\"expense\", expenseData, label);\n\n//     finalDataArr.push(curAccAmount);\n//   });\n\n//   return finalDataArr;\n// }\n"]},"metadata":{},"sourceType":"module"}