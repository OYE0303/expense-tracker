{"ast":null,"code":"import compareTimeWithRange from \"../compareTimeWithRange\";\n\nfunction createPieDataArr(startingDate, endingDate, expenseData, mainCategory, subCategory) {\n  const startingDateObj = new Date(startingDate);\n  const endingDateObj = new Date(endingDate);\n  const filteredData = expenseData.filter(element => compareTimeWithRange(element, startingDateObj, endingDateObj) && element.category === mainCategory);\n  const labelsSet = new Set();\n\n  for (let data of filteredData) {\n    if (labelsSet.size === subCategory.length) break;\n    labelsSet.add(data.mainCate);\n  }\n\n  const labels = Array.from(labelsSet);\n  let newFilteredData = [];\n  labels.forEach(label => {\n    newFilteredData.push(filteredData.filter(data => data.mainCate === label));\n  });\n  console.log(newFilteredData);\n  const dataArr = [];\n  newFilteredData.forEach(data => {\n    let dataTmp;\n\n    if (data.length > 0) {\n      dataTmp = data.reduce((acc, cur) => acc += Number(cur.price), 0);\n    } else dataTmp = 0;\n\n    dataArr.push(dataTmp);\n  }); ////////////////////////////////////////////////\n\n  const test = {};\n  labels.forEach(label => {\n    test[label] = [];\n  });\n  filteredData.forEach(data => {\n    if (test[data.mainCate]) test[data.mainCate].push(data);else test[data.mainCate] = [data];\n  });\n  const newDataArr = [];\n\n  for (const value of Object.values(test)) {\n    if (value.length > 0) newDataArr.push(data.reduce((acc, cur) => acc += Number(cur.price), 0));else newDataArr.push(0);\n  }\n\n  return [labels, dataArr];\n}\n\nexport default createPieDataArr;","map":{"version":3,"sources":["/Users/eyo/Desktop/expense-tracker/src/Others/CreateChartData/createPieDataArr.js"],"names":["compareTimeWithRange","createPieDataArr","startingDate","endingDate","expenseData","mainCategory","subCategory","startingDateObj","Date","endingDateObj","filteredData","filter","element","category","labelsSet","Set","data","size","length","add","mainCate","labels","Array","from","newFilteredData","forEach","label","push","console","log","dataArr","dataTmp","reduce","acc","cur","Number","price","test","newDataArr","value","Object","values"],"mappings":"AAAA,OAAOA,oBAAP,MAAiC,yBAAjC;;AAEA,SAASC,gBAAT,CACEC,YADF,EAEEC,UAFF,EAGEC,WAHF,EAIEC,YAJF,EAKEC,WALF,EAME;AACA,QAAMC,eAAe,GAAG,IAAIC,IAAJ,CAASN,YAAT,CAAxB;AACA,QAAMO,aAAa,GAAG,IAAID,IAAJ,CAASL,UAAT,CAAtB;AACA,QAAMO,YAAY,GAAGN,WAAW,CAACO,MAAZ,CAClBC,OAAD,IACEZ,oBAAoB,CAACY,OAAD,EAAUL,eAAV,EAA2BE,aAA3B,CAApB,IACAG,OAAO,CAACC,QAAR,KAAqBR,YAHJ,CAArB;AAMA,QAAMS,SAAS,GAAG,IAAIC,GAAJ,EAAlB;;AACA,OAAK,IAAIC,IAAT,IAAiBN,YAAjB,EAA+B;AAC7B,QAAII,SAAS,CAACG,IAAV,KAAmBX,WAAW,CAACY,MAAnC,EAA2C;AAC3CJ,IAAAA,SAAS,CAACK,GAAV,CAAcH,IAAI,CAACI,QAAnB;AACD;;AACD,QAAMC,MAAM,GAAGC,KAAK,CAACC,IAAN,CAAWT,SAAX,CAAf;AAEA,MAAIU,eAAe,GAAG,EAAtB;AACAH,EAAAA,MAAM,CAACI,OAAP,CAAgBC,KAAD,IAAW;AACxBF,IAAAA,eAAe,CAACG,IAAhB,CACEjB,YAAY,CAACC,MAAb,CAAqBK,IAAD,IAAUA,IAAI,CAACI,QAAL,KAAkBM,KAAhD,CADF;AAGD,GAJD;AAMAE,EAAAA,OAAO,CAACC,GAAR,CAAYL,eAAZ;AAEA,QAAMM,OAAO,GAAG,EAAhB;AAEAN,EAAAA,eAAe,CAACC,OAAhB,CAAyBT,IAAD,IAAU;AAChC,QAAIe,OAAJ;;AAEA,QAAIf,IAAI,CAACE,MAAL,GAAc,CAAlB,EAAqB;AACnBa,MAAAA,OAAO,GAAGf,IAAI,CAACgB,MAAL,CAAY,CAACC,GAAD,EAAMC,GAAN,KAAeD,GAAG,IAAIE,MAAM,CAACD,GAAG,CAACE,KAAL,CAAxC,EAAsD,CAAtD,CAAV;AACD,KAFD,MAEOL,OAAO,GAAG,CAAV;;AAEPD,IAAAA,OAAO,CAACH,IAAR,CAAaI,OAAb;AACD,GARD,EA3BA,CAqCA;;AACA,QAAMM,IAAI,GAAG,EAAb;AACAhB,EAAAA,MAAM,CAACI,OAAP,CAAgBC,KAAD,IAAW;AACxBW,IAAAA,IAAI,CAACX,KAAD,CAAJ,GAAc,EAAd;AACD,GAFD;AAIAhB,EAAAA,YAAY,CAACe,OAAb,CAAsBT,IAAD,IAAU;AAC7B,QAAIqB,IAAI,CAACrB,IAAI,CAACI,QAAN,CAAR,EAAyBiB,IAAI,CAACrB,IAAI,CAACI,QAAN,CAAJ,CAAoBO,IAApB,CAAyBX,IAAzB,EAAzB,KACKqB,IAAI,CAACrB,IAAI,CAACI,QAAN,CAAJ,GAAsB,CAACJ,IAAD,CAAtB;AACN,GAHD;AAKA,QAAMsB,UAAU,GAAG,EAAnB;;AAEA,OAAK,MAAMC,KAAX,IAAoBC,MAAM,CAACC,MAAP,CAAcJ,IAAd,CAApB,EAAyC;AACvC,QAAIE,KAAK,CAACrB,MAAN,GAAe,CAAnB,EACEoB,UAAU,CAACX,IAAX,CAAgBX,IAAI,CAACgB,MAAL,CAAY,CAACC,GAAD,EAAMC,GAAN,KAAeD,GAAG,IAAIE,MAAM,CAACD,GAAG,CAACE,KAAL,CAAxC,EAAsD,CAAtD,CAAhB,EADF,KAEKE,UAAU,CAACX,IAAX,CAAgB,CAAhB;AACN;;AAED,SAAO,CAACN,MAAD,EAASS,OAAT,CAAP;AACD;;AAED,eAAe7B,gBAAf","sourcesContent":["import compareTimeWithRange from \"../compareTimeWithRange\";\n\nfunction createPieDataArr(\n  startingDate,\n  endingDate,\n  expenseData,\n  mainCategory,\n  subCategory\n) {\n  const startingDateObj = new Date(startingDate);\n  const endingDateObj = new Date(endingDate);\n  const filteredData = expenseData.filter(\n    (element) =>\n      compareTimeWithRange(element, startingDateObj, endingDateObj) &&\n      element.category === mainCategory\n  );\n\n  const labelsSet = new Set();\n  for (let data of filteredData) {\n    if (labelsSet.size === subCategory.length) break;\n    labelsSet.add(data.mainCate);\n  }\n  const labels = Array.from(labelsSet);\n\n  let newFilteredData = [];\n  labels.forEach((label) => {\n    newFilteredData.push(\n      filteredData.filter((data) => data.mainCate === label)\n    );\n  });\n\n  console.log(newFilteredData);\n\n  const dataArr = [];\n\n  newFilteredData.forEach((data) => {\n    let dataTmp;\n\n    if (data.length > 0) {\n      dataTmp = data.reduce((acc, cur) => (acc += Number(cur.price)), 0);\n    } else dataTmp = 0;\n\n    dataArr.push(dataTmp);\n  });\n\n  ////////////////////////////////////////////////\n  const test = {};\n  labels.forEach((label) => {\n    test[label] = [];\n  });\n\n  filteredData.forEach((data) => {\n    if (test[data.mainCate]) test[data.mainCate].push(data);\n    else test[data.mainCate] = [data];\n  });\n\n  const newDataArr = [];\n\n  for (const value of Object.values(test)) {\n    if (value.length > 0)\n      newDataArr.push(data.reduce((acc, cur) => (acc += Number(cur.price)), 0));\n    else newDataArr.push(0);\n  }\n\n  return [labels, dataArr];\n}\n\nexport default createPieDataArr;\n"]},"metadata":{},"sourceType":"module"}