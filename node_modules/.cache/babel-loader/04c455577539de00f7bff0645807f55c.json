{"ast":null,"code":"var _jsxFileName = \"/Users/eyo/Desktop/expense-tracker/src/store/userInfo/userInfoProvider.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport UserInfoContext from \"./userInfo--context\";\nimport { doc, setDoc, getDoc } from \"firebase/firestore\";\nimport { signInWithPopup } from \"firebase/auth\";\nimport { db, provider, auth } from \"../../firebase-config\";\nimport createInitialData from \"../../Others/CreateInitialData/createInitialData\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction UserInfoProvider(props) {\n  _s();\n\n  const [userData, setUserData] = useState(false);\n\n  async function checkUserExist() {}\n\n  async function signInWithGoogle() {\n    const res = await signInWithPopup(auth, provider);\n    const {\n      displayName,\n      email\n    } = res.user;\n    let userDataObj;\n    const userID = `${email}${displayName.split(\" \").join(\"\")}`;\n    const userDocSnap = await getDoc(doc(db, \"users\", userID));\n\n    if (userDocSnap.exists()) {\n      const {\n        userName,\n        displayTheme\n      } = userDocSnap.data();\n      userDataObj = {\n        userName,\n        displayTheme,\n        userID\n      };\n      return;\n    }\n\n    const [categoryExpense, categoryIncome, iconObj, iconArr] = createInitialData();\n    await setDoc(doc(db, \"users\", userID), {\n      userName: displayName,\n      email,\n      categoryExpense,\n      categoryIncome,\n      iconObj,\n      iconArr,\n      displayTheme: \"black\"\n    });\n    setUserData(userDataObj);\n  }\n\n  const contextObj = userData ? { ...userData,\n    signInWithGoogle\n  } : {\n    userData: false,\n    signInWithGoogle\n  };\n  return /*#__PURE__*/_jsxDEV(UserInfoContext.Provider, {\n    value: contextObj,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n}\n\n_s(UserInfoProvider, \"YtbkN3JwFRAsZM3fwtaCegmR7aE=\");\n\n_c = UserInfoProvider;\nexport default UserInfoProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserInfoProvider\");","map":{"version":3,"sources":["/Users/eyo/Desktop/expense-tracker/src/store/userInfo/userInfoProvider.js"],"names":["useState","UserInfoContext","doc","setDoc","getDoc","signInWithPopup","db","provider","auth","createInitialData","UserInfoProvider","props","userData","setUserData","checkUserExist","signInWithGoogle","res","displayName","email","user","userDataObj","userID","split","join","userDocSnap","exists","userName","displayTheme","data","categoryExpense","categoryIncome","iconObj","iconArr","contextObj","children"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,eAAP,MAA4B,qBAA5B;AACA,SAASC,GAAT,EAAcC,MAAd,EAAsBC,MAAtB,QAAoC,oBAApC;AACA,SAASC,eAAT,QAAgC,eAAhC;AACA,SAASC,EAAT,EAAaC,QAAb,EAAuBC,IAAvB,QAAmC,uBAAnC;AACA,OAAOC,iBAAP,MAA8B,kDAA9B;;;AAEA,SAASC,gBAAT,CAA0BC,KAA1B,EAAiC;AAAA;;AAC/B,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0Bb,QAAQ,CAAC,KAAD,CAAxC;;AAEA,iBAAec,cAAf,GAAgC,CAAE;;AAElC,iBAAeC,gBAAf,GAAkC;AAChC,UAAMC,GAAG,GAAG,MAAMX,eAAe,CAACG,IAAD,EAAOD,QAAP,CAAjC;AACA,UAAM;AAAEU,MAAAA,WAAF;AAAeC,MAAAA;AAAf,QAAyBF,GAAG,CAACG,IAAnC;AACA,QAAIC,WAAJ;AAEA,UAAMC,MAAM,GAAI,GAAEH,KAAM,GAAED,WAAW,CAACK,KAAZ,CAAkB,GAAlB,EAAuBC,IAAvB,CAA4B,EAA5B,CAAgC,EAA1D;AAEA,UAAMC,WAAW,GAAG,MAAMpB,MAAM,CAACF,GAAG,CAACI,EAAD,EAAK,OAAL,EAAce,MAAd,CAAJ,CAAhC;;AAEA,QAAIG,WAAW,CAACC,MAAZ,EAAJ,EAA0B;AACxB,YAAM;AAAEC,QAAAA,QAAF;AAAYC,QAAAA;AAAZ,UAA6BH,WAAW,CAACI,IAAZ,EAAnC;AACAR,MAAAA,WAAW,GAAG;AACZM,QAAAA,QADY;AAEZC,QAAAA,YAFY;AAGZN,QAAAA;AAHY,OAAd;AAKA;AACD;;AAED,UAAM,CAACQ,eAAD,EAAkBC,cAAlB,EAAkCC,OAAlC,EAA2CC,OAA3C,IACJvB,iBAAiB,EADnB;AAGA,UAAMN,MAAM,CAACD,GAAG,CAACI,EAAD,EAAK,OAAL,EAAce,MAAd,CAAJ,EAA2B;AACrCK,MAAAA,QAAQ,EAAET,WAD2B;AAErCC,MAAAA,KAFqC;AAGrCW,MAAAA,eAHqC;AAIrCC,MAAAA,cAJqC;AAKrCC,MAAAA,OALqC;AAMrCC,MAAAA,OANqC;AAOrCL,MAAAA,YAAY,EAAE;AAPuB,KAA3B,CAAZ;AAUAd,IAAAA,WAAW,CAACO,WAAD,CAAX;AACD;;AAED,QAAMa,UAAU,GAAGrB,QAAQ,GACvB,EAAE,GAAGA,QAAL;AAAeG,IAAAA;AAAf,GADuB,GAEvB;AAAEH,IAAAA,QAAQ,EAAE,KAAZ;AAAmBG,IAAAA;AAAnB,GAFJ;AAIA,sBACE,QAAC,eAAD,CAAiB,QAAjB;AAA0B,IAAA,KAAK,EAAEkB,UAAjC;AAAA,cACGtB,KAAK,CAACuB;AADT;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;;GAjDQxB,gB;;KAAAA,gB;AAmDT,eAAeA,gBAAf","sourcesContent":["import { useState } from \"react\";\nimport UserInfoContext from \"./userInfo--context\";\nimport { doc, setDoc, getDoc } from \"firebase/firestore\";\nimport { signInWithPopup } from \"firebase/auth\";\nimport { db, provider, auth } from \"../../firebase-config\";\nimport createInitialData from \"../../Others/CreateInitialData/createInitialData\";\n\nfunction UserInfoProvider(props) {\n  const [userData, setUserData] = useState(false);\n\n  async function checkUserExist() {}\n\n  async function signInWithGoogle() {\n    const res = await signInWithPopup(auth, provider);\n    const { displayName, email } = res.user;\n    let userDataObj;\n\n    const userID = `${email}${displayName.split(\" \").join(\"\")}`;\n\n    const userDocSnap = await getDoc(doc(db, \"users\", userID));\n\n    if (userDocSnap.exists()) {\n      const { userName, displayTheme } = userDocSnap.data();\n      userDataObj = {\n        userName,\n        displayTheme,\n        userID,\n      };\n      return;\n    }\n\n    const [categoryExpense, categoryIncome, iconObj, iconArr] =\n      createInitialData();\n\n    await setDoc(doc(db, \"users\", userID), {\n      userName: displayName,\n      email,\n      categoryExpense,\n      categoryIncome,\n      iconObj,\n      iconArr,\n      displayTheme: \"black\",\n    });\n\n    setUserData(userDataObj);\n  }\n\n  const contextObj = userData\n    ? { ...userData, signInWithGoogle }\n    : { userData: false, signInWithGoogle };\n\n  return (\n    <UserInfoContext.Provider value={contextObj}>\n      {props.children}\n    </UserInfoContext.Provider>\n  );\n}\n\nexport default UserInfoProvider;\n"]},"metadata":{},"sourceType":"module"}