{"ast":null,"code":"var _jsxFileName = \"/Users/eyo/Desktop/project-expenseTracker-main/src/components/MainContent/Chart/ChartMain/ChartMain.js\",\n    _s = $RefreshSig$();\n\nimport { useRef, useEffect, useContext } from \"react\";\nimport ExpenseDataContext from \"../../../../store/expenseData/expenseData--context\";\nimport style from \"./ChartMain.module.css\";\nimport Chart from \"chart.js/auto\";\nimport createConfig from \"../../../Others/CreateChartData/createConfig\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst dateOptObj = {\n  month: \"short\"\n}; // const data1 = {\n//   labels: [\"Red\", \"Blue\", \"Yellow\"],\n//   datasets: [\n//     {\n//       label: \"My First Dataset\",\n//       data: [300, 50, 100],\n//       backgroundColor: [\n//         \"rgb(255, 99, 132)\",\n//         \"rgb(54, 162, 235)\",\n//         \"rgb(255, 205, 86)\",\n//       ],\n//       hoverOffset: 4,\n//     },\n//   ],\n// };\n// const config1 = {\n//   type: \"doughnut\",\n//   data: data1,\n// };\n\nfunction ChartMain(props) {\n  _s();\n\n  const chartRef = useRef(null);\n  const {\n    EXPENSE_DATA\n  } = useContext(ExpenseDataContext);\n  const config = createConfig(props.chartData.mainType, props.chartData.timeDuration, props.chartData.startingDate, props.chartData.endingDate, EXPENSE_DATA, props.chartData.mainCategory, props.chartData.subCategory);\n  useEffect(() => {\n    const chart = new Chart(chartRef.current, config);\n    return function cleanUp() {\n      chart.destroy();\n    };\n  }, [props.chartData]);\n  let charClassName = \"chart--bar\";\n  if (props.chartData.mainType === \"category\") charClassName = \"chart--circle\";\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: style.chartMain,\n    children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n      className: style[charClassName],\n      ref: chartRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ChartMain, \"s5lVG1FRM670SA5AkZoMH5TxWF8=\");\n\n_c = ChartMain;\nexport default ChartMain;\n\nfunction createStandardLabelsArr(duration, startingDate) {\n  const today = new Date(startingDate);\n  let labels = []; // one week\n\n  if (duration === \"7\") {\n    createStandardLabelsArrHelper(labels, 7, 1, \"day\", today);\n  }\n\n  if (duration === \"14\") {\n    createStandardLabelsArrHelper(labels, 14, 1, \"day\", today);\n  }\n\n  if (duration === \"30\") {\n    createStandardLabelsArrHelper(labels, 30, 1, \"day\", today);\n  }\n\n  if (duration === \"90\") {\n    createStandardLabelsArrHelper(labels, 30, 3, \"day\", today);\n  }\n\n  if (duration === \"6\") {\n    createStandardLabelsArrHelper(labels, 6, 1, \"month\", today);\n  }\n\n  if (duration === \"12\") {\n    createStandardLabelsArrHelper(labels, 12, 1, \"month\", today);\n  }\n\n  return labels;\n}\n\nfunction createStandardLabelsArrHelper(labels, duration, incrementAmount, dayMonth, today) {\n  let tmpDay = today;\n  let day;\n  let month;\n  let year = today.getFullYear();\n  let changeYear = false; // if it's increment by month, the day is never change\n  // we could put it outisde for-loop\n\n  if (dayMonth === \"month\") {\n    if (tmpDay.getDate() < 10) day = `0${tmpDay.getDate()}`;else day = tmpDay.getDate();\n  }\n\n  for (let i = 0; i < duration; i++) {\n    // incremenet by month\n    if (dayMonth === \"month\") tmpDay.setMonth(tmpDay.getMonth() + incrementAmount); // increment by day\n\n    if (dayMonth === \"day\") {\n      tmpDay.setDate(tmpDay.getDate() + incrementAmount); // day will change, so put this inside for-loop\n\n      if (tmpDay.getDate() < 10) day = `0${tmpDay.getDate()}`;else day = tmpDay.getDate();\n    }\n\n    if (tmpDay.getMonth() + 1 < 10) month = `0${tmpDay.getMonth() + 1}`;else month = tmpDay.getMonth() + 1; // increment year\n\n    if (changeYear) {\n      year++;\n      changeYear = false;\n    }\n\n    if (tmpDay.getMonth() === 11) changeYear = true;\n    labels.push(`${year}-${month}-${day}`);\n  }\n}\n/*\n if (timeDuration === \"6\" || timeDuration === \"12\") {\n    if (mainCategory === \"income\" && subCategory.length === 3) {\n      const labelsLength = labels.length;\n      let indexLabel = 0;\n      let indexData = 0;\n      let indexCurrentDate = true;\n      let currentMonth;\n      let currentAmount = 0;\n\n      while (indexLabel < labelsLength) {\n        // keep adding if it's still at current date(time)\n        while (indexCurrentDate) {\n          currentMonth = new Intl.DateTimeFormat(\"en-US\", dateOptObj).format(\n            new Date(filteredData[indexData]?.time)\n          );\n          // check date(time)\n          if (currentMonth === labels1[indexLabel]) {\n            // check main category\n            if (filteredData[indexData].category === \"income\") {\n              currentAmount += Number(filteredData[indexData].price);\n            }\n\n            indexData++;\n          } else indexCurrentDate = false;\n        }\n\n        data.push(currentAmount);\n\n        currentAmount = 0;\n        indexCurrentDate = true;\n        indexLabel++;\n      }\n    }\n\n    if (mainCategory === \"expense\" && subCategory.length === 6) {\n      const labelsLength = labels.length;\n      let indexLabel = 0;\n      let indexData = 0;\n      let indexCurrentDate = true;\n      let currentMonth;\n      let currentAmount = 0;\n\n      while (indexLabel < labelsLength) {\n        // keep adding if it's still at current date(time)\n        while (indexCurrentDate) {\n          console.log(filteredData);\n          if (!filteredData[indexData]?.time)\n            currentMonth = new Intl.DateTimeFormat(\"en-US\", dateOptObj).format(\n              new Date(filteredData[indexData]?.time)\n            );\n          console.log(currentMonth);\n\n          if (currentMonth === labels1[indexLabel]) {\n            // check main category\n            if (filteredData[indexData].category === \"income\") {\n              currentAmount += Number(filteredData[indexData].price);\n            }\n\n            indexData++;\n          } else indexCurrentDate = false;\n        }\n\n        data.push(currentAmount);\n\n        currentAmount = 0;\n        indexCurrentDate = true;\n        indexLabel++;\n      }\n    }\n  }\n  // day base\n  else {\n    if (mainCategory === \"income\" && subCategory.length === 3) {\n      const labelsLength = labels.length;\n      let indexLabel = 0;\n      let indexData = 0;\n      let indexCurrentDate = true;\n      let currentDate;\n      let currentAmount = 0;\n\n      while (indexLabel < labelsLength) {\n        currentDate = `${year}-${labels[indexLabel].slice(0, 2)}-${labels[\n          indexLabel\n        ].slice(2)}`;\n\n        // keep adding if it's still at current date(time)\n        if (indexData < filteredData.length - 1) {\n          while (indexCurrentDate) {\n            // check date(time)\n            if (filteredData[indexData].time === currentDate) {\n              // check main category\n              if (filteredData[indexData].category === \"income\") {\n                currentAmount += Number(filteredData[indexData].price);\n              }\n\n              indexData++;\n            } else indexCurrentDate = false;\n          }\n        }\n\n        data.push(currentAmount);\n\n        currentAmount = 0;\n        indexCurrentDate = true;\n        indexLabel++;\n      }\n    }\n\n    if (mainCategory === \"expense\" && subCategory.length === 6) {\n      const labelsLength = labels.length;\n      let indexLabel = 0;\n      let indexData = 0;\n      let indexCurrentDate = true;\n      let currentDate;\n      let currentAmount = 0;\n\n      while (indexLabel < labelsLength) {\n        currentDate = `${year}-${labels[indexLabel].slice(0, 2)}-${labels[\n          indexLabel\n        ].slice(2)}`;\n\n        // keep adding if it's still at current date(time)\n\n        while (indexCurrentDate) {\n          // check date(time)\n          if (filteredData[indexData]?.time === currentDate) {\n            // check main category\n            if (filteredData[indexData].category === \"expense\") {\n              currentAmount += Number(filteredData[indexData].price);\n            }\n\n            indexData++;\n          } else indexCurrentDate = false;\n        }\n\n        data.push(currentAmount);\n\n        currentAmount = 0;\n        indexCurrentDate = true;\n        indexLabel++;\n      }\n    }\n  }\n*/\n\n/*\n  // let configPPP;\n  // if (props.chartData.mainType === \"time\") {\n  //   let labels = [],\n  //     data = [];\n\n  //   const standardLabels = createStandardLabelsArr(\n  //     props.chartData.timeDuration,\n  //     props.chartData.startingDate\n  //   );\n\n  //   labels = createLabelsArr(standardLabels, props.chartData.timeDuration);\n\n  //   data = createDataArr(\n  //     standardLabels,\n  //     createFilteredData(standardLabels, EXPENSE_DATA),\n  //     props.chartData.timeDuration,\n  //     props.chartData.mainCategory,\n  //     props.chartData.subCategory\n  //   );\n\n  //   const dataObj = {\n  //     labels: labels,\n  //     datasets: [\n  //       {\n  //         label: \"\",\n  //         data: data,\n  //         backgroundColor: [\n  //           \"rgba(255, 99, 132, 0.2)\",\n  //           \"rgba(255, 159, 64, 0.2)\",\n  //           \"rgba(255, 205, 86, 0.2)\",\n  //           \"rgba(75, 192, 192, 0.2)\",\n  //           \"rgba(54, 162, 235, 0.2)\",\n  //           \"rgba(153, 102, 255, 0.2)\",\n  //           \"rgba(201, 203, 207, 0.2)\",\n  //         ],\n  //         borderColor: [\n  //           \"rgb(255, 99, 132)\",\n  //           \"rgb(255, 159, 64)\",\n  //           \"rgb(255, 205, 86)\",\n  //           \"rgb(75, 192, 192)\",\n  //           \"rgb(54, 162, 235)\",\n  //           \"rgb(153, 102, 255)\",\n  //           \"rgb(201, 203, 207)\",\n  //         ],\n  //         borderWidth: 1,\n  //       },\n  //     ],\n  //   };\n\n  //   const config = {\n  //     type: \"bar\",\n  //     data: dataObj,\n  //     options: {\n  //       scales: {\n  //         y: {\n  //           beginAtZero: true,\n  //         },\n  //       },\n  //     },\n  //   };\n\n  //   configPPP = config;\n  // } else {\n  //   const filteredData = EXPENSE_DATA.filter(\n  //     (element) =>\n  //       Number(new Date(element.time)) >=\n  //         Number(new Date(props.chartData.startingDate)) &&\n  //       Number(new Date(element.time)) <=\n  //         Number(new Date(props.chartData.endingDate)) &&\n  //       element.category === props.chartData.mainCategory\n  //   );\n\n  //   const labels = props.chartData.subCategory;\n  //   let newFilteredData = [];\n  //   labels.forEach((label) => {\n  //     newFilteredData.push(\n  //       filteredData.filter((data) => data.mainCate === label)\n  //     );\n  //   });\n\n  //   let dataArr = [];\n  //   newFilteredData.forEach((data) => {\n  //     let dataTmp;\n\n  //     if (data.length > 0) {\n  //       dataTmp = data.reduce((acc, cur) => (acc += Number(cur.price)), 0);\n  //     } else dataTmp = 0;\n\n  //     dataArr.push(dataTmp);\n  //   });\n\n  //   const data1 = {\n  //     labels: labels,\n  //     datasets: [\n  //       {\n  //         label: \"My First Dataset\",\n  //         data: dataArr,\n  //         backgroundColor: [\n  //           \"rgb(255, 99, 132)\",\n  //           \"rgb(255, 159, 64)\",\n  //           \"rgb(255, 205, 86)\",\n  //           \"rgb(75, 192, 192)\",\n  //           \"rgb(54, 162, 235)\",\n  //           \"rgb(153, 102, 255)\",\n  //           \"rgb(201, 203, 207)\",\n  //         ],\n  //         hoverOffset: 4,\n  //       },\n  //     ],\n  //   };\n\n  //   const config1 = {\n  //     type: \"doughnut\",\n  //     data: data1,\n  //   };\n\n  //   configPPP = config1;\n\n  //   // console.log(da);\n\n  //   // console.log(labels);\n  // }\n\n*/\n\n\nvar _c;\n\n$RefreshReg$(_c, \"ChartMain\");","map":{"version":3,"sources":["/Users/eyo/Desktop/project-expenseTracker-main/src/components/MainContent/Chart/ChartMain/ChartMain.js"],"names":["useRef","useEffect","useContext","ExpenseDataContext","style","Chart","createConfig","dateOptObj","month","ChartMain","props","chartRef","EXPENSE_DATA","config","chartData","mainType","timeDuration","startingDate","endingDate","mainCategory","subCategory","chart","current","cleanUp","destroy","charClassName","chartMain","createStandardLabelsArr","duration","today","Date","labels","createStandardLabelsArrHelper","incrementAmount","dayMonth","tmpDay","day","year","getFullYear","changeYear","getDate","i","setMonth","getMonth","setDate","push"],"mappings":"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":["import { useRef, useEffect, useContext } from \"react\";\nimport ExpenseDataContext from \"../../../../store/expenseData/expenseData--context\";\nimport style from \"./ChartMain.module.css\";\nimport Chart from \"chart.js/auto\";\nimport createConfig from \"../../../Others/CreateChartData/createConfig\";\n\nconst dateOptObj = { month: \"short\" };\n\n// const data1 = {\n//   labels: [\"Red\", \"Blue\", \"Yellow\"],\n//   datasets: [\n//     {\n//       label: \"My First Dataset\",\n//       data: [300, 50, 100],\n//       backgroundColor: [\n//         \"rgb(255, 99, 132)\",\n//         \"rgb(54, 162, 235)\",\n//         \"rgb(255, 205, 86)\",\n//       ],\n//       hoverOffset: 4,\n//     },\n//   ],\n// };\n\n// const config1 = {\n//   type: \"doughnut\",\n//   data: data1,\n// };\n\nfunction ChartMain(props) {\n  const chartRef = useRef(null);\n  const { EXPENSE_DATA } = useContext(ExpenseDataContext);\n\n  const config = createConfig(\n    props.chartData.mainType,\n    props.chartData.timeDuration,\n    props.chartData.startingDate,\n    props.chartData.endingDate,\n    EXPENSE_DATA,\n    props.chartData.mainCategory,\n    props.chartData.subCategory\n  );\n\n  useEffect(() => {\n    const chart = new Chart(chartRef.current, config);\n\n    return function cleanUp() {\n      chart.destroy();\n    };\n  }, [props.chartData]);\n\n  let charClassName = \"chart--bar\";\n  if (props.chartData.mainType === \"category\") charClassName = \"chart--circle\";\n\n  return (\n    <div className={style.chartMain}>\n      <canvas className={style[charClassName]} ref={chartRef}></canvas>\n    </div>\n  );\n}\n\nexport default ChartMain;\n\nfunction createStandardLabelsArr(duration, startingDate) {\n  const today = new Date(startingDate);\n\n  let labels = [];\n\n  // one week\n  if (duration === \"7\") {\n    createStandardLabelsArrHelper(labels, 7, 1, \"day\", today);\n  }\n\n  if (duration === \"14\") {\n    createStandardLabelsArrHelper(labels, 14, 1, \"day\", today);\n  }\n\n  if (duration === \"30\") {\n    createStandardLabelsArrHelper(labels, 30, 1, \"day\", today);\n  }\n\n  if (duration === \"90\") {\n    createStandardLabelsArrHelper(labels, 30, 3, \"day\", today);\n  }\n\n  if (duration === \"6\") {\n    createStandardLabelsArrHelper(labels, 6, 1, \"month\", today);\n  }\n\n  if (duration === \"12\") {\n    createStandardLabelsArrHelper(labels, 12, 1, \"month\", today);\n  }\n\n  return labels;\n}\n\nfunction createStandardLabelsArrHelper(\n  labels,\n  duration,\n  incrementAmount,\n  dayMonth,\n  today\n) {\n  let tmpDay = today;\n  let day;\n  let month;\n  let year = today.getFullYear();\n  let changeYear = false;\n\n  // if it's increment by month, the day is never change\n  // we could put it outisde for-loop\n  if (dayMonth === \"month\") {\n    if (tmpDay.getDate() < 10) day = `0${tmpDay.getDate()}`;\n    else day = tmpDay.getDate();\n  }\n\n  for (let i = 0; i < duration; i++) {\n    // incremenet by month\n    if (dayMonth === \"month\")\n      tmpDay.setMonth(tmpDay.getMonth() + incrementAmount);\n\n    // increment by day\n    if (dayMonth === \"day\") {\n      tmpDay.setDate(tmpDay.getDate() + incrementAmount);\n\n      // day will change, so put this inside for-loop\n      if (tmpDay.getDate() < 10) day = `0${tmpDay.getDate()}`;\n      else day = tmpDay.getDate();\n    }\n\n    if (tmpDay.getMonth() + 1 < 10) month = `0${tmpDay.getMonth() + 1}`;\n    else month = tmpDay.getMonth() + 1;\n\n    // increment year\n    if (changeYear) {\n      year++;\n      changeYear = false;\n    }\n    if (tmpDay.getMonth() === 11) changeYear = true;\n\n    labels.push(`${year}-${month}-${day}`);\n  }\n}\n\n/*\n if (timeDuration === \"6\" || timeDuration === \"12\") {\n    if (mainCategory === \"income\" && subCategory.length === 3) {\n      const labelsLength = labels.length;\n      let indexLabel = 0;\n      let indexData = 0;\n      let indexCurrentDate = true;\n      let currentMonth;\n      let currentAmount = 0;\n\n      while (indexLabel < labelsLength) {\n        // keep adding if it's still at current date(time)\n        while (indexCurrentDate) {\n          currentMonth = new Intl.DateTimeFormat(\"en-US\", dateOptObj).format(\n            new Date(filteredData[indexData]?.time)\n          );\n          // check date(time)\n          if (currentMonth === labels1[indexLabel]) {\n            // check main category\n            if (filteredData[indexData].category === \"income\") {\n              currentAmount += Number(filteredData[indexData].price);\n            }\n\n            indexData++;\n          } else indexCurrentDate = false;\n        }\n\n        data.push(currentAmount);\n\n        currentAmount = 0;\n        indexCurrentDate = true;\n        indexLabel++;\n      }\n    }\n\n    if (mainCategory === \"expense\" && subCategory.length === 6) {\n      const labelsLength = labels.length;\n      let indexLabel = 0;\n      let indexData = 0;\n      let indexCurrentDate = true;\n      let currentMonth;\n      let currentAmount = 0;\n\n      while (indexLabel < labelsLength) {\n        // keep adding if it's still at current date(time)\n        while (indexCurrentDate) {\n          console.log(filteredData);\n          if (!filteredData[indexData]?.time)\n            currentMonth = new Intl.DateTimeFormat(\"en-US\", dateOptObj).format(\n              new Date(filteredData[indexData]?.time)\n            );\n          console.log(currentMonth);\n\n          if (currentMonth === labels1[indexLabel]) {\n            // check main category\n            if (filteredData[indexData].category === \"income\") {\n              currentAmount += Number(filteredData[indexData].price);\n            }\n\n            indexData++;\n          } else indexCurrentDate = false;\n        }\n\n        data.push(currentAmount);\n\n        currentAmount = 0;\n        indexCurrentDate = true;\n        indexLabel++;\n      }\n    }\n  }\n  // day base\n  else {\n    if (mainCategory === \"income\" && subCategory.length === 3) {\n      const labelsLength = labels.length;\n      let indexLabel = 0;\n      let indexData = 0;\n      let indexCurrentDate = true;\n      let currentDate;\n      let currentAmount = 0;\n\n      while (indexLabel < labelsLength) {\n        currentDate = `${year}-${labels[indexLabel].slice(0, 2)}-${labels[\n          indexLabel\n        ].slice(2)}`;\n\n        // keep adding if it's still at current date(time)\n        if (indexData < filteredData.length - 1) {\n          while (indexCurrentDate) {\n            // check date(time)\n            if (filteredData[indexData].time === currentDate) {\n              // check main category\n              if (filteredData[indexData].category === \"income\") {\n                currentAmount += Number(filteredData[indexData].price);\n              }\n\n              indexData++;\n            } else indexCurrentDate = false;\n          }\n        }\n\n        data.push(currentAmount);\n\n        currentAmount = 0;\n        indexCurrentDate = true;\n        indexLabel++;\n      }\n    }\n\n    if (mainCategory === \"expense\" && subCategory.length === 6) {\n      const labelsLength = labels.length;\n      let indexLabel = 0;\n      let indexData = 0;\n      let indexCurrentDate = true;\n      let currentDate;\n      let currentAmount = 0;\n\n      while (indexLabel < labelsLength) {\n        currentDate = `${year}-${labels[indexLabel].slice(0, 2)}-${labels[\n          indexLabel\n        ].slice(2)}`;\n\n        // keep adding if it's still at current date(time)\n\n        while (indexCurrentDate) {\n          // check date(time)\n          if (filteredData[indexData]?.time === currentDate) {\n            // check main category\n            if (filteredData[indexData].category === \"expense\") {\n              currentAmount += Number(filteredData[indexData].price);\n            }\n\n            indexData++;\n          } else indexCurrentDate = false;\n        }\n\n        data.push(currentAmount);\n\n        currentAmount = 0;\n        indexCurrentDate = true;\n        indexLabel++;\n      }\n    }\n  }\n*/\n/*\n  // let configPPP;\n  // if (props.chartData.mainType === \"time\") {\n  //   let labels = [],\n  //     data = [];\n\n  //   const standardLabels = createStandardLabelsArr(\n  //     props.chartData.timeDuration,\n  //     props.chartData.startingDate\n  //   );\n\n  //   labels = createLabelsArr(standardLabels, props.chartData.timeDuration);\n\n  //   data = createDataArr(\n  //     standardLabels,\n  //     createFilteredData(standardLabels, EXPENSE_DATA),\n  //     props.chartData.timeDuration,\n  //     props.chartData.mainCategory,\n  //     props.chartData.subCategory\n  //   );\n\n  //   const dataObj = {\n  //     labels: labels,\n  //     datasets: [\n  //       {\n  //         label: \"\",\n  //         data: data,\n  //         backgroundColor: [\n  //           \"rgba(255, 99, 132, 0.2)\",\n  //           \"rgba(255, 159, 64, 0.2)\",\n  //           \"rgba(255, 205, 86, 0.2)\",\n  //           \"rgba(75, 192, 192, 0.2)\",\n  //           \"rgba(54, 162, 235, 0.2)\",\n  //           \"rgba(153, 102, 255, 0.2)\",\n  //           \"rgba(201, 203, 207, 0.2)\",\n  //         ],\n  //         borderColor: [\n  //           \"rgb(255, 99, 132)\",\n  //           \"rgb(255, 159, 64)\",\n  //           \"rgb(255, 205, 86)\",\n  //           \"rgb(75, 192, 192)\",\n  //           \"rgb(54, 162, 235)\",\n  //           \"rgb(153, 102, 255)\",\n  //           \"rgb(201, 203, 207)\",\n  //         ],\n  //         borderWidth: 1,\n  //       },\n  //     ],\n  //   };\n\n  //   const config = {\n  //     type: \"bar\",\n  //     data: dataObj,\n  //     options: {\n  //       scales: {\n  //         y: {\n  //           beginAtZero: true,\n  //         },\n  //       },\n  //     },\n  //   };\n\n  //   configPPP = config;\n  // } else {\n  //   const filteredData = EXPENSE_DATA.filter(\n  //     (element) =>\n  //       Number(new Date(element.time)) >=\n  //         Number(new Date(props.chartData.startingDate)) &&\n  //       Number(new Date(element.time)) <=\n  //         Number(new Date(props.chartData.endingDate)) &&\n  //       element.category === props.chartData.mainCategory\n  //   );\n\n  //   const labels = props.chartData.subCategory;\n  //   let newFilteredData = [];\n  //   labels.forEach((label) => {\n  //     newFilteredData.push(\n  //       filteredData.filter((data) => data.mainCate === label)\n  //     );\n  //   });\n\n  //   let dataArr = [];\n  //   newFilteredData.forEach((data) => {\n  //     let dataTmp;\n\n  //     if (data.length > 0) {\n  //       dataTmp = data.reduce((acc, cur) => (acc += Number(cur.price)), 0);\n  //     } else dataTmp = 0;\n\n  //     dataArr.push(dataTmp);\n  //   });\n\n  //   const data1 = {\n  //     labels: labels,\n  //     datasets: [\n  //       {\n  //         label: \"My First Dataset\",\n  //         data: dataArr,\n  //         backgroundColor: [\n  //           \"rgb(255, 99, 132)\",\n  //           \"rgb(255, 159, 64)\",\n  //           \"rgb(255, 205, 86)\",\n  //           \"rgb(75, 192, 192)\",\n  //           \"rgb(54, 162, 235)\",\n  //           \"rgb(153, 102, 255)\",\n  //           \"rgb(201, 203, 207)\",\n  //         ],\n  //         hoverOffset: 4,\n  //       },\n  //     ],\n  //   };\n\n  //   const config1 = {\n  //     type: \"doughnut\",\n  //     data: data1,\n  //   };\n\n  //   configPPP = config1;\n\n  //   // console.log(da);\n\n  //   // console.log(labels);\n  // }\n\n*/\n"]},"metadata":{},"sourceType":"module"}