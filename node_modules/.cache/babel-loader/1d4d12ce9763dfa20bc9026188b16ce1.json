{"ast":null,"code":"import compareTime from \"../compareTime\";\nimport compareTimeWithRange from \"../compareTimeWithRange\";\n/*\nmain logic\n1) loop through each date inside standardLabels\n2) for each loop, use while-loop to keep accumulating the total amount within this date\n3) there are several conditions to make sure catching the correct data\n*/\n\nfunction createBarDataArr(standardLabels, filteredData, timeDuration, mainCategory, subCategory, showLabel, mainCategoryData, subCategoryData) {\n  console.log(subCategoryData);\n  const data = [];\n  const checkboxNoChange = mainCategory === \"expense\" && subCategory.length === mainCategoryData.length || mainCategory === \"income\" && subCategory.length === subCategoryData.length;\n  const type = timeDuration === \"12\" || timeDuration === \"6\" ? \"month\" : \"day\";\n  let indexData = 0;\n  let indexCurrentDate = true;\n  let currentAmount = 0;\n  let currentDate;\n\n  for (let i = 0; i < standardLabels.length; i++) {\n    // Reference 1\n    if (type === \"month\" && i === standardLabels.length - 1) break;\n    currentDate = new Date(standardLabels[i]);\n\n    while (indexCurrentDate) {\n      // Reference 2\n      let timeValidIndex = filteredData[indexData] && compareTime(filteredData[indexData], currentDate);\n\n      if (type === \"month\") {\n        timeValidIndex = filteredData[indexData] && compareTimeWithRange(filteredData[indexData], currentDate, new Date(standardLabels[i + 1]));\n      }\n\n      if (timeValidIndex) {\n        if (filteredData[indexData].category === mainCategory) {\n          // Reference 3\n          if (checkboxNoChange || subCategory.includes(filteredData[indexData].mainCate)) {\n            currentAmount += Number(filteredData[indexData].price);\n          }\n        } // index for expenseData, only update it when it's within the validTimeIndex\n\n\n        indexData++;\n      } // if not, we're done for while-loop which means going to next date (standardLabel)\n      else indexCurrentDate = false;\n    } // add the accumlated data, and empty\n\n\n    data.push(currentAmount);\n    currentAmount = 0;\n    indexCurrentDate = true;\n  }\n\n  return data;\n}\n\nexport default createBarDataArr;\n/*\nReference 1\nIf type === \"month\", have final extra element for accumulating month data\n(See createStandardLabels)\nLast data is for the purpose of accumulating month data\nAll we need is looping through from 0 ~ n - 2\n*/\n\n/*\nReference 2\nfind the date of data is less or eqaul to current date\nkeep doing the same thing until the date of data is greater than curret date\nwhich means have to go to next date\n\n\"month\" and \"day\" have different validIndex\nbecause it uses different helper function to validate\n\nNote\nBoth of validIndex has to first check if filteredData[indexData] is not undefined\nIt may have\n*/\n\n/*\nReference 3\n1) if checkbox has no change which means the user want to get all category, so can directly add the price\n2) otherwise, have to make sure the category is correct\n*/","map":{"version":3,"sources":["/Users/eyo/Desktop/expense-tracker/src/Others/CreateChartData/createBarDataArr.js"],"names":["compareTime","compareTimeWithRange","createBarDataArr","standardLabels","filteredData","timeDuration","mainCategory","subCategory","showLabel","mainCategoryData","subCategoryData","console","log","data","checkboxNoChange","length","type","indexData","indexCurrentDate","currentAmount","currentDate","i","Date","timeValidIndex","category","includes","mainCate","Number","price","push"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,gBAAxB;AACA,OAAOC,oBAAP,MAAiC,yBAAjC;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,gBAAT,CACEC,cADF,EAEEC,YAFF,EAGEC,YAHF,EAIEC,YAJF,EAKEC,WALF,EAMEC,SANF,EAOEC,gBAPF,EAQEC,eARF,EASE;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYF,eAAZ;AACA,QAAMG,IAAI,GAAG,EAAb;AACA,QAAMC,gBAAgB,GACnBR,YAAY,KAAK,SAAjB,IACCC,WAAW,CAACQ,MAAZ,KAAuBN,gBAAgB,CAACM,MAD1C,IAECT,YAAY,KAAK,QAAjB,IACCC,WAAW,CAACQ,MAAZ,KAAuBL,eAAe,CAACK,MAJ3C;AAKA,QAAMC,IAAI,GAAGX,YAAY,KAAK,IAAjB,IAAyBA,YAAY,KAAK,GAA1C,GAAgD,OAAhD,GAA0D,KAAvE;AACA,MAAIY,SAAS,GAAG,CAAhB;AACA,MAAIC,gBAAgB,GAAG,IAAvB;AACA,MAAIC,aAAa,GAAG,CAApB;AACA,MAAIC,WAAJ;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGlB,cAAc,CAACY,MAAnC,EAA2CM,CAAC,EAA5C,EAAgD;AAC9C;AACA,QAAIL,IAAI,KAAK,OAAT,IAAoBK,CAAC,KAAKlB,cAAc,CAACY,MAAf,GAAwB,CAAtD,EAAyD;AAEzDK,IAAAA,WAAW,GAAG,IAAIE,IAAJ,CAASnB,cAAc,CAACkB,CAAD,CAAvB,CAAd;;AAEA,WAAOH,gBAAP,EAAyB;AACvB;AACA,UAAIK,cAAc,GAChBnB,YAAY,CAACa,SAAD,CAAZ,IACAjB,WAAW,CAACI,YAAY,CAACa,SAAD,CAAb,EAA0BG,WAA1B,CAFb;;AAIA,UAAIJ,IAAI,KAAK,OAAb,EAAsB;AACpBO,QAAAA,cAAc,GACZnB,YAAY,CAACa,SAAD,CAAZ,IACAhB,oBAAoB,CAClBG,YAAY,CAACa,SAAD,CADM,EAElBG,WAFkB,EAGlB,IAAIE,IAAJ,CAASnB,cAAc,CAACkB,CAAC,GAAG,CAAL,CAAvB,CAHkB,CAFtB;AAOD;;AAED,UAAIE,cAAJ,EAAoB;AAClB,YAAInB,YAAY,CAACa,SAAD,CAAZ,CAAwBO,QAAxB,KAAqClB,YAAzC,EAAuD;AACrD;AACA,cACEQ,gBAAgB,IAChBP,WAAW,CAACkB,QAAZ,CAAqBrB,YAAY,CAACa,SAAD,CAAZ,CAAwBS,QAA7C,CAFF,EAGE;AACAP,YAAAA,aAAa,IAAIQ,MAAM,CAACvB,YAAY,CAACa,SAAD,CAAZ,CAAwBW,KAAzB,CAAvB;AACD;AACF,SATiB,CAWlB;;;AACAX,QAAAA,SAAS;AACV,OAbD,CAcA;AAdA,WAeKC,gBAAgB,GAAG,KAAnB;AACN,KAtC6C,CAwC9C;;;AACAL,IAAAA,IAAI,CAACgB,IAAL,CAAUV,aAAV;AACAA,IAAAA,aAAa,GAAG,CAAhB;AACAD,IAAAA,gBAAgB,GAAG,IAAnB;AACD;;AAED,SAAOL,IAAP;AACD;;AAED,eAAeX,gBAAf;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","sourcesContent":["import compareTime from \"../compareTime\";\nimport compareTimeWithRange from \"../compareTimeWithRange\";\n\n/*\nmain logic\n1) loop through each date inside standardLabels\n2) for each loop, use while-loop to keep accumulating the total amount within this date\n3) there are several conditions to make sure catching the correct data\n*/\nfunction createBarDataArr(\n  standardLabels,\n  filteredData,\n  timeDuration,\n  mainCategory,\n  subCategory,\n  showLabel,\n  mainCategoryData,\n  subCategoryData\n) {\n  console.log(subCategoryData);\n  const data = [];\n  const checkboxNoChange =\n    (mainCategory === \"expense\" &&\n      subCategory.length === mainCategoryData.length) ||\n    (mainCategory === \"income\" &&\n      subCategory.length === subCategoryData.length);\n  const type = timeDuration === \"12\" || timeDuration === \"6\" ? \"month\" : \"day\";\n  let indexData = 0;\n  let indexCurrentDate = true;\n  let currentAmount = 0;\n  let currentDate;\n\n  for (let i = 0; i < standardLabels.length; i++) {\n    // Reference 1\n    if (type === \"month\" && i === standardLabels.length - 1) break;\n\n    currentDate = new Date(standardLabels[i]);\n\n    while (indexCurrentDate) {\n      // Reference 2\n      let timeValidIndex =\n        filteredData[indexData] &&\n        compareTime(filteredData[indexData], currentDate);\n\n      if (type === \"month\") {\n        timeValidIndex =\n          filteredData[indexData] &&\n          compareTimeWithRange(\n            filteredData[indexData],\n            currentDate,\n            new Date(standardLabels[i + 1])\n          );\n      }\n\n      if (timeValidIndex) {\n        if (filteredData[indexData].category === mainCategory) {\n          // Reference 3\n          if (\n            checkboxNoChange ||\n            subCategory.includes(filteredData[indexData].mainCate)\n          ) {\n            currentAmount += Number(filteredData[indexData].price);\n          }\n        }\n\n        // index for expenseData, only update it when it's within the validTimeIndex\n        indexData++;\n      }\n      // if not, we're done for while-loop which means going to next date (standardLabel)\n      else indexCurrentDate = false;\n    }\n\n    // add the accumlated data, and empty\n    data.push(currentAmount);\n    currentAmount = 0;\n    indexCurrentDate = true;\n  }\n\n  return data;\n}\n\nexport default createBarDataArr;\n\n/*\nReference 1\nIf type === \"month\", have final extra element for accumulating month data\n(See createStandardLabels)\nLast data is for the purpose of accumulating month data\nAll we need is looping through from 0 ~ n - 2\n*/\n\n/*\nReference 2\nfind the date of data is less or eqaul to current date\nkeep doing the same thing until the date of data is greater than curret date\nwhich means have to go to next date\n\n\"month\" and \"day\" have different validIndex\nbecause it uses different helper function to validate\n\nNote\nBoth of validIndex has to first check if filteredData[indexData] is not undefined\nIt may have\n*/\n\n/*\nReference 3\n1) if checkbox has no change which means the user want to get all category, so can directly add the price\n2) otherwise, have to make sure the category is correct\n*/\n"]},"metadata":{},"sourceType":"module"}