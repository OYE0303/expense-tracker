{"ast":null,"code":"var _jsxFileName = \"/Users/eyo/Desktop/expense-tracker/src/components/MainContent/Chart/ChartPic/ChartPic.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useRef, useEffect, useContext } from \"react\";\nimport ExpenseDataContext from \"../../../../store/expenseData/expenseData--context\";\nimport CategoryContext from \"../../../../store/category/category--context\";\nimport DisplayThemeContext from \"../../../../store/displayTheme/displayTheme--context\";\nimport Chart from \"chart.js/auto\";\nimport createConfigObj from \"../../../../Others/CreateChartData/createConfigObj\";\nimport createChartDataArr from \"../../../../Others/CreateChartData/createChartDataArr\";\nimport style from \"./ChartPic.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ChartPic(props) {\n  _s();\n\n  const chartRef = useRef(null);\n  const {\n    expenseData\n  } = useContext(ExpenseDataContext);\n  const {\n    categoryExpense,\n    categoryIncome\n  } = useContext(CategoryContext);\n  const {\n    displayTheme\n  } = useContext(DisplayThemeContext); // note that createChartDataArr will return an array\n\n  const config = createConfigObj(...createChartDataArr(props.chartData.mainType, props.chartData.timeDuration, props.chartData.startingDate, props.chartData.endingDate, expenseData, props.chartData.mainCategory, props.chartData.subCategory, true, // show the label\n  Object.keys(categoryExpense), Object.keys(categoryIncome), displayTheme));\n  useEffect(() => {\n    const chart = new Chart(chartRef.current, config);\n    return function cleanUp() {\n      chart.destroy();\n    };\n  }, [props.chartData, config]);\n  let chartClassName = style[\"chart--bar\"];\n  if (props.chartData.mainType === \"category\") chartClassName = style[\"chart--pie\"];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `${style.chart} ${chartClassName}`,\n    children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: chartRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n} // Reference 1\n\n\n_s(ChartPic, \"x9Y6P9FPUAjT2k239ho0ZRHQyTI=\");\n\n_c = ChartPic;\nexport default _c2 = /*#__PURE__*/React.memo(ChartPic);\n/*\nReference 1\nIn the parent function (Chart)\nThe component will re-render when the size is changing\nAvoid multiple and meaningless re-render, use React.memo()\n*/\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ChartPic\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/Users/eyo/Desktop/expense-tracker/src/components/MainContent/Chart/ChartPic/ChartPic.js"],"names":["React","useRef","useEffect","useContext","ExpenseDataContext","CategoryContext","DisplayThemeContext","Chart","createConfigObj","createChartDataArr","style","ChartPic","props","chartRef","expenseData","categoryExpense","categoryIncome","displayTheme","config","chartData","mainType","timeDuration","startingDate","endingDate","mainCategory","subCategory","Object","keys","chart","current","cleanUp","destroy","chartClassName","memo"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,EAAiBC,SAAjB,EAA4BC,UAA5B,QAA8C,OAA9C;AACA,OAAOC,kBAAP,MAA+B,oDAA/B;AACA,OAAOC,eAAP,MAA4B,8CAA5B;AACA,OAAOC,mBAAP,MAAgC,sDAAhC;AACA,OAAOC,KAAP,MAAkB,eAAlB;AACA,OAAOC,eAAP,MAA4B,oDAA5B;AACA,OAAOC,kBAAP,MAA+B,uDAA/B;AACA,OAAOC,KAAP,MAAkB,uBAAlB;;;AAEA,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AAAA;;AACvB,QAAMC,QAAQ,GAAGZ,MAAM,CAAC,IAAD,CAAvB;AACA,QAAM;AAAEa,IAAAA;AAAF,MAAkBX,UAAU,CAACC,kBAAD,CAAlC;AACA,QAAM;AAAEW,IAAAA,eAAF;AAAmBC,IAAAA;AAAnB,MAAsCb,UAAU,CAACE,eAAD,CAAtD;AACA,QAAM;AAAEY,IAAAA;AAAF,MAAmBd,UAAU,CAACG,mBAAD,CAAnC,CAJuB,CAMvB;;AACA,QAAMY,MAAM,GAAGV,eAAe,CAC5B,GAAGC,kBAAkB,CACnBG,KAAK,CAACO,SAAN,CAAgBC,QADG,EAEnBR,KAAK,CAACO,SAAN,CAAgBE,YAFG,EAGnBT,KAAK,CAACO,SAAN,CAAgBG,YAHG,EAInBV,KAAK,CAACO,SAAN,CAAgBI,UAJG,EAKnBT,WALmB,EAMnBF,KAAK,CAACO,SAAN,CAAgBK,YANG,EAOnBZ,KAAK,CAACO,SAAN,CAAgBM,WAPG,EAQnB,IARmB,EAQb;AACNC,EAAAA,MAAM,CAACC,IAAP,CAAYZ,eAAZ,CATmB,EAUnBW,MAAM,CAACC,IAAP,CAAYX,cAAZ,CAVmB,EAWnBC,YAXmB,CADO,CAA9B;AAgBAf,EAAAA,SAAS,CAAC,MAAM;AACd,UAAM0B,KAAK,GAAG,IAAIrB,KAAJ,CAAUM,QAAQ,CAACgB,OAAnB,EAA4BX,MAA5B,CAAd;AAEA,WAAO,SAASY,OAAT,GAAmB;AACxBF,MAAAA,KAAK,CAACG,OAAN;AACD,KAFD;AAGD,GANQ,EAMN,CAACnB,KAAK,CAACO,SAAP,EAAkBD,MAAlB,CANM,CAAT;AAQA,MAAIc,cAAc,GAAGtB,KAAK,CAAC,YAAD,CAA1B;AACA,MAAIE,KAAK,CAACO,SAAN,CAAgBC,QAAhB,KAA6B,UAAjC,EACEY,cAAc,GAAGtB,KAAK,CAAC,YAAD,CAAtB;AAEF,sBACE;AAAK,IAAA,SAAS,EAAG,GAAEA,KAAK,CAACkB,KAAM,IAAGI,cAAe,EAAjD;AAAA,2BACE;AAAQ,MAAA,GAAG,EAAEnB;AAAb;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,C,CAED;;;GA1CSF,Q;;KAAAA,Q;AA2CT,kCAAeX,KAAK,CAACiC,IAAN,CAAWtB,QAAX,CAAf;AAEA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React from \"react\";\nimport { useRef, useEffect, useContext } from \"react\";\nimport ExpenseDataContext from \"../../../../store/expenseData/expenseData--context\";\nimport CategoryContext from \"../../../../store/category/category--context\";\nimport DisplayThemeContext from \"../../../../store/displayTheme/displayTheme--context\";\nimport Chart from \"chart.js/auto\";\nimport createConfigObj from \"../../../../Others/CreateChartData/createConfigObj\";\nimport createChartDataArr from \"../../../../Others/CreateChartData/createChartDataArr\";\nimport style from \"./ChartPic.module.css\";\n\nfunction ChartPic(props) {\n  const chartRef = useRef(null);\n  const { expenseData } = useContext(ExpenseDataContext);\n  const { categoryExpense, categoryIncome } = useContext(CategoryContext);\n  const { displayTheme } = useContext(DisplayThemeContext);\n\n  // note that createChartDataArr will return an array\n  const config = createConfigObj(\n    ...createChartDataArr(\n      props.chartData.mainType,\n      props.chartData.timeDuration,\n      props.chartData.startingDate,\n      props.chartData.endingDate,\n      expenseData,\n      props.chartData.mainCategory,\n      props.chartData.subCategory,\n      true, // show the label\n      Object.keys(categoryExpense),\n      Object.keys(categoryIncome),\n      displayTheme\n    )\n  );\n\n  useEffect(() => {\n    const chart = new Chart(chartRef.current, config);\n\n    return function cleanUp() {\n      chart.destroy();\n    };\n  }, [props.chartData, config]);\n\n  let chartClassName = style[\"chart--bar\"];\n  if (props.chartData.mainType === \"category\")\n    chartClassName = style[\"chart--pie\"];\n\n  return (\n    <div className={`${style.chart} ${chartClassName}`}>\n      <canvas ref={chartRef}></canvas>\n    </div>\n  );\n}\n\n// Reference 1\nexport default React.memo(ChartPic);\n\n/*\nReference 1\nIn the parent function (Chart)\nThe component will re-render when the size is changing\nAvoid multiple and meaningless re-render, use React.memo()\n*/\n"]},"metadata":{},"sourceType":"module"}