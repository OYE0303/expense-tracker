{"ast":null,"code":"import createPreAccAmount from \"./createPreAccAmount\";\n\nfunction createChartDataArr(labels, expenseData) {\n  const finalDataArr = [];\n  labels.forEach(label => {\n    const curAccAmount = createPreAccAmount(\"income\", expenseData, label) - createPreAccAmount(\"expense\", expenseData, label);\n    finalDataArr.push(curAccAmount);\n  });\n  return finalDataArr;\n}\n\nfunction test(labels, expenseData) {\n  const finalDataArr = [];\n  let curAccAmountExpense = 0;\n  let curAccAmountIncome = 0;\n  let expensDataIndex = 0;\n  let labelIndex = 0;\n  let curLabelTime = Number(new Date(labels[0]));\n\n  while (expensDataIndex < expenseData.length) {\n    console.log(labelIndex);\n    const data = expenseData[expensDataIndex];\n\n    if (Number(new Date(data.time)) > curLabelTime) {\n      curLabelTime = Number(new Date(labels[++labelIndex]));\n      finalDataArr.push(curAccAmountIncome - curAccAmountExpense);\n    } else {\n      if (data.category === \"expense\") curAccAmountExpense += Number(data.price);else curAccAmountIncome += Number(data.price);\n      expensDataIndex++;\n    }\n  }\n\n  finalDataArr.push(curAccAmountIncome - curAccAmountExpense);\n  return finalDataArr;\n}\n\nfunction testtt() {\n  let index = 0;\n\n  while (true) {\n    if (index > 5) break;\n    console.log(++index);\n  }\n}\n\nconsole.log(testtt());\nconst ggg = [{\n  category: \"expense\",\n  mainCate: \"food\",\n  subCate: \"breakfast\",\n  time: \"2021-09-15\",\n  price: \"100\"\n}, {\n  category: \"income\",\n  mainCate: \"food\",\n  subCate: \"breakfast\",\n  time: \"2021-09-15\",\n  price: \"10000\"\n}, {\n  category: \"expense\",\n  mainCate: \"food\",\n  subCate: \"breakfast\",\n  time: \"2021-09-15\",\n  price: \"200\"\n}, {\n  category: \"expense\",\n  mainCate: \"food\",\n  subCate: \"breakfast\",\n  time: \"2021-09-15\",\n  price: \"300\"\n}, {\n  category: \"expense\",\n  mainCate: \"food\",\n  subCate: \"breakfast\",\n  time: \"2021-09-16\",\n  price: \"100\"\n}, {\n  category: \"expense\",\n  mainCate: \"food\",\n  subCate: \"breakfast\",\n  time: \"2021-09-16\",\n  price: \"200\"\n}, {\n  category: \"expense\",\n  mainCate: \"food\",\n  subCate: \"breakfast\",\n  time: \"2021-09-16\",\n  price: \"300\"\n}, {\n  category: \"expense\",\n  mainCate: \"food\",\n  subCate: \"breakfast\",\n  time: \"2021-09-17\",\n  price: \"100\"\n}, {\n  category: \"expense\",\n  mainCate: \"food\",\n  subCate: \"breakfast\",\n  time: \"2021-09-17\",\n  price: \"200\"\n}, {\n  category: \"expense\",\n  mainCate: \"food\",\n  subCate: \"breakfast\",\n  time: \"2021-09-17\",\n  price: \"300\"\n}, {\n  category: \"expense\",\n  mainCate: \"food\",\n  subCate: \"breakfast\",\n  time: \"2021-09-18\",\n  price: \"400\"\n}, {\n  category: \"expense\",\n  mainCate: \"food\",\n  subCate: \"breakfast\",\n  time: \"2021-09-19\",\n  price: \"500\"\n}, {\n  category: \"expense\",\n  mainCate: \"food\",\n  subCate: \"breakfast\",\n  time: \"2021-09-20\",\n  price: \"600\"\n}, {\n  category: \"expense\",\n  mainCate: \"food\",\n  subCate: \"breakfast\",\n  time: \"2021-09-21\",\n  price: \"700\"\n}, {\n  category: \"income\",\n  mainCate: \"food\",\n  subCate: \"breakfast\",\n  time: \"2021-09-21\",\n  price: \"1000\"\n}, {\n  category: \"income\",\n  mainCate: \"food\",\n  subCate: \"breakfast\",\n  time: \"2021-09-22\",\n  price: \"1000\"\n}, {\n  category: \"income\",\n  mainCate: \"food\",\n  subCate: \"breakfast\",\n  time: \"2021-09-23\",\n  price: \"1000\"\n}]; // console.log(\n//   test(\n//     [\n//       \"2021-09-15\",\n//       \"2021-09-16\",\n//       \"2021-09-17\",\n//       \"2021-09-18\",\n//       \"2021-09-19\",\n//       \"2021-09-20\",\n//       \"2021-09-21\",\n//     ],\n//     ggg\n//   )\n// );\n\nexport default createChartDataArr;\n/*\nfunction createChartDataArr1(labels, expenseData) {\n  const newExpenseData = createFilteredData(labels, expenseData);\n\n  const prevTotalAccAmount =\n    createPreAccAmount(\"income\", expenseData, labels[0]) -\n    createPreAccAmount(\"expense\", expenseData, labels[0]);\n\n  const newExpenseDataExpense = newExpenseData.filter(\n    (element) => element.category === \"expense\"\n  );\n  const newExpenseDataIncome = newExpenseData.filter(\n    (element) => element.category === \"income\"\n  );\n\n  const dataArrExpense = createDataArrAccount(labels, newExpenseDataExpense);\n  const dataArrIncome = createDataArrAccount(labels, newExpenseDataIncome);\n\n  const finalDataArr = [];\n\n  dataArrExpense.forEach((expense, index) => {\n    finalDataArr.push(dataArrIncome[index] - expense + prevTotalAccAmount);\n  });\n\n  return finalDataArr;\n}\n*/\n\n/*\nfunction createDataArrAccount(labels, expensData) {\n  const data = [];\n  let indexCurrentDate = true;\n  let currentAmount = 0;\n  let indexData = 0;\n  let yearLabel, monthLabel, dayLabel, yearDate, monthData, dayData;\n\n  for (let i = 0; i < labels.length; i++) {\n    yearLabel = labels[i].slice(0, 4);\n    monthLabel = labels[i].slice(5, 7);\n    dayLabel = labels[i].slice(8);\n\n    while (indexCurrentDate) {\n      yearDate = expensData[indexData]?.time.slice(0, 4);\n      monthData = expensData[indexData]?.time.slice(5, 7);\n      dayData = expensData[indexData]?.time.slice(8);\n\n      if (\n        yearLabel === yearDate &&\n        monthLabel === monthData &&\n        dayLabel >= dayData\n      ) {\n        currentAmount += Number(expensData[indexData].price);\n        indexData++;\n      } else indexCurrentDate = false;\n    }\n\n    data.push(currentAmount);\n    indexCurrentDate = true;\n  }\n\n  return data;\n}\n\n*/","map":{"version":3,"sources":["/Users/eyo/Desktop/project-expenseTracker-main/src/Others/CreateAccountData/CreateChartDataArr.js"],"names":["createPreAccAmount","createChartDataArr","labels","expenseData","finalDataArr","forEach","label","curAccAmount","push","test","curAccAmountExpense","curAccAmountIncome","expensDataIndex","labelIndex","curLabelTime","Number","Date","length","console","log","data","time","category","price","testtt","index","ggg","mainCate","subCate"],"mappings":"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AIEP,EAAAA,IAAI,EAAE,YAJR;AAKEE,EAAAA,KAAK,EAAE;AALT,CArGU,EA4GV;AACED,EAAAA,QAAQ,EAAE,QADZ;AAEEK,EAAAA,QAAQ,EAAE,MAFZ;AAGEC,EAAAA,OAAO,EAAE,WAHX;AAIEP,EAAAA,IAAI,EAAE,YAJR;AAKEE,EAAAA,KAAK,EAAE;AALT,CA5GU,EAmHV;AACED,EAAAA,QAAQ,EAAE,QADZ;AAEEK,EAAAA,QAAQ,EAAE,MAFZ;AAGEC,EAAAA,OAAO,EAAE,WAHX;AAIEP,EAAAA,IAAI,EAAE,YAJR;AAKEE,EAAAA,KAAK,EAAE;AALT,CAnHU,CAAZ,C,CA4HA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAetB,kBAAf;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import createPreAccAmount from \"./createPreAccAmount\";\n\nfunction createChartDataArr(labels, expenseData) {\n  const finalDataArr = [];\n\n  labels.forEach((label) => {\n    const curAccAmount =\n      createPreAccAmount(\"income\", expenseData, label) -\n      createPreAccAmount(\"expense\", expenseData, label);\n\n    finalDataArr.push(curAccAmount);\n  });\n\n  return finalDataArr;\n}\n\nfunction test(labels, expenseData) {\n  const finalDataArr = [];\n\n  let curAccAmountExpense = 0;\n  let curAccAmountIncome = 0;\n  let expensDataIndex = 0;\n  let labelIndex = 0;\n\n  let curLabelTime = Number(new Date(labels[0]));\n\n  while (expensDataIndex < expenseData.length) {\n    console.log(labelIndex);\n    const data = expenseData[expensDataIndex];\n\n    if (Number(new Date(data.time)) > curLabelTime) {\n      curLabelTime = Number(new Date(labels[++labelIndex]));\n      finalDataArr.push(curAccAmountIncome - curAccAmountExpense);\n    } else {\n      if (data.category === \"expense\")\n        curAccAmountExpense += Number(data.price);\n      else curAccAmountIncome += Number(data.price);\n\n      expensDataIndex++;\n    }\n  }\n\n  finalDataArr.push(curAccAmountIncome - curAccAmountExpense);\n\n  return finalDataArr;\n}\n\nfunction testtt() {\n  let index = 0;\n\n  while (true) {\n    if (index > 5) break;\n\n    console.log(++index);\n  }\n}\n\nconsole.log(testtt());\n\nconst ggg = [\n  {\n    category: \"expense\",\n    mainCate: \"food\",\n    subCate: \"breakfast\",\n    time: \"2021-09-15\",\n    price: \"100\",\n  },\n  {\n    category: \"income\",\n    mainCate: \"food\",\n    subCate: \"breakfast\",\n    time: \"2021-09-15\",\n    price: \"10000\",\n  },\n  {\n    category: \"expense\",\n    mainCate: \"food\",\n    subCate: \"breakfast\",\n    time: \"2021-09-15\",\n    price: \"200\",\n  },\n  {\n    category: \"expense\",\n    mainCate: \"food\",\n    subCate: \"breakfast\",\n    time: \"2021-09-15\",\n    price: \"300\",\n  },\n  {\n    category: \"expense\",\n    mainCate: \"food\",\n    subCate: \"breakfast\",\n    time: \"2021-09-16\",\n    price: \"100\",\n  },\n  {\n    category: \"expense\",\n    mainCate: \"food\",\n    subCate: \"breakfast\",\n    time: \"2021-09-16\",\n    price: \"200\",\n  },\n  {\n    category: \"expense\",\n    mainCate: \"food\",\n    subCate: \"breakfast\",\n    time: \"2021-09-16\",\n    price: \"300\",\n  },\n  {\n    category: \"expense\",\n    mainCate: \"food\",\n    subCate: \"breakfast\",\n    time: \"2021-09-17\",\n    price: \"100\",\n  },\n  {\n    category: \"expense\",\n    mainCate: \"food\",\n    subCate: \"breakfast\",\n    time: \"2021-09-17\",\n    price: \"200\",\n  },\n  {\n    category: \"expense\",\n    mainCate: \"food\",\n    subCate: \"breakfast\",\n    time: \"2021-09-17\",\n    price: \"300\",\n  },\n\n  {\n    category: \"expense\",\n    mainCate: \"food\",\n    subCate: \"breakfast\",\n    time: \"2021-09-18\",\n    price: \"400\",\n  },\n\n  {\n    category: \"expense\",\n    mainCate: \"food\",\n    subCate: \"breakfast\",\n    time: \"2021-09-19\",\n    price: \"500\",\n  },\n  {\n    category: \"expense\",\n    mainCate: \"food\",\n    subCate: \"breakfast\",\n    time: \"2021-09-20\",\n    price: \"600\",\n  },\n  {\n    category: \"expense\",\n    mainCate: \"food\",\n    subCate: \"breakfast\",\n    time: \"2021-09-21\",\n    price: \"700\",\n  },\n  {\n    category: \"income\",\n    mainCate: \"food\",\n    subCate: \"breakfast\",\n    time: \"2021-09-21\",\n    price: \"1000\",\n  },\n  {\n    category: \"income\",\n    mainCate: \"food\",\n    subCate: \"breakfast\",\n    time: \"2021-09-22\",\n    price: \"1000\",\n  },\n  {\n    category: \"income\",\n    mainCate: \"food\",\n    subCate: \"breakfast\",\n    time: \"2021-09-23\",\n    price: \"1000\",\n  },\n];\n\n// console.log(\n//   test(\n//     [\n//       \"2021-09-15\",\n//       \"2021-09-16\",\n//       \"2021-09-17\",\n//       \"2021-09-18\",\n//       \"2021-09-19\",\n//       \"2021-09-20\",\n//       \"2021-09-21\",\n//     ],\n//     ggg\n//   )\n// );\n\nexport default createChartDataArr;\n\n/*\nfunction createChartDataArr1(labels, expenseData) {\n  const newExpenseData = createFilteredData(labels, expenseData);\n\n  const prevTotalAccAmount =\n    createPreAccAmount(\"income\", expenseData, labels[0]) -\n    createPreAccAmount(\"expense\", expenseData, labels[0]);\n\n  const newExpenseDataExpense = newExpenseData.filter(\n    (element) => element.category === \"expense\"\n  );\n  const newExpenseDataIncome = newExpenseData.filter(\n    (element) => element.category === \"income\"\n  );\n\n  const dataArrExpense = createDataArrAccount(labels, newExpenseDataExpense);\n  const dataArrIncome = createDataArrAccount(labels, newExpenseDataIncome);\n\n  const finalDataArr = [];\n\n  dataArrExpense.forEach((expense, index) => {\n    finalDataArr.push(dataArrIncome[index] - expense + prevTotalAccAmount);\n  });\n\n  return finalDataArr;\n}\n*/\n\n/*\nfunction createDataArrAccount(labels, expensData) {\n  const data = [];\n  let indexCurrentDate = true;\n  let currentAmount = 0;\n  let indexData = 0;\n  let yearLabel, monthLabel, dayLabel, yearDate, monthData, dayData;\n\n  for (let i = 0; i < labels.length; i++) {\n    yearLabel = labels[i].slice(0, 4);\n    monthLabel = labels[i].slice(5, 7);\n    dayLabel = labels[i].slice(8);\n\n    while (indexCurrentDate) {\n      yearDate = expensData[indexData]?.time.slice(0, 4);\n      monthData = expensData[indexData]?.time.slice(5, 7);\n      dayData = expensData[indexData]?.time.slice(8);\n\n      if (\n        yearLabel === yearDate &&\n        monthLabel === monthData &&\n        dayLabel >= dayData\n      ) {\n        currentAmount += Number(expensData[indexData].price);\n        indexData++;\n      } else indexCurrentDate = false;\n    }\n\n    data.push(currentAmount);\n    indexCurrentDate = true;\n  }\n\n  return data;\n}\n\n*/\n"]},"metadata":{},"sourceType":"module"}