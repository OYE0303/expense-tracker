{"ast":null,"code":"function createLineDataArr(standardLabels, filteredData, timeDuration) {\n  const data = []; // Reference 4\n\n  const type = timeDuration === \"12\" || timeDuration === \"6\" ? \"month\" : \"day\";\n  let indexData = 0;\n  let indexCurrentDate = true;\n  let currentDate;\n  let curIncome = 0,\n      curExpense = 0;\n\n  for (let i = 0; i < standardLabels.length; i++) {\n    // Reference 1\n    if (type === \"month\" && i === standardLabels.length - 1) break;\n    currentDate = new Date(standardLabels[i]);\n\n    while (indexCurrentDate) {\n      // Reference 2\n      let timeValidIndex = filteredData[indexData] && compareTime(filteredData[indexData], currentDate);\n\n      if (type === \"month\") {\n        timeValidIndex = filteredData[indexData] && compareTimeWithRange(filteredData[indexData], currentDate, new Date(standardLabels[i + 1]));\n      }\n\n      if (timeValidIndex) {\n        if (filteredData[indexData].category === \"expense\") curExpense += Number(filteredData[indexData].price);else curIncome += Number(filteredData[indexData].price); // index for expenseData, only update it when it's within the validTimeIndex\n\n        indexData++;\n      } // if not, we're done for while-loop which means going to next date (standardLabel)\n      else indexCurrentDate = false;\n    } // add the accumlated data, and empty\n\n\n    data.push(curIncome - curExpense);\n    curIncome = 0;\n    curExpense = 0;\n    indexCurrentDate = true;\n  }\n\n  return data;\n}\n\nexport default createLineDataArr;","map":{"version":3,"sources":["/Users/eyo/Desktop/expense-tracker/src/Others/CreateChartData/createLineDataArr.js"],"names":["createLineDataArr","standardLabels","filteredData","timeDuration","data","type","indexData","indexCurrentDate","currentDate","curIncome","curExpense","i","length","Date","timeValidIndex","compareTime","compareTimeWithRange","category","Number","price","push"],"mappings":"AAAA,SAASA,iBAAT,CAA2BC,cAA3B,EAA2CC,YAA3C,EAAyDC,YAAzD,EAAuE;AACrE,QAAMC,IAAI,GAAG,EAAb,CADqE,CAErE;;AACA,QAAMC,IAAI,GAAGF,YAAY,KAAK,IAAjB,IAAyBA,YAAY,KAAK,GAA1C,GAAgD,OAAhD,GAA0D,KAAvE;AACA,MAAIG,SAAS,GAAG,CAAhB;AACA,MAAIC,gBAAgB,GAAG,IAAvB;AACA,MAAIC,WAAJ;AACA,MAAIC,SAAS,GAAG,CAAhB;AAAA,MACEC,UAAU,GAAG,CADf;;AAGA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGV,cAAc,CAACW,MAAnC,EAA2CD,CAAC,EAA5C,EAAgD;AAC9C;AACA,QAAIN,IAAI,KAAK,OAAT,IAAoBM,CAAC,KAAKV,cAAc,CAACW,MAAf,GAAwB,CAAtD,EAAyD;AAEzDJ,IAAAA,WAAW,GAAG,IAAIK,IAAJ,CAASZ,cAAc,CAACU,CAAD,CAAvB,CAAd;;AAEA,WAAOJ,gBAAP,EAAyB;AACvB;AACA,UAAIO,cAAc,GAChBZ,YAAY,CAACI,SAAD,CAAZ,IACAS,WAAW,CAACb,YAAY,CAACI,SAAD,CAAb,EAA0BE,WAA1B,CAFb;;AAIA,UAAIH,IAAI,KAAK,OAAb,EAAsB;AACpBS,QAAAA,cAAc,GACZZ,YAAY,CAACI,SAAD,CAAZ,IACAU,oBAAoB,CAClBd,YAAY,CAACI,SAAD,CADM,EAElBE,WAFkB,EAGlB,IAAIK,IAAJ,CAASZ,cAAc,CAACU,CAAC,GAAG,CAAL,CAAvB,CAHkB,CAFtB;AAOD;;AAED,UAAIG,cAAJ,EAAoB;AAClB,YAAIZ,YAAY,CAACI,SAAD,CAAZ,CAAwBW,QAAxB,KAAqC,SAAzC,EACEP,UAAU,IAAIQ,MAAM,CAAChB,YAAY,CAACI,SAAD,CAAZ,CAAwBa,KAAzB,CAApB,CADF,KAEKV,SAAS,IAAIS,MAAM,CAAChB,YAAY,CAACI,SAAD,CAAZ,CAAwBa,KAAzB,CAAnB,CAHa,CAKlB;;AACAb,QAAAA,SAAS;AACV,OAPD,CAQA;AARA,WASKC,gBAAgB,GAAG,KAAnB;AACN,KAhC6C,CAkC9C;;;AACAH,IAAAA,IAAI,CAACgB,IAAL,CAAUX,SAAS,GAAGC,UAAtB;AACAD,IAAAA,SAAS,GAAG,CAAZ;AACAC,IAAAA,UAAU,GAAG,CAAb;AACAH,IAAAA,gBAAgB,GAAG,IAAnB;AACD;;AAED,SAAOH,IAAP;AACD;;AAED,eAAeJ,iBAAf","sourcesContent":["function createLineDataArr(standardLabels, filteredData, timeDuration) {\n  const data = [];\n  // Reference 4\n  const type = timeDuration === \"12\" || timeDuration === \"6\" ? \"month\" : \"day\";\n  let indexData = 0;\n  let indexCurrentDate = true;\n  let currentDate;\n  let curIncome = 0,\n    curExpense = 0;\n\n  for (let i = 0; i < standardLabels.length; i++) {\n    // Reference 1\n    if (type === \"month\" && i === standardLabels.length - 1) break;\n\n    currentDate = new Date(standardLabels[i]);\n\n    while (indexCurrentDate) {\n      // Reference 2\n      let timeValidIndex =\n        filteredData[indexData] &&\n        compareTime(filteredData[indexData], currentDate);\n\n      if (type === \"month\") {\n        timeValidIndex =\n          filteredData[indexData] &&\n          compareTimeWithRange(\n            filteredData[indexData],\n            currentDate,\n            new Date(standardLabels[i + 1])\n          );\n      }\n\n      if (timeValidIndex) {\n        if (filteredData[indexData].category === \"expense\")\n          curExpense += Number(filteredData[indexData].price);\n        else curIncome += Number(filteredData[indexData].price);\n\n        // index for expenseData, only update it when it's within the validTimeIndex\n        indexData++;\n      }\n      // if not, we're done for while-loop which means going to next date (standardLabel)\n      else indexCurrentDate = false;\n    }\n\n    // add the accumlated data, and empty\n    data.push(curIncome - curExpense);\n    curIncome = 0;\n    curExpense = 0;\n    indexCurrentDate = true;\n  }\n\n  return data;\n}\n\nexport default createLineDataArr;\n"]},"metadata":{},"sourceType":"module"}