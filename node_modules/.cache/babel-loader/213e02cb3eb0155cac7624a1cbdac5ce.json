{"ast":null,"code":"import createStandardLabelsArr from \"./createStandardLabelsArr\";\nimport createLabelsArr from \"./createLabelsArr\";\nimport createDataArr from \"./createDataArr\";\nimport createFilteredData from \"./createFilteredData\";\n\nfunction createConfig(mainType, timeDuration, startingDate, endingDate, expensData, mainCategory, subCategory) {\n  if (mainType === \"time\") {\n    const standardLabels = createStandardLabelsArr(timeDuration, startingDate);\n    const labels = createLabelsArr(standardLabels, timeDuration);\n    const data = createDataArr(standardLabels, createFilteredData(standardLabels, expensData), timeDuration, mainCategory, subCategory);\n    console.log(labels);\n    console.log(data);\n    return {\n      type: \"bar\",\n      data: {\n        labels: labels,\n        datasets: [{\n          label: \"\",\n          data: data,\n          backgroundColor: [\"rgba(255, 99, 132, 0.2)\", \"rgba(255, 159, 64, 0.2)\", \"rgba(255, 205, 86, 0.2)\", \"rgba(75, 192, 192, 0.2)\", \"rgba(54, 162, 235, 0.2)\", \"rgba(153, 102, 255, 0.2)\", \"rgba(201, 203, 207, 0.2)\"],\n          borderColor: [\"rgb(255, 99, 132)\", \"rgb(255, 159, 64)\", \"rgb(255, 205, 86)\", \"rgb(75, 192, 192)\", \"rgb(54, 162, 235)\", \"rgb(153, 102, 255)\", \"rgb(201, 203, 207)\"],\n          borderWidth: 1\n        }]\n      },\n      options: {\n        scales: {\n          y: {\n            beginAtZero: true\n          }\n        }\n      }\n    };\n  } else {\n    const filteredData = expensData.filter(element => Number(new Date(element.time)) >= Number(new Date(startingDate)) && Number(new Date(element.time)) <= Number(new Date(endingDate)) && element.category === mainCategory);\n    const labels = subCategory;\n    let newFilteredData = [];\n    labels.forEach(label => {\n      newFilteredData.push(filteredData.filter(data => data.mainCate === label));\n    });\n    let dataArr = [];\n    newFilteredData.forEach(data => {\n      let dataTmp;\n\n      if (data.length > 0) {\n        dataTmp = data.reduce((acc, cur) => acc += Number(cur.price), 0);\n      } else dataTmp = 0;\n\n      dataArr.push(dataTmp);\n    });\n    return {\n      type: \"doughnut\",\n      data: {\n        labels: labels,\n        datasets: [{\n          label: \"My First Dataset\",\n          data: dataArr,\n          backgroundColor: [\"rgb(255, 99, 132)\", \"rgb(255, 159, 64)\", \"rgb(255, 205, 86)\", \"rgb(75, 192, 192)\", \"rgb(54, 162, 235)\", \"rgb(153, 102, 255)\", \"rgb(201, 203, 207)\"],\n          hoverOffset: 4\n        }]\n      }\n    };\n  }\n}\n\nexport default createConfig;","map":{"version":3,"sources":["/Users/eyo/Desktop/project-expenseTracker-main/src/components/Others/CreateChartData/createConfig.js"],"names":["createStandardLabelsArr","createLabelsArr","createDataArr","createFilteredData","createConfig","mainType","timeDuration","startingDate","endingDate","expensData","mainCategory","subCategory","standardLabels","labels","data","console","log","type","datasets","label","backgroundColor","borderColor","borderWidth","options","scales","y","beginAtZero","filteredData","filter","element","Number","Date","time","category","newFilteredData","forEach","push","mainCate","dataArr","dataTmp","length","reduce","acc","cur","price","hoverOffset"],"mappings":"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","sourcesContent":["import createStandardLabelsArr from \"./createStandardLabelsArr\";\nimport createLabelsArr from \"./createLabelsArr\";\nimport createDataArr from \"./createDataArr\";\nimport createFilteredData from \"./createFilteredData\";\n\nfunction createConfig(\n  mainType,\n  timeDuration,\n  startingDate,\n  endingDate,\n  expensData,\n  mainCategory,\n  subCategory\n) {\n  if (mainType === \"time\") {\n    const standardLabels = createStandardLabelsArr(timeDuration, startingDate);\n    const labels = createLabelsArr(standardLabels, timeDuration);\n    const data = createDataArr(\n      standardLabels,\n      createFilteredData(standardLabels, expensData),\n      timeDuration,\n      mainCategory,\n      subCategory\n    );\n\n    console.log(labels);\n    console.log(data);\n\n    return {\n      type: \"bar\",\n      data: {\n        labels: labels,\n        datasets: [\n          {\n            label: \"\",\n            data: data,\n            backgroundColor: [\n              \"rgba(255, 99, 132, 0.2)\",\n              \"rgba(255, 159, 64, 0.2)\",\n              \"rgba(255, 205, 86, 0.2)\",\n              \"rgba(75, 192, 192, 0.2)\",\n              \"rgba(54, 162, 235, 0.2)\",\n              \"rgba(153, 102, 255, 0.2)\",\n              \"rgba(201, 203, 207, 0.2)\",\n            ],\n            borderColor: [\n              \"rgb(255, 99, 132)\",\n              \"rgb(255, 159, 64)\",\n              \"rgb(255, 205, 86)\",\n              \"rgb(75, 192, 192)\",\n              \"rgb(54, 162, 235)\",\n              \"rgb(153, 102, 255)\",\n              \"rgb(201, 203, 207)\",\n            ],\n            borderWidth: 1,\n          },\n        ],\n      },\n      options: {\n        scales: {\n          y: {\n            beginAtZero: true,\n          },\n        },\n      },\n    };\n  } else {\n    const filteredData = expensData.filter(\n      (element) =>\n        Number(new Date(element.time)) >= Number(new Date(startingDate)) &&\n        Number(new Date(element.time)) <= Number(new Date(endingDate)) &&\n        element.category === mainCategory\n    );\n    const labels = subCategory;\n\n    let newFilteredData = [];\n\n    labels.forEach((label) => {\n      newFilteredData.push(\n        filteredData.filter((data) => data.mainCate === label)\n      );\n    });\n\n    let dataArr = [];\n    newFilteredData.forEach((data) => {\n      let dataTmp;\n\n      if (data.length > 0) {\n        dataTmp = data.reduce((acc, cur) => (acc += Number(cur.price)), 0);\n      } else dataTmp = 0;\n\n      dataArr.push(dataTmp);\n    });\n\n    return {\n      type: \"doughnut\",\n      data: {\n        labels: labels,\n        datasets: [\n          {\n            label: \"My First Dataset\",\n            data: dataArr,\n            backgroundColor: [\n              \"rgb(255, 99, 132)\",\n              \"rgb(255, 159, 64)\",\n              \"rgb(255, 205, 86)\",\n              \"rgb(75, 192, 192)\",\n              \"rgb(54, 162, 235)\",\n              \"rgb(153, 102, 255)\",\n              \"rgb(201, 203, 207)\",\n            ],\n            hoverOffset: 4,\n          },\n        ],\n      },\n    };\n  }\n}\n\nexport default createConfig;\n"]},"metadata":{},"sourceType":"module"}