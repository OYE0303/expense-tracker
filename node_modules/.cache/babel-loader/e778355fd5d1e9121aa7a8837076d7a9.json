{"ast":null,"code":"import createStandardLabelsArr from \"./createStandardLabelsArr\";\nimport createLabelsArr from \"./createLabelsArr\";\nimport createDataArr from \"./createDataArr\";\nimport createFilteredData from \"./createFilteredData\";\n\nfunction createConfigObj(mainType, timeDuration, startingDate, endingDate, expenseData, mainCategory, subCategory, theme) {\n  if (mainType === \"time\") {\n    const standardLabels = createStandardLabelsArr(timeDuration, startingDate);\n    const labels = createLabelsArr(standardLabels, timeDuration);\n    const data = createDataArr(standardLabels, createFilteredData(standardLabels, expenseData), timeDuration, mainCategory, subCategory);\n    return {\n      type: \"bar\",\n      data: {\n        labels: labels,\n        datasets: [{\n          label: \"\",\n          data: data,\n          backgroundColor: [\"rgba(255, 99, 132, 0.2)\", \"rgba(255, 159, 64, 0.2)\", \"rgba(255, 205, 86, 0.2)\", \"rgba(75, 192, 192, 0.2)\", \"rgba(54, 162, 235, 0.2)\", \"rgba(153, 102, 255, 0.2)\", \"rgba(201, 203, 207, 0.2)\"],\n          borderColor: [\"rgb(255, 99, 132)\", \"rgb(255, 159, 64)\", \"rgb(255, 205, 86)\", \"rgb(75, 192, 192)\", \"rgb(54, 162, 235)\", \"rgb(153, 102, 255)\", \"rgb(201, 203, 207)\"],\n          borderWidth: 1\n        }]\n      },\n      options: {\n        plugins: {\n          legend: {\n            labels: {\n              generateLabels: chart => {\n                return chart.data.labels.map((label, index) => {\n                  text: label;\n                });\n              }\n            }\n          }\n        },\n        scales: {\n          y: {\n            // title: {\n            //   display: true,\n            //   text: \"Money\",\n            //   color: \"white\",\n            //   padding: { top: 0, left: 0, right: 0, bottom: 20 },\n            // },\n            beginAtZero: true,\n            ticks: {\n              color: `${theme === \"dark\" ? \"rgb(190,190,190)\" : \"rgb(70,70,70)\"}`\n            }\n          },\n          x: {\n            // title: {\n            //   display: true,\n            //   text: \"Time\",\n            //   color: \"white\",\n            //   padding: { top: 20, left: 0, right: 0, bottom: 0 },\n            // },\n            ticks: {\n              color: `${theme === \"dark\" ? \"rgb(190,190,190)\" : \"rgb(70,70,70)\"}`\n            }\n          }\n        }\n      }\n    };\n  } else {\n    const filteredData = expenseData.filter(element => Number(new Date(element.time)) >= Number(new Date(startingDate)) && Number(new Date(element.time)) <= Number(new Date(endingDate)) && element.category === mainCategory); // const labels = subCategory;\n\n    let labels = [];\n    filteredData.forEach(element => {\n      if (!labels.includes(element.mainCate)) labels.push(element.mainCate);\n    });\n    let newFilteredData = [];\n    labels.forEach(label => {\n      newFilteredData.push(filteredData.filter(data => data.mainCate === label));\n    }); // const totalAmount = newFilteredData\n    //   .flat()\n    //   .reduce((acc, cur) => (acc += Number(cur.price)), 0);\n\n    const dataArr = [];\n    newFilteredData.forEach(data => {\n      let dataTmp;\n\n      if (data.length > 0) {\n        dataTmp = data.reduce((acc, cur) => acc += Number(cur.price), 0);\n      } else dataTmp = 0;\n\n      dataArr.push(dataTmp);\n    });\n    return {\n      type: \"pie\",\n      data: {\n        labels: labels,\n        datasets: [{\n          label: \"My First Dataset\",\n          data: dataArr,\n          backgroundColor: [\"rgb(255, 99, 132)\", \"rgb(255, 159, 64)\", \"rgb(255, 205, 86)\", \"rgb(75, 192, 192)\", \"rgb(54, 162, 235)\", \"rgb(153, 102, 255)\", \"rgb(201, 203, 207)\"],\n          hoverOffset: 4\n        }]\n      },\n      options: {\n        plugins: {\n          legend: {\n            labels: {\n              // This is more specific font property overrides the global property\n              font: {\n                size: 14\n              },\n              color: `${theme === \"dark\" ? \"rgb(190,190,190)\" : \"rgb(70,70,70)\"}`\n            }\n          }\n        }\n      }\n    };\n  }\n}\n\nexport default createConfigObj;","map":{"version":3,"sources":["/Users/eyo/Desktop/expense-tracker/src/Others/CreateChartData/createConfigObj.js"],"names":["createStandardLabelsArr","createLabelsArr","createDataArr","createFilteredData","createConfigObj","mainType","timeDuration","startingDate","endingDate","expenseData","mainCategory","subCategory","theme","standardLabels","labels","data","type","datasets","label","backgroundColor","borderColor","borderWidth","options","plugins","legend","generateLabels","chart","map","index","text","scales","y","beginAtZero","ticks","color","x","filteredData","filter","element","Number","Date","time","category","forEach","includes","mainCate","push","newFilteredData","dataArr","dataTmp","length","reduce","acc","cur","price","hoverOffset","font","size"],"mappings":"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","sourcesContent":["import createStandardLabelsArr from \"./createStandardLabelsArr\";\nimport createLabelsArr from \"./createLabelsArr\";\nimport createDataArr from \"./createDataArr\";\nimport createFilteredData from \"./createFilteredData\";\n\nfunction createConfigObj(\n  mainType,\n  timeDuration,\n  startingDate,\n  endingDate,\n  expenseData,\n  mainCategory,\n  subCategory,\n  theme\n) {\n  if (mainType === \"time\") {\n    const standardLabels = createStandardLabelsArr(timeDuration, startingDate);\n    const labels = createLabelsArr(standardLabels, timeDuration);\n    const data = createDataArr(\n      standardLabels,\n      createFilteredData(standardLabels, expenseData),\n      timeDuration,\n      mainCategory,\n      subCategory\n    );\n\n    return {\n      type: \"bar\",\n      data: {\n        labels: labels,\n        datasets: [\n          {\n            label: \"\",\n            data: data,\n            backgroundColor: [\n              \"rgba(255, 99, 132, 0.2)\",\n              \"rgba(255, 159, 64, 0.2)\",\n              \"rgba(255, 205, 86, 0.2)\",\n              \"rgba(75, 192, 192, 0.2)\",\n              \"rgba(54, 162, 235, 0.2)\",\n              \"rgba(153, 102, 255, 0.2)\",\n              \"rgba(201, 203, 207, 0.2)\",\n            ],\n            borderColor: [\n              \"rgb(255, 99, 132)\",\n              \"rgb(255, 159, 64)\",\n              \"rgb(255, 205, 86)\",\n              \"rgb(75, 192, 192)\",\n              \"rgb(54, 162, 235)\",\n              \"rgb(153, 102, 255)\",\n              \"rgb(201, 203, 207)\",\n            ],\n            borderWidth: 1,\n          },\n        ],\n      },\n      options: {\n        plugins: {\n          legend: {\n            labels: {\n              generateLabels: (chart) => {\n                return chart.data.labels.map((label, index) => {\n                  text: label;\n                });\n              },\n            },\n          },\n        },\n        scales: {\n          y: {\n            // title: {\n            //   display: true,\n            //   text: \"Money\",\n            //   color: \"white\",\n            //   padding: { top: 0, left: 0, right: 0, bottom: 20 },\n            // },\n            beginAtZero: true,\n            ticks: {\n              color: `${\n                theme === \"dark\" ? \"rgb(190,190,190)\" : \"rgb(70,70,70)\"\n              }`,\n            },\n          },\n          x: {\n            // title: {\n            //   display: true,\n            //   text: \"Time\",\n            //   color: \"white\",\n            //   padding: { top: 20, left: 0, right: 0, bottom: 0 },\n            // },\n            ticks: {\n              color: `${\n                theme === \"dark\" ? \"rgb(190,190,190)\" : \"rgb(70,70,70)\"\n              }`,\n            },\n          },\n        },\n      },\n    };\n  } else {\n    const filteredData = expenseData.filter(\n      (element) =>\n        Number(new Date(element.time)) >= Number(new Date(startingDate)) &&\n        Number(new Date(element.time)) <= Number(new Date(endingDate)) &&\n        element.category === mainCategory\n    );\n\n    // const labels = subCategory;\n    let labels = [];\n    filteredData.forEach((element) => {\n      if (!labels.includes(element.mainCate)) labels.push(element.mainCate);\n    });\n\n    let newFilteredData = [];\n    labels.forEach((label) => {\n      newFilteredData.push(\n        filteredData.filter((data) => data.mainCate === label)\n      );\n    });\n\n    // const totalAmount = newFilteredData\n    //   .flat()\n    //   .reduce((acc, cur) => (acc += Number(cur.price)), 0);\n\n    const dataArr = [];\n\n    newFilteredData.forEach((data) => {\n      let dataTmp;\n\n      if (data.length > 0) {\n        dataTmp = data.reduce((acc, cur) => (acc += Number(cur.price)), 0);\n      } else dataTmp = 0;\n\n      dataArr.push(dataTmp);\n    });\n\n    return {\n      type: \"pie\",\n      data: {\n        labels: labels,\n        datasets: [\n          {\n            label: \"My First Dataset\",\n            data: dataArr,\n            backgroundColor: [\n              \"rgb(255, 99, 132)\",\n              \"rgb(255, 159, 64)\",\n              \"rgb(255, 205, 86)\",\n              \"rgb(75, 192, 192)\",\n              \"rgb(54, 162, 235)\",\n              \"rgb(153, 102, 255)\",\n              \"rgb(201, 203, 207)\",\n            ],\n            hoverOffset: 4,\n          },\n        ],\n      },\n      options: {\n        plugins: {\n          legend: {\n            labels: {\n              // This is more specific font property overrides the global property\n              font: {\n                size: 14,\n              },\n              color: `${\n                theme === \"dark\" ? \"rgb(190,190,190)\" : \"rgb(70,70,70)\"\n              }`,\n            },\n          },\n        },\n      },\n    };\n  }\n}\n\nexport default createConfigObj;\n"]},"metadata":{},"sourceType":"module"}