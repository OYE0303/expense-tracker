{"ast":null,"code":"import compareTime from \"../compareTime\";\nimport compareTimeWithRange from \"../compareTimeWithRange\";\n/*\nmain logic\n1) loop through each date inside standardLabels\n2) for each loop, use while-loop to keep accumulating the total amount within this date\n3) there are several conditions to make sure catching the correct data\n*/\n\nfunction createDataArr(standardLabels, filteredData, timeDuration, mainCategory, subCategory) {\n  const data = [];\n  const checkboxNoChange = mainCategory === \"expense\" && subCategory.length === 7 || mainCategory === \"income\" && subCategory.length === 3;\n  const type = timeDuration === \"12\" || timeDuration === \"6\" ? \"month\" : \"day\";\n  let indexData = 0;\n  let indexCurrentDate = true;\n  let currentAmount = 0;\n  let currentDate;\n\n  for (let i = 0; i < standardLabels.length; i++) {\n    if (type === \"month\" && i === standardLabels.length - 1) break;\n    currentDate = new Date(standardLabels[i]);\n\n    while (indexCurrentDate) {\n      let timeValidIndex = filteredData[indexData] && compareTime(filteredData[indexData], currentDate);\n\n      if (type === \"month\") {\n        var _filteredData$indexDa, _filteredData$indexDa2, _filteredData$indexDa3;\n\n        timeValidIndex = filteredData[indexData] && compareTimeWithRange(filteredData[indexData], currentDate, new Date(standardLabels[i + 1]));\n        if (((_filteredData$indexDa = filteredData[indexData]) === null || _filteredData$indexDa === void 0 ? void 0 : _filteredData$indexDa.category) === \"expense\") console.log((_filteredData$indexDa2 = filteredData[indexData]) === null || _filteredData$indexDa2 === void 0 ? void 0 : _filteredData$indexDa2.price, (_filteredData$indexDa3 = filteredData[indexData]) === null || _filteredData$indexDa3 === void 0 ? void 0 : _filteredData$indexDa3.time, timeValidIndex);\n      }\n\n      if (timeValidIndex) {\n        if (filteredData[indexData].category === mainCategory) {\n          if (checkboxNoChange || subCategory.includes(filteredData[indexData].mainCate)) {\n            currentAmount += Number(filteredData[indexData].price);\n          }\n        } // this is the index for expenseData\n\n\n        indexData++;\n      } // if not, we're done for while-loop which means going to next date (standardLabel)\n      else indexCurrentDate = false;\n    } // add the accumlated data, and empty\n\n\n    data.push(currentAmount);\n    currentAmount = 0;\n    indexCurrentDate = true;\n  }\n\n  return data;\n}\n\nexport default createDataArr;\n\nfunction createDataArrDay(standardLabels, filteredData, mainCategory, subCategory) {\n  const data = [];\n  const checkboxNoChange = mainCategory === \"expense\" && subCategory.length === 7 || mainCategory === \"income\" && subCategory.length === 3;\n  let indexData = 0;\n  let indexCurrentDate = true;\n  let currentAmount = 0;\n  let currentDate;\n\n  for (let i = 0; i < standardLabels.length; i++) {\n    currentDate = Number(new Date(standardLabels[i]));\n\n    while (indexCurrentDate) {\n      var _filteredData$indexDa4;\n\n      /*\n      find the date of data is less or eqaul to current date\n      keep doing the same thing until the date of data is greater than current date\n      which means have to go to next date\n       note that have to add ?.\n      because there's edge case\n      for example, the length of filteredData is 5\n      and at the end of loop, the indexData may be 5\n      it's out of the range of filteredData\n      */\n      if (Number(new Date((_filteredData$indexDa4 = filteredData[indexData]) === null || _filteredData$indexDa4 === void 0 ? void 0 : _filteredData$indexDa4.time)) <= currentDate) {\n        if (filteredData[indexData].category === mainCategory) {\n          /*\n          1) if checkbox has no change which means the user want to get all category, so can directly add the price\n          2) otherwise, have to make sure the category is correct\n          */\n          if (checkboxNoChange || subCategory.includes(filteredData[indexData].mainCate)) {\n            currentAmount += Number(filteredData[indexData].price);\n          }\n        } // this is the index for expenseData\n\n\n        indexData++;\n      } // if not, we're done for while-loop which means going to next date (standardLabel)\n      else indexCurrentDate = false;\n    } // add the accumlated data, and empty\n\n\n    data.push(currentAmount);\n    currentAmount = 0;\n    indexCurrentDate = true;\n  }\n\n  const tesdd = test(standardLabels, filteredData, mainCategory, subCategory);\n  console.log(tesdd);\n  console.log(data);\n  return data;\n} // basically the logic is as same as previos one\n\n\nfunction createDataArrMonth(standardLabels, filteredData, mainCategory, subCategory) {\n  const data = [];\n  const checkboxNoChange = mainCategory === \"expense\" && subCategory.length === 6 || mainCategory === \"income\" && subCategory.length === 3;\n  let indexData = 0;\n  let indexCurrentDate = true;\n  let currentAmount = 0;\n  let yearLabel, monthLabel, dayLabel, yearDate, monthData, dayData;\n\n  for (let i = 0; i < standardLabels.length; i++) {\n    yearLabel = standardLabels[i].slice(0, 4);\n    monthLabel = standardLabels[i].slice(5, 7);\n    dayLabel = standardLabels[i].slice(8);\n\n    while (indexCurrentDate) {\n      var _filteredData$indexDa5, _filteredData$indexDa6, _filteredData$indexDa7;\n\n      yearDate = (_filteredData$indexDa5 = filteredData[indexData]) === null || _filteredData$indexDa5 === void 0 ? void 0 : _filteredData$indexDa5.time.slice(0, 4);\n      monthData = (_filteredData$indexDa6 = filteredData[indexData]) === null || _filteredData$indexDa6 === void 0 ? void 0 : _filteredData$indexDa6.time.slice(5, 7);\n      dayData = (_filteredData$indexDa7 = filteredData[indexData]) === null || _filteredData$indexDa7 === void 0 ? void 0 : _filteredData$indexDa7.time.slice(8);\n      /*\n      have to make sure\n      1) year and month is the same\n      2) day is in the valid range\n      */\n\n      if (yearLabel === yearDate && monthLabel === monthData) {\n        if (Number(dayLabel) <= Number(dayData) && 31 >= Number(dayData)) if (filteredData[indexData].category === mainCategory) {\n          if (checkboxNoChange || subCategory.includes(filteredData[indexData].mainCate)) currentAmount += Number(filteredData[indexData].price);\n        }\n        indexData++;\n      } else indexCurrentDate = false;\n    }\n\n    data.push(currentAmount);\n    currentAmount = 0;\n    indexCurrentDate = true;\n  }\n\n  const tesdd = test(standardLabels, filteredData, mainCategory, subCategory, \"month\");\n  console.log(tesdd);\n  console.log(data);\n  return data;\n}\n\nfunction test(standardLabels, filteredData, mainCategory, subCategory, type) {\n  const data = [];\n  const checkboxNoChange = mainCategory === \"expense\" && subCategory.length === 7 || mainCategory === \"income\" && subCategory.length === 3;\n  let indexData = 0;\n  let indexCurrentDate = true;\n  let currentAmount = 0;\n  let currentDate;\n\n  for (let i = 0; i < standardLabels.length; i++) {\n    if (type === \"month\" && i === standardLabels.length - 1) break;\n    currentDate = new Date(standardLabels[i]);\n\n    while (indexCurrentDate) {\n      let timeValidIndex = filteredData[indexData] && compareTime(filteredData[indexData], currentDate);\n\n      if (type === \"month\") {\n        var _filteredData$indexDa8, _filteredData$indexDa9, _filteredData$indexDa10;\n\n        timeValidIndex = filteredData[indexData] && compareTimeWithRange(filteredData[indexData], currentDate, new Date(standardLabels[i + 1]));\n        if (((_filteredData$indexDa8 = filteredData[indexData]) === null || _filteredData$indexDa8 === void 0 ? void 0 : _filteredData$indexDa8.category) === \"expense\") console.log((_filteredData$indexDa9 = filteredData[indexData]) === null || _filteredData$indexDa9 === void 0 ? void 0 : _filteredData$indexDa9.price, (_filteredData$indexDa10 = filteredData[indexData]) === null || _filteredData$indexDa10 === void 0 ? void 0 : _filteredData$indexDa10.time, timeValidIndex);\n      }\n\n      if (timeValidIndex) {\n        if (filteredData[indexData].category === mainCategory) {\n          if (checkboxNoChange || subCategory.includes(filteredData[indexData].mainCate)) {\n            currentAmount += Number(filteredData[indexData].price);\n          }\n        } // this is the index for expenseData\n\n\n        indexData++;\n      } // if not, we're done for while-loop which means going to next date (standardLabel)\n      else indexCurrentDate = false;\n    } // add the accumlated data, and empty\n\n\n    data.push(currentAmount);\n    currentAmount = 0;\n    indexCurrentDate = true;\n  }\n\n  return data;\n}\n\nfunction test1(standardLabels, filteredData, mainCategory, subCategory) {\n  const data = [];\n  const checkboxNoChange = mainCategory === \"expense\" && subCategory.length === 6 || mainCategory === \"income\" && subCategory.length === 3;\n  let indexData = 0;\n  let indexCurrentDate = true;\n  let currentAmount = 0;\n  let yearLabel, monthLabel, dayLabel, yearDate, monthData, dayData;\n\n  for (let i = 0; i < standardLabels.length; i++) {\n    yearLabel = standardLabels[i].slice(0, 4);\n    monthLabel = standardLabels[i].slice(5, 7);\n    dayLabel = standardLabels[i].slice(8);\n\n    while (indexCurrentDate) {\n      var _filteredData$indexDa11, _filteredData$indexDa12, _filteredData$indexDa13;\n\n      yearDate = (_filteredData$indexDa11 = filteredData[indexData]) === null || _filteredData$indexDa11 === void 0 ? void 0 : _filteredData$indexDa11.time.slice(0, 4);\n      monthData = (_filteredData$indexDa12 = filteredData[indexData]) === null || _filteredData$indexDa12 === void 0 ? void 0 : _filteredData$indexDa12.time.slice(5, 7);\n      dayData = (_filteredData$indexDa13 = filteredData[indexData]) === null || _filteredData$indexDa13 === void 0 ? void 0 : _filteredData$indexDa13.time.slice(8);\n      /*\n      have to make sure\n      1) year and month is the same\n      2) day is in the valid range\n      */\n\n      if (yearLabel === yearDate && monthLabel === monthData) {\n        if (Number(dayLabel) <= Number(dayData) && 31 >= Number(dayData)) if (filteredData[indexData].category === mainCategory) {\n          if (checkboxNoChange || subCategory.includes(filteredData[indexData].mainCate)) currentAmount += Number(filteredData[indexData].price);\n        }\n        indexData++;\n      } else indexCurrentDate = false;\n    }\n\n    data.push(currentAmount);\n    currentAmount = 0;\n    indexCurrentDate = true;\n  }\n\n  return data;\n}","map":{"version":3,"sources":["/Users/eyo/Desktop/expense-tracker/src/Others/CreateChartData/createDataArr.js"],"names":["compareTime","compareTimeWithRange","createDataArr","standardLabels","filteredData","timeDuration","mainCategory","subCategory","data","checkboxNoChange","length","type","indexData","indexCurrentDate","currentAmount","currentDate","i","Date","timeValidIndex","category","console","log","price","time","includes","mainCate","Number","push","createDataArrDay","tesdd","test","createDataArrMonth","yearLabel","monthLabel","dayLabel","yearDate","monthData","dayData","slice","test1"],"mappings":"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","sourcesContent":["import compareTime from \"../compareTime\";\nimport compareTimeWithRange from \"../compareTimeWithRange\";\n\n/*\nmain logic\n1) loop through each date inside standardLabels\n2) for each loop, use while-loop to keep accumulating the total amount within this date\n3) there are several conditions to make sure catching the correct data\n*/\nfunction createDataArr(\n  standardLabels,\n  filteredData,\n  timeDuration,\n  mainCategory,\n  subCategory\n) {\n  const data = [];\n  const checkboxNoChange =\n    (mainCategory === \"expense\" && subCategory.length === 7) ||\n    (mainCategory === \"income\" && subCategory.length === 3);\n  const type = timeDuration === \"12\" || timeDuration === \"6\" ? \"month\" : \"day\";\n  let indexData = 0;\n  let indexCurrentDate = true;\n  let currentAmount = 0;\n  let currentDate;\n\n  for (let i = 0; i < standardLabels.length; i++) {\n    if (type === \"month\" && i === standardLabels.length - 1) break;\n    currentDate = new Date(standardLabels[i]);\n\n    while (indexCurrentDate) {\n      let timeValidIndex =\n        filteredData[indexData] &&\n        compareTime(filteredData[indexData], currentDate);\n\n      if (type === \"month\") {\n        timeValidIndex =\n          filteredData[indexData] &&\n          compareTimeWithRange(\n            filteredData[indexData],\n            currentDate,\n            new Date(standardLabels[i + 1])\n          );\n\n        if (filteredData[indexData]?.category === \"expense\")\n          console.log(\n            filteredData[indexData]?.price,\n            filteredData[indexData]?.time,\n            timeValidIndex\n          );\n      }\n\n      if (timeValidIndex) {\n        if (filteredData[indexData].category === mainCategory) {\n          if (\n            checkboxNoChange ||\n            subCategory.includes(filteredData[indexData].mainCate)\n          ) {\n            currentAmount += Number(filteredData[indexData].price);\n          }\n        }\n\n        // this is the index for expenseData\n        indexData++;\n      }\n      // if not, we're done for while-loop which means going to next date (standardLabel)\n      else indexCurrentDate = false;\n    }\n\n    // add the accumlated data, and empty\n    data.push(currentAmount);\n    currentAmount = 0;\n    indexCurrentDate = true;\n  }\n\n  return data;\n}\n\nexport default createDataArr;\n\nfunction createDataArrDay(\n  standardLabels,\n  filteredData,\n  mainCategory,\n  subCategory\n) {\n  const data = [];\n  const checkboxNoChange =\n    (mainCategory === \"expense\" && subCategory.length === 7) ||\n    (mainCategory === \"income\" && subCategory.length === 3);\n  let indexData = 0;\n  let indexCurrentDate = true;\n  let currentAmount = 0;\n  let currentDate;\n\n  for (let i = 0; i < standardLabels.length; i++) {\n    currentDate = Number(new Date(standardLabels[i]));\n\n    while (indexCurrentDate) {\n      /*\n      find the date of data is less or eqaul to current date\n      keep doing the same thing until the date of data is greater than current date\n      which means have to go to next date\n\n      note that have to add ?.\n      because there's edge case\n      for example, the length of filteredData is 5\n      and at the end of loop, the indexData may be 5\n      it's out of the range of filteredData\n      */\n      if (Number(new Date(filteredData[indexData]?.time)) <= currentDate) {\n        if (filteredData[indexData].category === mainCategory) {\n          /*\n          1) if checkbox has no change which means the user want to get all category, so can directly add the price\n          2) otherwise, have to make sure the category is correct\n          */\n          if (\n            checkboxNoChange ||\n            subCategory.includes(filteredData[indexData].mainCate)\n          ) {\n            currentAmount += Number(filteredData[indexData].price);\n          }\n        }\n\n        // this is the index for expenseData\n        indexData++;\n      }\n      // if not, we're done for while-loop which means going to next date (standardLabel)\n      else indexCurrentDate = false;\n    }\n\n    // add the accumlated data, and empty\n    data.push(currentAmount);\n    currentAmount = 0;\n    indexCurrentDate = true;\n  }\n\n  const tesdd = test(standardLabels, filteredData, mainCategory, subCategory);\n\n  console.log(tesdd);\n  console.log(data);\n\n  return data;\n}\n\n// basically the logic is as same as previos one\nfunction createDataArrMonth(\n  standardLabels,\n  filteredData,\n  mainCategory,\n  subCategory\n) {\n  const data = [];\n  const checkboxNoChange =\n    (mainCategory === \"expense\" && subCategory.length === 6) ||\n    (mainCategory === \"income\" && subCategory.length === 3);\n  let indexData = 0;\n  let indexCurrentDate = true;\n  let currentAmount = 0;\n  let yearLabel, monthLabel, dayLabel, yearDate, monthData, dayData;\n\n  for (let i = 0; i < standardLabels.length; i++) {\n    yearLabel = standardLabels[i].slice(0, 4);\n    monthLabel = standardLabels[i].slice(5, 7);\n    dayLabel = standardLabels[i].slice(8);\n\n    while (indexCurrentDate) {\n      yearDate = filteredData[indexData]?.time.slice(0, 4);\n      monthData = filteredData[indexData]?.time.slice(5, 7);\n      dayData = filteredData[indexData]?.time.slice(8);\n\n      /*\n      have to make sure\n      1) year and month is the same\n      2) day is in the valid range\n      */\n      if (yearLabel === yearDate && monthLabel === monthData) {\n        if (Number(dayLabel) <= Number(dayData) && 31 >= Number(dayData))\n          if (filteredData[indexData].category === mainCategory) {\n            if (\n              checkboxNoChange ||\n              subCategory.includes(filteredData[indexData].mainCate)\n            )\n              currentAmount += Number(filteredData[indexData].price);\n          }\n\n        indexData++;\n      } else indexCurrentDate = false;\n    }\n\n    data.push(currentAmount);\n    currentAmount = 0;\n    indexCurrentDate = true;\n  }\n\n  const tesdd = test(\n    standardLabels,\n    filteredData,\n    mainCategory,\n    subCategory,\n    \"month\"\n  );\n\n  console.log(tesdd);\n  console.log(data);\n\n  return data;\n}\n\nfunction test(standardLabels, filteredData, mainCategory, subCategory, type) {\n  const data = [];\n  const checkboxNoChange =\n    (mainCategory === \"expense\" && subCategory.length === 7) ||\n    (mainCategory === \"income\" && subCategory.length === 3);\n  let indexData = 0;\n  let indexCurrentDate = true;\n  let currentAmount = 0;\n  let currentDate;\n\n  for (let i = 0; i < standardLabels.length; i++) {\n    if (type === \"month\" && i === standardLabels.length - 1) break;\n    currentDate = new Date(standardLabels[i]);\n\n    while (indexCurrentDate) {\n      let timeValidIndex =\n        filteredData[indexData] &&\n        compareTime(filteredData[indexData], currentDate);\n\n      if (type === \"month\") {\n        timeValidIndex =\n          filteredData[indexData] &&\n          compareTimeWithRange(\n            filteredData[indexData],\n            currentDate,\n            new Date(standardLabels[i + 1])\n          );\n\n        if (filteredData[indexData]?.category === \"expense\")\n          console.log(\n            filteredData[indexData]?.price,\n            filteredData[indexData]?.time,\n            timeValidIndex\n          );\n      }\n\n      if (timeValidIndex) {\n        if (filteredData[indexData].category === mainCategory) {\n          if (\n            checkboxNoChange ||\n            subCategory.includes(filteredData[indexData].mainCate)\n          ) {\n            currentAmount += Number(filteredData[indexData].price);\n          }\n        }\n\n        // this is the index for expenseData\n        indexData++;\n      }\n      // if not, we're done for while-loop which means going to next date (standardLabel)\n      else indexCurrentDate = false;\n    }\n\n    // add the accumlated data, and empty\n    data.push(currentAmount);\n    currentAmount = 0;\n    indexCurrentDate = true;\n  }\n\n  return data;\n}\n\nfunction test1(standardLabels, filteredData, mainCategory, subCategory) {\n  const data = [];\n  const checkboxNoChange =\n    (mainCategory === \"expense\" && subCategory.length === 6) ||\n    (mainCategory === \"income\" && subCategory.length === 3);\n  let indexData = 0;\n  let indexCurrentDate = true;\n  let currentAmount = 0;\n  let yearLabel, monthLabel, dayLabel, yearDate, monthData, dayData;\n\n  for (let i = 0; i < standardLabels.length; i++) {\n    yearLabel = standardLabels[i].slice(0, 4);\n    monthLabel = standardLabels[i].slice(5, 7);\n    dayLabel = standardLabels[i].slice(8);\n\n    while (indexCurrentDate) {\n      yearDate = filteredData[indexData]?.time.slice(0, 4);\n      monthData = filteredData[indexData]?.time.slice(5, 7);\n      dayData = filteredData[indexData]?.time.slice(8);\n\n      /*\n      have to make sure\n      1) year and month is the same\n      2) day is in the valid range\n      */\n      if (yearLabel === yearDate && monthLabel === monthData) {\n        if (Number(dayLabel) <= Number(dayData) && 31 >= Number(dayData))\n          if (filteredData[indexData].category === mainCategory) {\n            if (\n              checkboxNoChange ||\n              subCategory.includes(filteredData[indexData].mainCate)\n            )\n              currentAmount += Number(filteredData[indexData].price);\n          }\n\n        indexData++;\n      } else indexCurrentDate = false;\n    }\n\n    data.push(currentAmount);\n    currentAmount = 0;\n    indexCurrentDate = true;\n  }\n\n  return data;\n}\n"]},"metadata":{},"sourceType":"module"}