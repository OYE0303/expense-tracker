{"ast":null,"code":"const dateOptions = {\n  weekday: \"short\"\n};\n/*\nthe reason adding \"string\" in the object\nis because i want to prceisely get the data in certain range\nfor example, in the weekly overview and monthly overview\n\nin the expense data, the time is string format, like this \"2021-11-11\"\nand put this inside new Date(\"2011-11-11\") will always get the date at 8:00 am\n\nbut inside this for-loop, currentDate is based on the current time which means the time will be different, no longer be 8:00 am, it could be 15:33, for example\n\nso make both time to be string format, and put them inside new Date(), it could make sure the converted number time are the same\n*/\n\nfunction createWeeklyData(currentDate) {\n  const dateArr = [];\n  /*\n  .setDate() will change the date object\n  In order to avoid change the input, so we copy the value of input\n  (pure function)\n  */\n\n  const newCurrentDate = new Date(currentDate.getTime());\n\n  for (let i = 0; i < 7; i++) {\n    const date = new Date(newCurrentDate.setDate(newCurrentDate.getDate() - newCurrentDate.getDay() + i));\n    const year = date.getFullYear();\n    const month = date.getMonth();\n    const monthDay = date.getDate();\n    dateArr.push({\n      weekDay: new Intl.DateTimeFormat(\"en-US\", dateOptions).format(date).toUpperCase(),\n      monthDay,\n      month,\n      year,\n      dateObj: date\n    });\n  }\n\n  return dateArr;\n}\n\nexport default createWeeklyData;","map":{"version":3,"sources":["/Users/eyo/Desktop/project-expenseTracker-main/src/Others/createWeeklyData.js"],"names":["dateOptions","weekday","createWeeklyData","currentDate","dateArr","newCurrentDate","Date","getTime","i","date","setDate","getDate","getDay","year","getFullYear","month","getMonth","monthDay","push","weekDay","Intl","DateTimeFormat","format","toUpperCase","dateObj"],"mappings":"AAAA,MAAMA,WAAW,GAAG;AAClBC,EAAAA,OAAO,EAAE;AADS,CAApB;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,gBAAT,CAA0BC,WAA1B,EAAuC;AACrC,QAAMC,OAAO,GAAG,EAAhB;AAEA;AACF;AACA;AACA;AACA;;AACE,QAAMC,cAAc,GAAG,IAAIC,IAAJ,CAASH,WAAW,CAACI,OAAZ,EAAT,CAAvB;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC1B,UAAMC,IAAI,GAAG,IAAIH,IAAJ,CACXD,cAAc,CAACK,OAAf,CACEL,cAAc,CAACM,OAAf,KAA2BN,cAAc,CAACO,MAAf,EAA3B,GAAqDJ,CADvD,CADW,CAAb;AAMA,UAAMK,IAAI,GAAGJ,IAAI,CAACK,WAAL,EAAb;AACA,UAAMC,KAAK,GAAGN,IAAI,CAACO,QAAL,EAAd;AACA,UAAMC,QAAQ,GAAGR,IAAI,CAACE,OAAL,EAAjB;AAEAP,IAAAA,OAAO,CAACc,IAAR,CAAa;AACXC,MAAAA,OAAO,EAAE,IAAIC,IAAI,CAACC,cAAT,CAAwB,OAAxB,EAAiCrB,WAAjC,EACNsB,MADM,CACCb,IADD,EAENc,WAFM,EADE;AAIXN,MAAAA,QAJW;AAKXF,MAAAA,KALW;AAMXF,MAAAA,IANW;AAOXW,MAAAA,OAAO,EAAEf;AAPE,KAAb;AASD;;AAED,SAAOL,OAAP;AACD;;AAED,eAAeF,gBAAf","sourcesContent":["const dateOptions = {\n  weekday: \"short\",\n};\n/*\nthe reason adding \"string\" in the object\nis because i want to prceisely get the data in certain range\nfor example, in the weekly overview and monthly overview\n\nin the expense data, the time is string format, like this \"2021-11-11\"\nand put this inside new Date(\"2011-11-11\") will always get the date at 8:00 am\n\nbut inside this for-loop, currentDate is based on the current time which means the time will be different, no longer be 8:00 am, it could be 15:33, for example\n\nso make both time to be string format, and put them inside new Date(), it could make sure the converted number time are the same\n*/\nfunction createWeeklyData(currentDate) {\n  const dateArr = [];\n\n  /*\n  .setDate() will change the date object\n  In order to avoid change the input, so we copy the value of input\n  (pure function)\n  */\n  const newCurrentDate = new Date(currentDate.getTime());\n\n  for (let i = 0; i < 7; i++) {\n    const date = new Date(\n      newCurrentDate.setDate(\n        newCurrentDate.getDate() - newCurrentDate.getDay() + i\n      )\n    );\n\n    const year = date.getFullYear();\n    const month = date.getMonth();\n    const monthDay = date.getDate();\n\n    dateArr.push({\n      weekDay: new Intl.DateTimeFormat(\"en-US\", dateOptions)\n        .format(date)\n        .toUpperCase(),\n      monthDay,\n      month,\n      year,\n      dateObj: date,\n    });\n  }\n\n  return dateArr;\n}\n\nexport default createWeeklyData;\n"]},"metadata":{},"sourceType":"module"}