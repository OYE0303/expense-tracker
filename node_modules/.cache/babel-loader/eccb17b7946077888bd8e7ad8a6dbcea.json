{"ast":null,"code":"var _jsxFileName = \"/Users/eyo/Desktop/project-expenseTracker-main/src/components/MainContent/Account/AccountOverview/AccountChart.js\",\n    _s = $RefreshSig$();\n\nimport { useRef, useEffect, useState, useContext } from \"react\";\nimport InputRadio from \"../../../UI/InputRadio/InputRadio\";\nimport ExpenseDataContext from \"../../../../store/expenseData/expenseData--context\";\nimport createLabelsAccount from \"../../../../Others/CreateAccountData/createLabelsAccount\";\nimport createChartDataArr from \"../../../../Others/CreateAccountData/CreateChartDataArr\";\nimport style from \"./AccountChart.module.css\";\nimport Chart from \"chart.js/auto\"; // for choosing diff time range (input radio)\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst timeRangeArr = [\"1wk\", \"1mo\", \"3mo\", \"6mo\", \"1yr\"];\nconst TODAY = new Date(); // first day of the week\n\nconst initialDate = new Date(new Date().setDate(new Date().getDate() - 7)); // an array of labels(string)\n\nconst initialLabels = createLabelsAccount(initialDate, TODAY);\n\nfunction AccountChart() {\n  _s();\n\n  const {\n    expenseData\n  } = useContext(ExpenseDataContext);\n  const [chartData, setChartData] = useState({\n    data: createChartDataArr(initialLabels, expenseData),\n    labels: initialLabels\n  });\n  const chartRef = useRef(null);\n  const config = {\n    type: \"line\",\n    data: {\n      labels: chartData.labels,\n      datasets: [{\n        fill: {\n          target: \"origin\"\n        },\n        label: \"\",\n        data: chartData.data,\n        backgroundColor: [\"rgba(54, 162, 235, 0.2)\"],\n        borderColor: [\"rgb(54, 162, 235)\"],\n        borderWidth: 1,\n        pointBackgroundColor: [\"rgb(54, 162, 235)\"]\n      }]\n    },\n    options: {\n      elements: {\n        line: {\n          tension: 0.5\n        }\n      },\n      scales: {\n        y: {\n          beginAtZero: true\n        }\n      }\n    }\n  };\n  useEffect(() => {\n    const chart = new Chart(chartRef.current, config);\n    return function cleanUp() {\n      chart.destroy();\n    };\n  }, [config]); // helper function for changing time range\n\n  function chartRadioChangeHandler(e) {\n    const today = new Date();\n    const value = e.target.value;\n    if (value === \"1wk\") today.setDate(today.getDate() - 7);\n    if (value === \"1mo\") today.setMonth(today.getMonth() - 1);\n    if (value === \"3mo\") today.setMonth(today.getMonth() - 3);\n    if (value === \"6mo\") today.setMonth(today.getMonth() - 6);\n    if (value === \"1yr\") today.setFullYear(today.getFullYear() - 1);\n    const labels = createLabelsAccount(today, TODAY);\n    const chartData = createChartDataArr(labels, expenseData);\n    setChartData({\n      data: chartData,\n      labels\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: style[\"chart__container\"],\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      onChange: chartRadioChangeHandler,\n      className: style[\"radio__container\"],\n      children: timeRangeArr.map((element, index) => /*#__PURE__*/_jsxDEV(InputRadio, {\n        label: element,\n        id: element,\n        value: element,\n        name: \"chart__btn\",\n        defaultChecked: index === 0,\n        classLabel: style.label,\n        classInput: style.input,\n        classCheck: style.check\n      }, element, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n        className: style.chart,\n        ref: chartRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n}\n\n_s(AccountChart, \"89K85GDyJHACM4eT81J8CzMQNxs=\");\n\n_c = AccountChart;\nexport default AccountChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"AccountChart\");","map":{"version":3,"sources":["/Users/eyo/Desktop/project-expenseTracker-main/src/components/MainContent/Account/AccountOverview/AccountChart.js"],"names":["useRef","useEffect","useState","useContext","InputRadio","ExpenseDataContext","createLabelsAccount","createChartDataArr","style","Chart","timeRangeArr","TODAY","Date","initialDate","setDate","getDate","initialLabels","AccountChart","expenseData","chartData","setChartData","data","labels","chartRef","config","type","datasets","fill","target","label","backgroundColor","borderColor","borderWidth","pointBackgroundColor","options","elements","line","tension","scales","y","beginAtZero","chart","current","cleanUp","destroy","chartRadioChangeHandler","e","today","value","setMonth","getMonth","setFullYear","getFullYear","map","element","index","input","check"],"mappings":"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","sourcesContent":["import { useRef, useEffect, useState, useContext } from \"react\";\nimport InputRadio from \"../../../UI/InputRadio/InputRadio\";\nimport ExpenseDataContext from \"../../../../store/expenseData/expenseData--context\";\nimport createLabelsAccount from \"../../../../Others/CreateAccountData/createLabelsAccount\";\nimport createChartDataArr from \"../../../../Others/CreateAccountData/CreateChartDataArr\";\nimport style from \"./AccountChart.module.css\";\nimport Chart from \"chart.js/auto\";\n\n// for choosing diff time range (input radio)\nconst timeRangeArr = [\"1wk\", \"1mo\", \"3mo\", \"6mo\", \"1yr\"];\n\nconst TODAY = new Date();\n\n// first day of the week\nconst initialDate = new Date(new Date().setDate(new Date().getDate() - 7));\n\n// an array of labels(string)\nconst initialLabels = createLabelsAccount(initialDate, TODAY);\n\nfunction AccountChart() {\n  const { expenseData } = useContext(ExpenseDataContext);\n  const [chartData, setChartData] = useState({\n    data: createChartDataArr(initialLabels, expenseData),\n    labels: initialLabels,\n  });\n  const chartRef = useRef(null);\n\n  const config = {\n    type: \"line\",\n    data: {\n      labels: chartData.labels,\n      datasets: [\n        {\n          fill: {\n            target: \"origin\",\n          },\n          label: \"\",\n          data: chartData.data,\n          backgroundColor: [\"rgba(54, 162, 235, 0.2)\"],\n          borderColor: [\"rgb(54, 162, 235)\"],\n          borderWidth: 1,\n          pointBackgroundColor: [\"rgb(54, 162, 235)\"],\n        },\n      ],\n    },\n    options: {\n      elements: {\n        line: {\n          tension: 0.5,\n        },\n      },\n      scales: {\n        y: {\n          beginAtZero: true,\n        },\n      },\n    },\n  };\n\n  useEffect(() => {\n    const chart = new Chart(chartRef.current, config);\n\n    return function cleanUp() {\n      chart.destroy();\n    };\n  }, [config]);\n\n  // helper function for changing time range\n  function chartRadioChangeHandler(e) {\n    const today = new Date();\n    const value = e.target.value;\n\n    if (value === \"1wk\") today.setDate(today.getDate() - 7);\n    if (value === \"1mo\") today.setMonth(today.getMonth() - 1);\n    if (value === \"3mo\") today.setMonth(today.getMonth() - 3);\n    if (value === \"6mo\") today.setMonth(today.getMonth() - 6);\n    if (value === \"1yr\") today.setFullYear(today.getFullYear() - 1);\n\n    const labels = createLabelsAccount(today, TODAY);\n\n    const chartData = createChartDataArr(labels, expenseData);\n\n    setChartData({ data: chartData, labels });\n  }\n\n  return (\n    <div className={style[\"chart__container\"]}>\n      <div\n        onChange={chartRadioChangeHandler}\n        className={style[\"radio__container\"]}\n      >\n        {timeRangeArr.map((element, index) => (\n          <InputRadio\n            key={element}\n            label={element}\n            id={element}\n            value={element}\n            name=\"chart__btn\"\n            defaultChecked={index === 0}\n            classLabel={style.label}\n            classInput={style.input}\n            classCheck={style.check}\n          />\n        ))}\n      </div>\n      <div>\n        <canvas className={style.chart} ref={chartRef}></canvas>\n      </div>\n    </div>\n  );\n}\n\nexport default AccountChart;\n"]},"metadata":{},"sourceType":"module"}