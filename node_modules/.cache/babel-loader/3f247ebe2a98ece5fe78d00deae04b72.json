{"ast":null,"code":"var _jsxFileName = \"/Users/eyo/Desktop/project-expenseTracker-main/src/components/MainContent/Chart/ChartMain/ChartMain.js\",\n    _s = $RefreshSig$();\n\nimport { useRef, useEffect, useContext } from \"react\";\nimport ExpenseDataContext from \"../../../../store/expenseData/expenseData--context\";\nimport style from \"./ChartMain.module.css\";\nimport Chart from \"chart.js/auto\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst dateOptObj = {\n  month: \"short\"\n};\nconst data1 = {\n  labels: [\"Red\", \"Blue\", \"Yellow\"],\n  datasets: [{\n    label: \"My First Dataset\",\n    data: [300, 50, 100],\n    backgroundColor: [\"rgb(255, 99, 132)\", \"rgb(54, 162, 235)\", \"rgb(255, 205, 86)\"],\n    hoverOffset: 4\n  }]\n};\nconst config1 = {\n  type: \"doughnut\",\n  data: data1\n};\n\nfunction ChartMain(props) {\n  _s();\n\n  const chartRef = useRef(null);\n  const {\n    EXPENSE_DATA\n  } = useContext(ExpenseDataContext);\n\n  if (props.chartData.mainType === \"time\") {\n    let labels = [],\n        data = [];\n    const standardLabels = createStandardLabelsArr(props.chartData.timeDuration, props.chartData.startingDate);\n    labels = createLabelsArr(standardLabels, props.chartData.timeDuration);\n    data = createDataArr(standardLabels, createFilteredData(standardLabels, EXPENSE_DATA), props.chartData.timeDuration, props.chartData.mainCategory, props.chartData.subCategory);\n    const dataObj = {\n      labels: labels,\n      datasets: [{\n        label: \"\",\n        data: data,\n        backgroundColor: [\"rgba(255, 99, 132, 0.2)\", \"rgba(255, 159, 64, 0.2)\", \"rgba(255, 205, 86, 0.2)\", \"rgba(75, 192, 192, 0.2)\", \"rgba(54, 162, 235, 0.2)\", \"rgba(153, 102, 255, 0.2)\", \"rgba(201, 203, 207, 0.2)\"],\n        borderColor: [\"rgb(255, 99, 132)\", \"rgb(255, 159, 64)\", \"rgb(255, 205, 86)\", \"rgb(75, 192, 192)\", \"rgb(54, 162, 235)\", \"rgb(153, 102, 255)\", \"rgb(201, 203, 207)\"],\n        borderWidth: 1\n      }]\n    };\n    const config = {\n      type: \"bar\",\n      data: dataObj,\n      options: {\n        scales: {\n          y: {\n            beginAtZero: true\n          }\n        }\n      }\n    };\n  } else {\n    const filteredData = EXPENSE_DATA.filter(element => Number(new Date(element.time)) >= Number(new Date(props.chartData.startingDate)) && Number(new Date(element.time)) <= Number(new Date(props.chartData.endingDate)));\n    const labels = props.chartData.subCategory;\n    console.log(labels);\n    console.log(filteredData);\n  } // useEffect(() => {\n  //   const chart = new Chart(chartRef.current, config);\n  //   return function cleanUp() {\n  //     chart.destroy();\n  //   };\n  // }, [labels]);\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: style.chartMain,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ChartMain, \"+o1nGUf0gmfc6lFgmRh5QYfQCMo=\");\n\n_c = ChartMain;\nexport default ChartMain;\n\nfunction createLabelsArr(standardLabels, duration) {\n  if (duration === \"6\" || duration === \"12\") {\n    return standardLabels.map(label => new Intl.DateTimeFormat(\"en-US\", dateOptObj).format(new Date(label)));\n  }\n\n  return standardLabels.map(label => `${label.slice(5, 7)}${label.slice(8)}`);\n}\n\nfunction createFilteredData(standardLabels, expensData) {\n  const numStartingDate = Number(new Date(standardLabels[0]));\n  const numEndingDate = Number(new Date(standardLabels[standardLabels.length - 1]));\n  return expensData.filter(element => Number(new Date(element.time)) >= numStartingDate && Number(new Date(element.time)) <= numEndingDate).sort((elementA, elementB) => Number(new Date(elementA.time)) - Number(new Date(elementB.time)));\n}\n\nfunction createDataArr(standardLabels, filteredData, timeDuration, mainCategory, subCategory) {\n  if (timeDuration === \"12\" || timeDuration === \"6\") return createDataArrMonth(standardLabels, filteredData, mainCategory, subCategory);else return createDataArrDay(standardLabels, filteredData, mainCategory, subCategory);\n}\n\nfunction createDataArrDay(standardLabels, filteredData, mainCategory, subCategory) {\n  const data = [];\n  const checkboxNoChange = mainCategory === \"expense\" && subCategory.length === 6 || mainCategory === \"income\" && subCategory.length === 3;\n  let indexData = 0;\n  let indexCurrentDate = true;\n  let currentAmount = 0;\n  let currentLabel;\n\n  for (let i = 0; i < standardLabels.length; i++) {\n    currentLabel = Number(new Date(standardLabels[i]));\n\n    while (indexCurrentDate) {\n      var _filteredData$indexDa;\n\n      if (Number(new Date((_filteredData$indexDa = filteredData[indexData]) === null || _filteredData$indexDa === void 0 ? void 0 : _filteredData$indexDa.time)) <= currentLabel) {\n        if (filteredData[indexData].category === mainCategory) {\n          if (checkboxNoChange || subCategory.includes(filteredData[indexData].mainCate)) currentAmount += Number(filteredData[indexData].price);\n        }\n\n        indexData++;\n      } else indexCurrentDate = false;\n    }\n\n    data.push(currentAmount);\n    currentAmount = 0;\n    indexCurrentDate = true;\n  }\n\n  return data;\n}\n\nfunction createDataArrMonth(standardLabels, filteredData, mainCategory, subCategory) {\n  const data = [];\n  const checkboxNoChange = mainCategory === \"expense\" && subCategory.length === 6 || mainCategory === \"income\" && subCategory.length === 3;\n  let indexData = 0;\n  let indexCurrentDate = true;\n  let currentAmount = 0;\n  let yearLabel, monthLabel, dayLabel, yearDate, monthData, dayData;\n\n  for (let i = 0; i < standardLabels.length; i++) {\n    yearLabel = standardLabels[i].slice(0, 4);\n    monthLabel = standardLabels[i].slice(5, 7);\n    dayLabel = standardLabels[i].slice(8);\n\n    while (indexCurrentDate) {\n      var _filteredData$indexDa2, _filteredData$indexDa3, _filteredData$indexDa4;\n\n      yearDate = (_filteredData$indexDa2 = filteredData[indexData]) === null || _filteredData$indexDa2 === void 0 ? void 0 : _filteredData$indexDa2.time.slice(0, 4);\n      monthData = (_filteredData$indexDa3 = filteredData[indexData]) === null || _filteredData$indexDa3 === void 0 ? void 0 : _filteredData$indexDa3.time.slice(5, 7);\n      dayData = (_filteredData$indexDa4 = filteredData[indexData]) === null || _filteredData$indexDa4 === void 0 ? void 0 : _filteredData$indexDa4.time.slice(8);\n\n      if (yearLabel === yearDate && monthLabel === monthData) {\n        if (Number(dayLabel) <= Number(dayData) && 31 >= Number(dayData)) if (filteredData[indexData].category === mainCategory) {\n          if (checkboxNoChange || subCategory.includes(filteredData[indexData].mainCate)) currentAmount += Number(filteredData[indexData].price);\n        }\n        indexData++;\n      } else indexCurrentDate = false;\n    }\n\n    data.push(currentAmount);\n    currentAmount = 0;\n    indexCurrentDate = true;\n  }\n\n  return data;\n}\n\nfunction createStandardLabelsArr(duration, startingDate) {\n  const today = new Date(startingDate);\n  let labels = []; // one week\n\n  if (duration === \"7\") {\n    createStandardLabelsArrHelper(labels, 7, 1, \"day\", today);\n  }\n\n  if (duration === \"14\") {\n    createStandardLabelsArrHelper(labels, 14, 1, \"day\", today);\n  }\n\n  if (duration === \"30\") {\n    createStandardLabelsArrHelper(labels, 30, 1, \"day\", today);\n  }\n\n  if (duration === \"90\") {\n    createStandardLabelsArrHelper(labels, 30, 3, \"day\", today);\n  }\n\n  if (duration === \"6\") {\n    createStandardLabelsArrHelper(labels, 6, 1, \"month\", today);\n  }\n\n  if (duration === \"12\") {\n    createStandardLabelsArrHelper(labels, 12, 1, \"month\", today);\n  }\n\n  return labels;\n}\n\nfunction createStandardLabelsArrHelper(labels, duration, incrementAmount, dayMonth, today) {\n  let tmpDay = today;\n  let day;\n  let month;\n  let year = today.getFullYear();\n  let changeYear = false; // if it's increment by month, the day is never change\n  // we could put it outisde for-loop\n\n  if (dayMonth === \"month\") {\n    if (tmpDay.getDate() < 10) day = `0${tmpDay.getDate()}`;else day = tmpDay.getDate();\n  }\n\n  for (let i = 0; i < duration; i++) {\n    // incremenet by month\n    if (dayMonth === \"month\") tmpDay.setMonth(tmpDay.getMonth() + incrementAmount); // increment by day\n\n    if (dayMonth === \"day\") {\n      tmpDay.setDate(tmpDay.getDate() + incrementAmount); // day will change, so put this inside for-loop\n\n      if (tmpDay.getDate() < 10) day = `0${tmpDay.getDate()}`;else day = tmpDay.getDate();\n    }\n\n    if (tmpDay.getMonth() + 1 < 10) month = `0${tmpDay.getMonth() + 1}`;else month = tmpDay.getMonth() + 1; // increment year\n\n    if (changeYear) {\n      year++;\n      changeYear = false;\n    }\n\n    if (tmpDay.getMonth() === 11) changeYear = true;\n    labels.push(`${year}-${month}-${day}`);\n  }\n}\n/*\n if (timeDuration === \"6\" || timeDuration === \"12\") {\n    if (mainCategory === \"income\" && subCategory.length === 3) {\n      const labelsLength = labels.length;\n      let indexLabel = 0;\n      let indexData = 0;\n      let indexCurrentDate = true;\n      let currentMonth;\n      let currentAmount = 0;\n\n      while (indexLabel < labelsLength) {\n        // keep adding if it's still at current date(time)\n        while (indexCurrentDate) {\n          currentMonth = new Intl.DateTimeFormat(\"en-US\", dateOptObj).format(\n            new Date(filteredData[indexData]?.time)\n          );\n          // check date(time)\n          if (currentMonth === labels1[indexLabel]) {\n            // check main category\n            if (filteredData[indexData].category === \"income\") {\n              currentAmount += Number(filteredData[indexData].price);\n            }\n\n            indexData++;\n          } else indexCurrentDate = false;\n        }\n\n        data.push(currentAmount);\n\n        currentAmount = 0;\n        indexCurrentDate = true;\n        indexLabel++;\n      }\n    }\n\n    if (mainCategory === \"expense\" && subCategory.length === 6) {\n      const labelsLength = labels.length;\n      let indexLabel = 0;\n      let indexData = 0;\n      let indexCurrentDate = true;\n      let currentMonth;\n      let currentAmount = 0;\n\n      while (indexLabel < labelsLength) {\n        // keep adding if it's still at current date(time)\n        while (indexCurrentDate) {\n          console.log(filteredData);\n          if (!filteredData[indexData]?.time)\n            currentMonth = new Intl.DateTimeFormat(\"en-US\", dateOptObj).format(\n              new Date(filteredData[indexData]?.time)\n            );\n          console.log(currentMonth);\n\n          if (currentMonth === labels1[indexLabel]) {\n            // check main category\n            if (filteredData[indexData].category === \"income\") {\n              currentAmount += Number(filteredData[indexData].price);\n            }\n\n            indexData++;\n          } else indexCurrentDate = false;\n        }\n\n        data.push(currentAmount);\n\n        currentAmount = 0;\n        indexCurrentDate = true;\n        indexLabel++;\n      }\n    }\n  }\n  // day base\n  else {\n    if (mainCategory === \"income\" && subCategory.length === 3) {\n      const labelsLength = labels.length;\n      let indexLabel = 0;\n      let indexData = 0;\n      let indexCurrentDate = true;\n      let currentDate;\n      let currentAmount = 0;\n\n      while (indexLabel < labelsLength) {\n        currentDate = `${year}-${labels[indexLabel].slice(0, 2)}-${labels[\n          indexLabel\n        ].slice(2)}`;\n\n        // keep adding if it's still at current date(time)\n        if (indexData < filteredData.length - 1) {\n          while (indexCurrentDate) {\n            // check date(time)\n            if (filteredData[indexData].time === currentDate) {\n              // check main category\n              if (filteredData[indexData].category === \"income\") {\n                currentAmount += Number(filteredData[indexData].price);\n              }\n\n              indexData++;\n            } else indexCurrentDate = false;\n          }\n        }\n\n        data.push(currentAmount);\n\n        currentAmount = 0;\n        indexCurrentDate = true;\n        indexLabel++;\n      }\n    }\n\n    if (mainCategory === \"expense\" && subCategory.length === 6) {\n      const labelsLength = labels.length;\n      let indexLabel = 0;\n      let indexData = 0;\n      let indexCurrentDate = true;\n      let currentDate;\n      let currentAmount = 0;\n\n      while (indexLabel < labelsLength) {\n        currentDate = `${year}-${labels[indexLabel].slice(0, 2)}-${labels[\n          indexLabel\n        ].slice(2)}`;\n\n        // keep adding if it's still at current date(time)\n\n        while (indexCurrentDate) {\n          // check date(time)\n          if (filteredData[indexData]?.time === currentDate) {\n            // check main category\n            if (filteredData[indexData].category === \"expense\") {\n              currentAmount += Number(filteredData[indexData].price);\n            }\n\n            indexData++;\n          } else indexCurrentDate = false;\n        }\n\n        data.push(currentAmount);\n\n        currentAmount = 0;\n        indexCurrentDate = true;\n        indexLabel++;\n      }\n    }\n  }\n*/\n\n\nvar _c;\n\n$RefreshReg$(_c, \"ChartMain\");","map":{"version":3,"sources":["/Users/eyo/Desktop/project-expenseTracker-main/src/components/MainContent/Chart/ChartMain/ChartMain.js"],"names":["useRef","useEffect","useContext","ExpenseDataContext","style","Chart","dateOptObj","month","data1","labels","datasets","label","data","backgroundColor","hoverOffset","config1","type","ChartMain","props","chartRef","EXPENSE_DATA","chartData","mainType","standardLabels","createStandardLabelsArr","timeDuration","startingDate","createLabelsArr","createDataArr","createFilteredData","mainCategory","subCategory","dataObj","borderColor","borderWidth","config","options","scales","y","beginAtZero","filteredData","filter","element","Number","Date","time","endingDate","console","log","chartMain","duration","map","Intl","DateTimeFormat","format","slice","expensData","numStartingDate","numEndingDate","length","sort","elementA","elementB","createDataArrMonth","createDataArrDay","checkboxNoChange","indexData","indexCurrentDate","currentAmount","currentLabel","i","category","includes","mainCate","price","push","yearLabel","monthLabel","dayLabel","yearDate","monthData","dayData","today","createStandardLabelsArrHelper","incrementAmount","dayMonth","tmpDay","day","year","getFullYear","changeYear","getDate","setMonth","getMonth","setDate"],"mappings":"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":["import { useRef, useEffect, useContext } from \"react\";\nimport ExpenseDataContext from \"../../../../store/expenseData/expenseData--context\";\nimport style from \"./ChartMain.module.css\";\nimport Chart from \"chart.js/auto\";\n\nconst dateOptObj = { month: \"short\" };\nconst data1 = {\n  labels: [\"Red\", \"Blue\", \"Yellow\"],\n  datasets: [\n    {\n      label: \"My First Dataset\",\n      data: [300, 50, 100],\n      backgroundColor: [\n        \"rgb(255, 99, 132)\",\n        \"rgb(54, 162, 235)\",\n        \"rgb(255, 205, 86)\",\n      ],\n      hoverOffset: 4,\n    },\n  ],\n};\n\nconst config1 = {\n  type: \"doughnut\",\n  data: data1,\n};\n\nfunction ChartMain(props) {\n  const chartRef = useRef(null);\n  const { EXPENSE_DATA } = useContext(ExpenseDataContext);\n\n  if (props.chartData.mainType === \"time\") {\n    let labels = [],\n      data = [];\n\n    const standardLabels = createStandardLabelsArr(\n      props.chartData.timeDuration,\n      props.chartData.startingDate\n    );\n\n    labels = createLabelsArr(standardLabels, props.chartData.timeDuration);\n\n    data = createDataArr(\n      standardLabels,\n      createFilteredData(standardLabels, EXPENSE_DATA),\n      props.chartData.timeDuration,\n      props.chartData.mainCategory,\n      props.chartData.subCategory\n    );\n\n    const dataObj = {\n      labels: labels,\n      datasets: [\n        {\n          label: \"\",\n          data: data,\n          backgroundColor: [\n            \"rgba(255, 99, 132, 0.2)\",\n            \"rgba(255, 159, 64, 0.2)\",\n            \"rgba(255, 205, 86, 0.2)\",\n            \"rgba(75, 192, 192, 0.2)\",\n            \"rgba(54, 162, 235, 0.2)\",\n            \"rgba(153, 102, 255, 0.2)\",\n            \"rgba(201, 203, 207, 0.2)\",\n          ],\n          borderColor: [\n            \"rgb(255, 99, 132)\",\n            \"rgb(255, 159, 64)\",\n            \"rgb(255, 205, 86)\",\n            \"rgb(75, 192, 192)\",\n            \"rgb(54, 162, 235)\",\n            \"rgb(153, 102, 255)\",\n            \"rgb(201, 203, 207)\",\n          ],\n          borderWidth: 1,\n        },\n      ],\n    };\n\n    const config = {\n      type: \"bar\",\n      data: dataObj,\n      options: {\n        scales: {\n          y: {\n            beginAtZero: true,\n          },\n        },\n      },\n    };\n  } else {\n    const filteredData = EXPENSE_DATA.filter(\n      (element) =>\n        Number(new Date(element.time)) >=\n          Number(new Date(props.chartData.startingDate)) &&\n        Number(new Date(element.time)) <=\n          Number(new Date(props.chartData.endingDate))\n    );\n\n    const labels = props.chartData.subCategory;\n\n    console.log(labels);\n    console.log(filteredData);\n  }\n\n  // useEffect(() => {\n  //   const chart = new Chart(chartRef.current, config);\n\n  //   return function cleanUp() {\n  //     chart.destroy();\n  //   };\n  // }, [labels]);\n\n  return (\n    <div className={style.chartMain}>\n      <div>{/* <canvas ref={chartRef}></canvas> */}</div>\n    </div>\n  );\n}\n\nexport default ChartMain;\n\nfunction createLabelsArr(standardLabels, duration) {\n  if (duration === \"6\" || duration === \"12\") {\n    return standardLabels.map((label) =>\n      new Intl.DateTimeFormat(\"en-US\", dateOptObj).format(new Date(label))\n    );\n  }\n\n  return standardLabels.map((label) => `${label.slice(5, 7)}${label.slice(8)}`);\n}\n\nfunction createFilteredData(standardLabels, expensData) {\n  const numStartingDate = Number(new Date(standardLabels[0]));\n  const numEndingDate = Number(\n    new Date(standardLabels[standardLabels.length - 1])\n  );\n\n  return expensData\n    .filter(\n      (element) =>\n        Number(new Date(element.time)) >= numStartingDate &&\n        Number(new Date(element.time)) <= numEndingDate\n    )\n    .sort(\n      (elementA, elementB) =>\n        Number(new Date(elementA.time)) - Number(new Date(elementB.time))\n    );\n}\n\nfunction createDataArr(\n  standardLabels,\n  filteredData,\n  timeDuration,\n  mainCategory,\n  subCategory\n) {\n  if (timeDuration === \"12\" || timeDuration === \"6\")\n    return createDataArrMonth(\n      standardLabels,\n      filteredData,\n      mainCategory,\n      subCategory\n    );\n  else\n    return createDataArrDay(\n      standardLabels,\n      filteredData,\n      mainCategory,\n      subCategory\n    );\n}\n\nfunction createDataArrDay(\n  standardLabels,\n  filteredData,\n  mainCategory,\n  subCategory\n) {\n  const data = [];\n  const checkboxNoChange =\n    (mainCategory === \"expense\" && subCategory.length === 6) ||\n    (mainCategory === \"income\" && subCategory.length === 3);\n  let indexData = 0;\n  let indexCurrentDate = true;\n  let currentAmount = 0;\n  let currentLabel;\n\n  for (let i = 0; i < standardLabels.length; i++) {\n    currentLabel = Number(new Date(standardLabels[i]));\n\n    while (indexCurrentDate) {\n      if (Number(new Date(filteredData[indexData]?.time)) <= currentLabel) {\n        if (filteredData[indexData].category === mainCategory) {\n          if (\n            checkboxNoChange ||\n            subCategory.includes(filteredData[indexData].mainCate)\n          )\n            currentAmount += Number(filteredData[indexData].price);\n        }\n\n        indexData++;\n      } else indexCurrentDate = false;\n    }\n\n    data.push(currentAmount);\n    currentAmount = 0;\n    indexCurrentDate = true;\n  }\n\n  return data;\n}\n\nfunction createDataArrMonth(\n  standardLabels,\n  filteredData,\n  mainCategory,\n  subCategory\n) {\n  const data = [];\n  const checkboxNoChange =\n    (mainCategory === \"expense\" && subCategory.length === 6) ||\n    (mainCategory === \"income\" && subCategory.length === 3);\n  let indexData = 0;\n  let indexCurrentDate = true;\n  let currentAmount = 0;\n  let yearLabel, monthLabel, dayLabel, yearDate, monthData, dayData;\n\n  for (let i = 0; i < standardLabels.length; i++) {\n    yearLabel = standardLabels[i].slice(0, 4);\n    monthLabel = standardLabels[i].slice(5, 7);\n    dayLabel = standardLabels[i].slice(8);\n\n    while (indexCurrentDate) {\n      yearDate = filteredData[indexData]?.time.slice(0, 4);\n      monthData = filteredData[indexData]?.time.slice(5, 7);\n      dayData = filteredData[indexData]?.time.slice(8);\n\n      if (yearLabel === yearDate && monthLabel === monthData) {\n        if (Number(dayLabel) <= Number(dayData) && 31 >= Number(dayData))\n          if (filteredData[indexData].category === mainCategory) {\n            if (\n              checkboxNoChange ||\n              subCategory.includes(filteredData[indexData].mainCate)\n            )\n              currentAmount += Number(filteredData[indexData].price);\n          }\n\n        indexData++;\n      } else indexCurrentDate = false;\n    }\n\n    data.push(currentAmount);\n    currentAmount = 0;\n    indexCurrentDate = true;\n  }\n\n  return data;\n}\n\nfunction createStandardLabelsArr(duration, startingDate) {\n  const today = new Date(startingDate);\n\n  let labels = [];\n\n  // one week\n  if (duration === \"7\") {\n    createStandardLabelsArrHelper(labels, 7, 1, \"day\", today);\n  }\n\n  if (duration === \"14\") {\n    createStandardLabelsArrHelper(labels, 14, 1, \"day\", today);\n  }\n\n  if (duration === \"30\") {\n    createStandardLabelsArrHelper(labels, 30, 1, \"day\", today);\n  }\n\n  if (duration === \"90\") {\n    createStandardLabelsArrHelper(labels, 30, 3, \"day\", today);\n  }\n\n  if (duration === \"6\") {\n    createStandardLabelsArrHelper(labels, 6, 1, \"month\", today);\n  }\n\n  if (duration === \"12\") {\n    createStandardLabelsArrHelper(labels, 12, 1, \"month\", today);\n  }\n\n  return labels;\n}\n\nfunction createStandardLabelsArrHelper(\n  labels,\n  duration,\n  incrementAmount,\n  dayMonth,\n  today\n) {\n  let tmpDay = today;\n  let day;\n  let month;\n  let year = today.getFullYear();\n  let changeYear = false;\n\n  // if it's increment by month, the day is never change\n  // we could put it outisde for-loop\n  if (dayMonth === \"month\") {\n    if (tmpDay.getDate() < 10) day = `0${tmpDay.getDate()}`;\n    else day = tmpDay.getDate();\n  }\n\n  for (let i = 0; i < duration; i++) {\n    // incremenet by month\n    if (dayMonth === \"month\")\n      tmpDay.setMonth(tmpDay.getMonth() + incrementAmount);\n\n    // increment by day\n    if (dayMonth === \"day\") {\n      tmpDay.setDate(tmpDay.getDate() + incrementAmount);\n\n      // day will change, so put this inside for-loop\n      if (tmpDay.getDate() < 10) day = `0${tmpDay.getDate()}`;\n      else day = tmpDay.getDate();\n    }\n\n    if (tmpDay.getMonth() + 1 < 10) month = `0${tmpDay.getMonth() + 1}`;\n    else month = tmpDay.getMonth() + 1;\n\n    // increment year\n    if (changeYear) {\n      year++;\n      changeYear = false;\n    }\n    if (tmpDay.getMonth() === 11) changeYear = true;\n\n    labels.push(`${year}-${month}-${day}`);\n  }\n}\n\n/*\n if (timeDuration === \"6\" || timeDuration === \"12\") {\n    if (mainCategory === \"income\" && subCategory.length === 3) {\n      const labelsLength = labels.length;\n      let indexLabel = 0;\n      let indexData = 0;\n      let indexCurrentDate = true;\n      let currentMonth;\n      let currentAmount = 0;\n\n      while (indexLabel < labelsLength) {\n        // keep adding if it's still at current date(time)\n        while (indexCurrentDate) {\n          currentMonth = new Intl.DateTimeFormat(\"en-US\", dateOptObj).format(\n            new Date(filteredData[indexData]?.time)\n          );\n          // check date(time)\n          if (currentMonth === labels1[indexLabel]) {\n            // check main category\n            if (filteredData[indexData].category === \"income\") {\n              currentAmount += Number(filteredData[indexData].price);\n            }\n\n            indexData++;\n          } else indexCurrentDate = false;\n        }\n\n        data.push(currentAmount);\n\n        currentAmount = 0;\n        indexCurrentDate = true;\n        indexLabel++;\n      }\n    }\n\n    if (mainCategory === \"expense\" && subCategory.length === 6) {\n      const labelsLength = labels.length;\n      let indexLabel = 0;\n      let indexData = 0;\n      let indexCurrentDate = true;\n      let currentMonth;\n      let currentAmount = 0;\n\n      while (indexLabel < labelsLength) {\n        // keep adding if it's still at current date(time)\n        while (indexCurrentDate) {\n          console.log(filteredData);\n          if (!filteredData[indexData]?.time)\n            currentMonth = new Intl.DateTimeFormat(\"en-US\", dateOptObj).format(\n              new Date(filteredData[indexData]?.time)\n            );\n          console.log(currentMonth);\n\n          if (currentMonth === labels1[indexLabel]) {\n            // check main category\n            if (filteredData[indexData].category === \"income\") {\n              currentAmount += Number(filteredData[indexData].price);\n            }\n\n            indexData++;\n          } else indexCurrentDate = false;\n        }\n\n        data.push(currentAmount);\n\n        currentAmount = 0;\n        indexCurrentDate = true;\n        indexLabel++;\n      }\n    }\n  }\n  // day base\n  else {\n    if (mainCategory === \"income\" && subCategory.length === 3) {\n      const labelsLength = labels.length;\n      let indexLabel = 0;\n      let indexData = 0;\n      let indexCurrentDate = true;\n      let currentDate;\n      let currentAmount = 0;\n\n      while (indexLabel < labelsLength) {\n        currentDate = `${year}-${labels[indexLabel].slice(0, 2)}-${labels[\n          indexLabel\n        ].slice(2)}`;\n\n        // keep adding if it's still at current date(time)\n        if (indexData < filteredData.length - 1) {\n          while (indexCurrentDate) {\n            // check date(time)\n            if (filteredData[indexData].time === currentDate) {\n              // check main category\n              if (filteredData[indexData].category === \"income\") {\n                currentAmount += Number(filteredData[indexData].price);\n              }\n\n              indexData++;\n            } else indexCurrentDate = false;\n          }\n        }\n\n        data.push(currentAmount);\n\n        currentAmount = 0;\n        indexCurrentDate = true;\n        indexLabel++;\n      }\n    }\n\n    if (mainCategory === \"expense\" && subCategory.length === 6) {\n      const labelsLength = labels.length;\n      let indexLabel = 0;\n      let indexData = 0;\n      let indexCurrentDate = true;\n      let currentDate;\n      let currentAmount = 0;\n\n      while (indexLabel < labelsLength) {\n        currentDate = `${year}-${labels[indexLabel].slice(0, 2)}-${labels[\n          indexLabel\n        ].slice(2)}`;\n\n        // keep adding if it's still at current date(time)\n\n        while (indexCurrentDate) {\n          // check date(time)\n          if (filteredData[indexData]?.time === currentDate) {\n            // check main category\n            if (filteredData[indexData].category === \"expense\") {\n              currentAmount += Number(filteredData[indexData].price);\n            }\n\n            indexData++;\n          } else indexCurrentDate = false;\n        }\n\n        data.push(currentAmount);\n\n        currentAmount = 0;\n        indexCurrentDate = true;\n        indexLabel++;\n      }\n    }\n  }\n*/\n"]},"metadata":{},"sourceType":"module"}