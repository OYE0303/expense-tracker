{"ast":null,"code":"import createDateStringFormat from \"../CreateDateStringFormat/CreateDateStringFormat\";\n/*\nthe main purpose of this function (standard labels)(2021-11-08)\nis for adding(accumulating) the total amount within valid range \n*/\n\nfunction createStandardLabelsArr(duration, startingDate) {\n  const startDay = new Date(startingDate);\n\n  switch (duration) {\n    case \"7\":\n      return createStandardLabelsArrHelper(7, 1, \"day\", startDay);\n\n    case \"14\":\n      return createStandardLabelsArrHelper(14, 1, \"day\", startDay);\n\n    case \"30\":\n      return createStandardLabelsArrHelper(30, 1, \"day\", startDay);\n\n    case \"90\":\n      return createStandardLabelsArrHelper(30, 3, \"day\", startDay);\n\n    case \"6\":\n      return createStandardLabelsArrHelper(6, 1, \"month\", startDay);\n\n    case \"12\":\n      return createStandardLabelsArrHelper(12, 1, \"month\", startDay);\n  }\n}\n\nexport default createStandardLabelsArr;\n\nfunction createStandardLabelsArrHelper(duration, incrementAmount, dayMonth, today) {\n  const labels = [];\n  const test = [];\n  let tmpDay = today;\n  let day;\n  let month;\n  let year = today.getFullYear();\n  let curYear = year;\n  /*\n  note that it will immediately increment the number of day\n  in the first for-loop\n  so have to add the very first day\n  for example, today is 2021-11-21, and time duration is 7\n  what we want is an array [21, 22, 23, 24, 25, 26, 27]\n  which means 21 is inclusive\n  */\n\n  labels.push(createDateStringFormat(tmpDay));\n\n  for (let i = 0; i < duration - 1; i++) {\n    // incremenet by month\n    if (dayMonth === \"month\") tmpDay.setMonth(tmpDay.getMonth() + incrementAmount); // increment by day\n\n    if (dayMonth === \"day\") {\n      tmpDay.setDate(tmpDay.getDate() + incrementAmount);\n    }\n\n    test.push(`${year}-${month}-${day}`); // labels.push(`${year}-${month}-${day}`);\n\n    labels.push(createDateStringFormat(tmpDay));\n  }\n\n  let index = true;\n  if (test.length !== labels.length) index = false;\n\n  for (let i = 0; i < test.length; i++) {\n    if (test[i] !== labels[i]) {\n      console.log(i);\n      index = false;\n      break;\n    }\n  }\n\n  console.log(index);\n  return labels;\n}","map":{"version":3,"sources":["/Users/eyo/Desktop/expense-tracker/src/Others/CreateChartData/createStandardLabelsArr.js"],"names":["createDateStringFormat","createStandardLabelsArr","duration","startingDate","startDay","Date","createStandardLabelsArrHelper","incrementAmount","dayMonth","today","labels","test","tmpDay","day","month","year","getFullYear","curYear","push","i","setMonth","getMonth","setDate","getDate","index","length","console","log"],"mappings":"AAAA,OAAOA,sBAAP,MAAmC,kDAAnC;AACA;AACA;AACA;AACA;;AACA,SAASC,uBAAT,CAAiCC,QAAjC,EAA2CC,YAA3C,EAAyD;AACvD,QAAMC,QAAQ,GAAG,IAAIC,IAAJ,CAASF,YAAT,CAAjB;;AAEA,UAAQD,QAAR;AACE,SAAK,GAAL;AACE,aAAOI,6BAA6B,CAAC,CAAD,EAAI,CAAJ,EAAO,KAAP,EAAcF,QAAd,CAApC;;AACF,SAAK,IAAL;AACE,aAAOE,6BAA6B,CAAC,EAAD,EAAK,CAAL,EAAQ,KAAR,EAAeF,QAAf,CAApC;;AACF,SAAK,IAAL;AACE,aAAOE,6BAA6B,CAAC,EAAD,EAAK,CAAL,EAAQ,KAAR,EAAeF,QAAf,CAApC;;AACF,SAAK,IAAL;AACE,aAAOE,6BAA6B,CAAC,EAAD,EAAK,CAAL,EAAQ,KAAR,EAAeF,QAAf,CAApC;;AACF,SAAK,GAAL;AACE,aAAOE,6BAA6B,CAAC,CAAD,EAAI,CAAJ,EAAO,OAAP,EAAgBF,QAAhB,CAApC;;AACF,SAAK,IAAL;AACE,aAAOE,6BAA6B,CAAC,EAAD,EAAK,CAAL,EAAQ,OAAR,EAAiBF,QAAjB,CAApC;AAZJ;AAcD;;AAED,eAAeH,uBAAf;;AAEA,SAASK,6BAAT,CACEJ,QADF,EAEEK,eAFF,EAGEC,QAHF,EAIEC,KAJF,EAKE;AACA,QAAMC,MAAM,GAAG,EAAf;AACA,QAAMC,IAAI,GAAG,EAAb;AACA,MAAIC,MAAM,GAAGH,KAAb;AACA,MAAII,GAAJ;AACA,MAAIC,KAAJ;AACA,MAAIC,IAAI,GAAGN,KAAK,CAACO,WAAN,EAAX;AACA,MAAIC,OAAO,GAAGF,IAAd;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;AACEL,EAAAA,MAAM,CAACQ,IAAP,CAAYlB,sBAAsB,CAACY,MAAD,CAAlC;;AAEA,OAAK,IAAIO,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGjB,QAAQ,GAAG,CAA/B,EAAkCiB,CAAC,EAAnC,EAAuC;AACrC;AACA,QAAIX,QAAQ,KAAK,OAAjB,EACEI,MAAM,CAACQ,QAAP,CAAgBR,MAAM,CAACS,QAAP,KAAoBd,eAApC,EAHmC,CAKrC;;AACA,QAAIC,QAAQ,KAAK,KAAjB,EAAwB;AACtBI,MAAAA,MAAM,CAACU,OAAP,CAAeV,MAAM,CAACW,OAAP,KAAmBhB,eAAlC;AACD;;AAEDI,IAAAA,IAAI,CAACO,IAAL,CAAW,GAAEH,IAAK,IAAGD,KAAM,IAAGD,GAAI,EAAlC,EAVqC,CAYrC;;AACAH,IAAAA,MAAM,CAACQ,IAAP,CAAYlB,sBAAsB,CAACY,MAAD,CAAlC;AACD;;AAED,MAAIY,KAAK,GAAG,IAAZ;AACA,MAAIb,IAAI,CAACc,MAAL,KAAgBf,MAAM,CAACe,MAA3B,EAAmCD,KAAK,GAAG,KAAR;;AACnC,OAAK,IAAIL,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,IAAI,CAACc,MAAzB,EAAiCN,CAAC,EAAlC,EAAsC;AACpC,QAAIR,IAAI,CAACQ,CAAD,CAAJ,KAAYT,MAAM,CAACS,CAAD,CAAtB,EAA2B;AACzBO,MAAAA,OAAO,CAACC,GAAR,CAAYR,CAAZ;AACAK,MAAAA,KAAK,GAAG,KAAR;AACA;AACD;AACF;;AAEDE,EAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ;AAEA,SAAOd,MAAP;AACD","sourcesContent":["import createDateStringFormat from \"../CreateDateStringFormat/CreateDateStringFormat\";\n/*\nthe main purpose of this function (standard labels)(2021-11-08)\nis for adding(accumulating) the total amount within valid range \n*/\nfunction createStandardLabelsArr(duration, startingDate) {\n  const startDay = new Date(startingDate);\n\n  switch (duration) {\n    case \"7\":\n      return createStandardLabelsArrHelper(7, 1, \"day\", startDay);\n    case \"14\":\n      return createStandardLabelsArrHelper(14, 1, \"day\", startDay);\n    case \"30\":\n      return createStandardLabelsArrHelper(30, 1, \"day\", startDay);\n    case \"90\":\n      return createStandardLabelsArrHelper(30, 3, \"day\", startDay);\n    case \"6\":\n      return createStandardLabelsArrHelper(6, 1, \"month\", startDay);\n    case \"12\":\n      return createStandardLabelsArrHelper(12, 1, \"month\", startDay);\n  }\n}\n\nexport default createStandardLabelsArr;\n\nfunction createStandardLabelsArrHelper(\n  duration,\n  incrementAmount,\n  dayMonth,\n  today\n) {\n  const labels = [];\n  const test = [];\n  let tmpDay = today;\n  let day;\n  let month;\n  let year = today.getFullYear();\n  let curYear = year;\n\n  /*\n  note that it will immediately increment the number of day\n  in the first for-loop\n  so have to add the very first day\n  for example, today is 2021-11-21, and time duration is 7\n  what we want is an array [21, 22, 23, 24, 25, 26, 27]\n  which means 21 is inclusive\n  */\n  labels.push(createDateStringFormat(tmpDay));\n\n  for (let i = 0; i < duration - 1; i++) {\n    // incremenet by month\n    if (dayMonth === \"month\")\n      tmpDay.setMonth(tmpDay.getMonth() + incrementAmount);\n\n    // increment by day\n    if (dayMonth === \"day\") {\n      tmpDay.setDate(tmpDay.getDate() + incrementAmount);\n    }\n\n    test.push(`${year}-${month}-${day}`);\n\n    // labels.push(`${year}-${month}-${day}`);\n    labels.push(createDateStringFormat(tmpDay));\n  }\n\n  let index = true;\n  if (test.length !== labels.length) index = false;\n  for (let i = 0; i < test.length; i++) {\n    if (test[i] !== labels[i]) {\n      console.log(i);\n      index = false;\n      break;\n    }\n  }\n\n  console.log(index);\n\n  return labels;\n}\n"]},"metadata":{},"sourceType":"module"}