{"ast":null,"code":"var _jsxFileName = \"/Users/eyo/Desktop/project-expenseTracker-main/src/store/searchListData/SearchListDataProvider.js\",\n    _s = $RefreshSig$();\n\nimport { useReducer, useContext, useState } from \"react\";\nimport ExpenseDataContext from \"../expenseData/expenseData--context\";\nimport SearchListDataContext from \"./searchListData--context\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst date = new Date();\nlet orginalObj;\n\nfunction reducerHelperFunction(newObj) {\n  let currentType;\n  let currentKey;\n  let timeArr = [];\n  let priceArr = [];\n  let categoryArr = [];\n\n  for (const key of Object.keys(newObj)) {\n    [currentType, currentKey] = key.split(\"-\");\n    if (currentType === \"category\") categoryArr.push(currentKey);else if (currentType === \"time\") timeArr.push(currentKey);else priceArr.push(currentKey);\n  }\n\n  return filterCategory(filterPrice(filterTime(orginalObj, timeArr), priceArr), categoryArr);\n}\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case \"ADD\":\n      {\n        const value = action.value;\n        const newObj = { ...state.constraintObj\n        };\n        newObj[`${action.id}-${action.value}`] = value;\n        return {\n          expenseData: reducerHelperFunction(newObj),\n          constraintObj: newObj\n        };\n      }\n\n    case \"REMOVE\":\n      {\n        const id = `${action.id}-${action.value}`;\n        const newObj = { ...state.constraintObj\n        };\n        delete newObj[id];\n        let newState;\n        if (newObj.length === 0) newState = orginalObj;else {\n          newState = reducerHelperFunction(newObj);\n        }\n        return {\n          expenseData: newState,\n          constraintObj: newObj\n        };\n      }\n\n    default:\n      break;\n  }\n}\n\nfunction SearchListDataProvider(props) {\n  _s();\n\n  const expenseDataCtx = useContext(ExpenseDataContext);\n  const [filteredData, setFilteredData] = useReducer(reducer, {\n    constraintObj: {},\n    expenseData: expenseDataCtx.EXPENSE_DATA\n  });\n  orginalObj = expenseDataCtx.EXPENSE_DATA;\n  const SearchListDataContextInitialObject = {\n    setFilteredData,\n    expenseData: filteredData.expenseData\n  };\n  return /*#__PURE__*/_jsxDEV(SearchListDataContext.Provider, {\n    value: SearchListDataContextInitialObject,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n}\n\n_s(SearchListDataProvider, \"tb6Rz/xXOkXUVgkzHcc2XN9uKcQ=\");\n\n_c = SearchListDataProvider;\nexport default SearchListDataProvider;\n\nfunction filterTime(data, filterArr) {\n  if (filterArr.length === 0) return data;\n  const date = new Date();\n  let dayArr = [];\n  let monthArr = [];\n  let yearArr = [];\n  filterArr.forEach(element => {\n    if (element[0] === \"d\") dayArr.push(element.split(\",\")[1]);\n    if (element[0] === \"m\") monthArr.push(element.split(\",\")[1]);\n    if (element[0] === \"y\") yearArr.push(element.split(\",\")[1]);\n  });\n  let dayState = [];\n  let monthState = [];\n  let yearState = [];\n\n  if (dayArr.length > 0) {\n    dayState = data.filter(element => Number(element.time.slice(8)) >= Number(Math.min(...dayArr)) && Number(element.time.slice(5, 7)) === date.getMonth() + 1);\n  }\n\n  if (monthArr.length > 0) {\n    monthState = data.filter(element => Number(element.time.slice(5, 7)) >= Number(Math.min(...monthArr)) && Number(element.time.slice(5, 7)) !== date.getMonth() + 1);\n  }\n\n  if (yearArr.length > 0) {\n    yearState = data.filter(element => Number(element.time.slice(0, 4)) === Number(Math.min(...yearArr)));\n  }\n\n  return [...dayState, ...monthState, ...yearState];\n}\n\nfunction filterCategory(data, filterArr) {\n  if (filterArr.length === 0) return data;\n  return data.filter(element => filterArr.includes(element.mainCate));\n}\n\nfunction filterPrice(data, filterArr) {\n  if (filterArr.length === 0) return data;\n  let min = Infinity;\n  let max = 0;\n  let tmpMin;\n  let tmpMax;\n  const newFilterArr = filterArr.map(arr => arr.split(\",\"));\n  newFilterArr.forEach(element => {\n    [tmpMin, tmpMax] = element;\n    if (Number(tmpMin) < min) min = Number(tmpMin);\n    if (Number(tmpMax) > max) max = Number(tmpMax);\n  });\n  return data.filter(element => Number(element.price) >= Number(min) && Number(element.price) <= Number(max));\n}\n/*\nfunction reducer(state, action) {\n  switch (action.type) {\n    case \"TIME\": {\n      return reducerTime(state, action);\n    }\n\n    case \"PRICE\": {\n      return reducerPrice(state, action);\n    }\n\n    case \"CATEGORY\": {\n      return reducerCategory(state, action);\n    }\n\n    default:\n      break;\n  }\n}\n\nfunction reducerCategory(state, action) {\n  let newState;\n  let totalCount = state.checkTotalCount;\n  let categoryCount = state.checkCategoryCount;\n\n  if (action.checked) {\n    if (totalCount === 0) {\n      totalCount++;\n      categoryCount++;\n\n      newState = state.expenseData.filter(\n        (element) => element.mainCate === action.value\n      );\n    } else {\n      totalCount++;\n      categoryCount++;\n\n      if (state.checkPriceCount !== 0 || state.checkTimeCount !== 0) {\n        newState = state.expenseData.filter(\n          (element) => element.mainCate === action.value\n        );\n      } else {\n        const concatArr = orginalObj.filter(\n          (element) => element.mainCate === action.value\n        );\n\n        newState = state.expenseData.concat(concatArr);\n      }\n    }\n  } else {\n    totalCount--;\n    categoryCount--;\n\n    if (totalCount === 0) newState = orginalObj;\n    else {\n      newState = state.expenseData.filter(\n        (element) => element.mainCate !== action.value\n      );\n    }\n  }\n\n  return {\n    checkTotalCount: totalCount,\n    checkTimeCount: state.checkTimeCount,\n    checkPriceCount: state.checkPriceCount,\n    checkCategoryCount: categoryCount,\n    expenseData: newState,\n  };\n}\n\nfunction reducerPrice(state, action) {\n  const [lowestPrice, highestPrice] = action.value.split(\",\");\n  let newState;\n  let totalCount = state.checkTotalCount;\n  let priceCount = state.checkPriceCount;\n\n  if (action.checked) {\n    if (totalCount === 0) {\n      totalCount++;\n      priceCount++;\n\n      newState = state.expenseData.filter(\n        (element) =>\n          Number(element.price) >= lowestPrice &&\n          Number(element.price) <= highestPrice\n      );\n    } else {\n      totalCount++;\n      priceCount++;\n\n      if (state.checkTimeCount !== 0 || state.checkCategoryCount !== 0) {\n        newState = state.expenseData.filter(\n          (element) =>\n            Number(element.price) >= lowestPrice &&\n            Number(element.price) <= highestPrice\n        );\n      } else {\n        const concatArr = orginalObj.filter(\n          (element) =>\n            Number(element.price) >= lowestPrice &&\n            Number(element.price) <= highestPrice\n        );\n\n        newState = state.expenseData.concat(concatArr);\n      }\n    }\n  } else {\n    totalCount--;\n    priceCount--;\n\n    if (totalCount === 0) newState = orginalObj;\n    else {\n      newState = state.expenseData.filter(\n        (element) =>\n          Number(element.price) < lowestPrice ||\n          Number(element.price) > highestPrice\n      );\n    }\n  }\n\n  return {\n    checkTotalCount: totalCount,\n    checkTimeCount: state.checkTimeCount,\n    checkPriceCount: priceCount,\n    checkCategoryCount: state.checkCategoryCount,\n    expenseData: newState,\n  };\n}\n\nfunction reducerTime(state, action) {\n  let dateArr = [];\n  let newState;\n\n  // days\n  if (action.value < 30) {\n    const currenDate = date.getDate();\n\n    if (action.value === 0) dateArr.push(currenDate);\n    else\n      for (let i = 1; i <= action.value; i++) {\n        dateArr.push(currenDate - i);\n      }\n\n    if (action.checked) {\n      newState = state.expenseData.filter(\n        (element) =>\n          dateArr.includes(Number(element.time.slice(8))) &&\n          Number(element.time.slice(5, 7)) === date.getMonth() + 1\n      );\n    } else {\n      const concatArr = orginalObj.filter(\n        (element) =>\n          !dateArr.includes(Number(element.time.slice(8))) ||\n          !(Number(element.time.slice(5, 7)) === date.getMonth() + 1)\n      );\n\n      newState = state.expenseData.concat(concatArr);\n    }\n  }\n  // months\n  else if (action.value === 30 || action.value === 90) {\n    if (action.value === 30) dateArr.push(date.getMonth());\n    else {\n      for (let i = 0; i < 3; i++) {\n        dateArr.push(date.getMonth() - i);\n      }\n    }\n\n    if (action.checked) {\n      newState = state.expenseData.filter((element) =>\n        dateArr.includes(Number(element.time.slice(5, 7)))\n      );\n    } else {\n      const concatArr = orginalObj.filter(\n        (element) => !dateArr.includes(Number(element.time.slice(5, 7)))\n      );\n\n      newState = state.expenseData.concat(concatArr);\n    }\n  }\n  // years\n  else {\n    dateArr.push(date.getFullYear() - 1);\n\n    if (action.checked) {\n      newState = state.expenseData.filter((element) =>\n        dateArr.includes(Number(element.time.slice(0, 4)))\n      );\n    } else {\n      const concatArr = orginalObj.filter(\n        (element) => !dateArr.includes(Number(element.time.slice(0, 4)))\n      );\n\n      newState = state.expenseData.concat(concatArr);\n    }\n  }\n\n  return { ...state, expenseData: newState };\n}\n\nconst checkboxTime = [\n  { category: \"time\", text: \"today\", value: 0, checked: false },\n  { category: \"time\", text: \"yesterady\", value: 1, checked: false },\n  { category: \"time\", text: \"three days ago\", value: 3, checked: false },\n  { category: \"time\", text: \"a week ago\", value: 7, checked: false },\n  { category: \"time\", text: \"a month ago\", value: 30, checked: false },\n  { category: \"time\", text: \"three months ago\", value: 90, checked: false },\n  { category: \"time\", text: \"a year ago\", value: 100, checked: false },\n  { category: \"price\", text: \"0 ~ $100\", value: [0, 100], checked: false },\n  { category: \"price\", text: \"$100 ~ $300\", value: [100, 300], checked: false },\n  { category: \"price\", text: \"$300 ~ $500\", value: [300, 500], checked: false },\n  {\n    category: \"price\",\n    text: \"$500 ~ $1000\",\n    value: [500, 1000],\n    checked: false,\n  },\n  {\n    category: \"price\",\n    text: \"above $1000\",\n    value: [1000, Infinity],\n    checked: false,\n  },\n];\n\n*/\n\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchListDataProvider\");","map":{"version":3,"sources":["/Users/eyo/Desktop/project-expenseTracker-main/src/store/searchListData/SearchListDataProvider.js"],"names":["useReducer","useContext","useState","ExpenseDataContext","SearchListDataContext","date","Date","orginalObj","reducerHelperFunction","newObj","currentType","currentKey","timeArr","priceArr","categoryArr","key","Object","keys","split","push","filterCategory","filterPrice","filterTime","reducer","state","action","type","value","constraintObj","id","expenseData","newState","length","SearchListDataProvider","props","expenseDataCtx","filteredData","setFilteredData","EXPENSE_DATA","SearchListDataContextInitialObject","children","data","filterArr","dayArr","monthArr","yearArr","forEach","element","dayState","monthState","yearState","filter","Number","time","slice","Math","min","getMonth","includes","mainCate","Infinity","max","tmpMin","tmpMax","newFilterArr","map","arr","price"],"mappings":"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AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { useReducer, useContext, useState } from \"react\";\nimport ExpenseDataContext from \"../expenseData/expenseData--context\";\nimport SearchListDataContext from \"./searchListData--context\";\n\nconst date = new Date();\n\nlet orginalObj;\n\nfunction reducerHelperFunction(newObj) {\n  let currentType;\n  let currentKey;\n  let timeArr = [];\n  let priceArr = [];\n  let categoryArr = [];\n  for (const key of Object.keys(newObj)) {\n    [currentType, currentKey] = key.split(\"-\");\n\n    if (currentType === \"category\") categoryArr.push(currentKey);\n    else if (currentType === \"time\") timeArr.push(currentKey);\n    else priceArr.push(currentKey);\n  }\n\n  return filterCategory(\n    filterPrice(filterTime(orginalObj, timeArr), priceArr),\n    categoryArr\n  );\n}\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case \"ADD\": {\n      const value = action.value;\n\n      const newObj = { ...state.constraintObj };\n      newObj[`${action.id}-${action.value}`] = value;\n\n      return {\n        expenseData: reducerHelperFunction(newObj),\n        constraintObj: newObj,\n      };\n    }\n    case \"REMOVE\": {\n      const id = `${action.id}-${action.value}`;\n\n      const newObj = { ...state.constraintObj };\n\n      delete newObj[id];\n\n      let newState;\n      if (newObj.length === 0) newState = orginalObj;\n      else {\n        newState = reducerHelperFunction(newObj);\n      }\n\n      return { expenseData: newState, constraintObj: newObj };\n    }\n    default:\n      break;\n  }\n}\n\nfunction SearchListDataProvider(props) {\n  const expenseDataCtx = useContext(ExpenseDataContext);\n  const [filteredData, setFilteredData] = useReducer(reducer, {\n    constraintObj: {},\n    expenseData: expenseDataCtx.EXPENSE_DATA,\n  });\n\n  orginalObj = expenseDataCtx.EXPENSE_DATA;\n\n  const SearchListDataContextInitialObject = {\n    setFilteredData,\n    expenseData: filteredData.expenseData,\n  };\n\n  return (\n    <SearchListDataContext.Provider value={SearchListDataContextInitialObject}>\n      {props.children}\n    </SearchListDataContext.Provider>\n  );\n}\n\nexport default SearchListDataProvider;\n\nfunction filterTime(data, filterArr) {\n  if (filterArr.length === 0) return data;\n  const date = new Date();\n\n  let dayArr = [];\n  let monthArr = [];\n  let yearArr = [];\n  filterArr.forEach((element) => {\n    if (element[0] === \"d\") dayArr.push(element.split(\",\")[1]);\n    if (element[0] === \"m\") monthArr.push(element.split(\",\")[1]);\n    if (element[0] === \"y\") yearArr.push(element.split(\",\")[1]);\n  });\n\n  let dayState = [];\n  let monthState = [];\n  let yearState = [];\n\n  if (dayArr.length > 0) {\n    dayState = data.filter(\n      (element) =>\n        Number(element.time.slice(8)) >= Number(Math.min(...dayArr)) &&\n        Number(element.time.slice(5, 7)) === date.getMonth() + 1\n    );\n  }\n\n  if (monthArr.length > 0) {\n    monthState = data.filter(\n      (element) =>\n        Number(element.time.slice(5, 7)) >= Number(Math.min(...monthArr)) &&\n        Number(element.time.slice(5, 7)) !== date.getMonth() + 1\n    );\n  }\n\n  if (yearArr.length > 0) {\n    yearState = data.filter(\n      (element) =>\n        Number(element.time.slice(0, 4)) === Number(Math.min(...yearArr))\n    );\n  }\n\n  return [...dayState, ...monthState, ...yearState];\n}\n\nfunction filterCategory(data, filterArr) {\n  if (filterArr.length === 0) return data;\n\n  return data.filter((element) => filterArr.includes(element.mainCate));\n}\n\nfunction filterPrice(data, filterArr) {\n  if (filterArr.length === 0) return data;\n\n  let min = Infinity;\n  let max = 0;\n  let tmpMin;\n  let tmpMax;\n  const newFilterArr = filterArr.map((arr) => arr.split(\",\"));\n  newFilterArr.forEach((element) => {\n    [tmpMin, tmpMax] = element;\n\n    if (Number(tmpMin) < min) min = Number(tmpMin);\n    if (Number(tmpMax) > max) max = Number(tmpMax);\n  });\n\n  return data.filter(\n    (element) =>\n      Number(element.price) >= Number(min) &&\n      Number(element.price) <= Number(max)\n  );\n}\n\n/*\nfunction reducer(state, action) {\n  switch (action.type) {\n    case \"TIME\": {\n      return reducerTime(state, action);\n    }\n\n    case \"PRICE\": {\n      return reducerPrice(state, action);\n    }\n\n    case \"CATEGORY\": {\n      return reducerCategory(state, action);\n    }\n\n    default:\n      break;\n  }\n}\n\nfunction reducerCategory(state, action) {\n  let newState;\n  let totalCount = state.checkTotalCount;\n  let categoryCount = state.checkCategoryCount;\n\n  if (action.checked) {\n    if (totalCount === 0) {\n      totalCount++;\n      categoryCount++;\n\n      newState = state.expenseData.filter(\n        (element) => element.mainCate === action.value\n      );\n    } else {\n      totalCount++;\n      categoryCount++;\n\n      if (state.checkPriceCount !== 0 || state.checkTimeCount !== 0) {\n        newState = state.expenseData.filter(\n          (element) => element.mainCate === action.value\n        );\n      } else {\n        const concatArr = orginalObj.filter(\n          (element) => element.mainCate === action.value\n        );\n\n        newState = state.expenseData.concat(concatArr);\n      }\n    }\n  } else {\n    totalCount--;\n    categoryCount--;\n\n    if (totalCount === 0) newState = orginalObj;\n    else {\n      newState = state.expenseData.filter(\n        (element) => element.mainCate !== action.value\n      );\n    }\n  }\n\n  return {\n    checkTotalCount: totalCount,\n    checkTimeCount: state.checkTimeCount,\n    checkPriceCount: state.checkPriceCount,\n    checkCategoryCount: categoryCount,\n    expenseData: newState,\n  };\n}\n\nfunction reducerPrice(state, action) {\n  const [lowestPrice, highestPrice] = action.value.split(\",\");\n  let newState;\n  let totalCount = state.checkTotalCount;\n  let priceCount = state.checkPriceCount;\n\n  if (action.checked) {\n    if (totalCount === 0) {\n      totalCount++;\n      priceCount++;\n\n      newState = state.expenseData.filter(\n        (element) =>\n          Number(element.price) >= lowestPrice &&\n          Number(element.price) <= highestPrice\n      );\n    } else {\n      totalCount++;\n      priceCount++;\n\n      if (state.checkTimeCount !== 0 || state.checkCategoryCount !== 0) {\n        newState = state.expenseData.filter(\n          (element) =>\n            Number(element.price) >= lowestPrice &&\n            Number(element.price) <= highestPrice\n        );\n      } else {\n        const concatArr = orginalObj.filter(\n          (element) =>\n            Number(element.price) >= lowestPrice &&\n            Number(element.price) <= highestPrice\n        );\n\n        newState = state.expenseData.concat(concatArr);\n      }\n    }\n  } else {\n    totalCount--;\n    priceCount--;\n\n    if (totalCount === 0) newState = orginalObj;\n    else {\n      newState = state.expenseData.filter(\n        (element) =>\n          Number(element.price) < lowestPrice ||\n          Number(element.price) > highestPrice\n      );\n    }\n  }\n\n  return {\n    checkTotalCount: totalCount,\n    checkTimeCount: state.checkTimeCount,\n    checkPriceCount: priceCount,\n    checkCategoryCount: state.checkCategoryCount,\n    expenseData: newState,\n  };\n}\n\nfunction reducerTime(state, action) {\n  let dateArr = [];\n  let newState;\n\n  // days\n  if (action.value < 30) {\n    const currenDate = date.getDate();\n\n    if (action.value === 0) dateArr.push(currenDate);\n    else\n      for (let i = 1; i <= action.value; i++) {\n        dateArr.push(currenDate - i);\n      }\n\n    if (action.checked) {\n      newState = state.expenseData.filter(\n        (element) =>\n          dateArr.includes(Number(element.time.slice(8))) &&\n          Number(element.time.slice(5, 7)) === date.getMonth() + 1\n      );\n    } else {\n      const concatArr = orginalObj.filter(\n        (element) =>\n          !dateArr.includes(Number(element.time.slice(8))) ||\n          !(Number(element.time.slice(5, 7)) === date.getMonth() + 1)\n      );\n\n      newState = state.expenseData.concat(concatArr);\n    }\n  }\n  // months\n  else if (action.value === 30 || action.value === 90) {\n    if (action.value === 30) dateArr.push(date.getMonth());\n    else {\n      for (let i = 0; i < 3; i++) {\n        dateArr.push(date.getMonth() - i);\n      }\n    }\n\n    if (action.checked) {\n      newState = state.expenseData.filter((element) =>\n        dateArr.includes(Number(element.time.slice(5, 7)))\n      );\n    } else {\n      const concatArr = orginalObj.filter(\n        (element) => !dateArr.includes(Number(element.time.slice(5, 7)))\n      );\n\n      newState = state.expenseData.concat(concatArr);\n    }\n  }\n  // years\n  else {\n    dateArr.push(date.getFullYear() - 1);\n\n    if (action.checked) {\n      newState = state.expenseData.filter((element) =>\n        dateArr.includes(Number(element.time.slice(0, 4)))\n      );\n    } else {\n      const concatArr = orginalObj.filter(\n        (element) => !dateArr.includes(Number(element.time.slice(0, 4)))\n      );\n\n      newState = state.expenseData.concat(concatArr);\n    }\n  }\n\n  return { ...state, expenseData: newState };\n}\n\nconst checkboxTime = [\n  { category: \"time\", text: \"today\", value: 0, checked: false },\n  { category: \"time\", text: \"yesterady\", value: 1, checked: false },\n  { category: \"time\", text: \"three days ago\", value: 3, checked: false },\n  { category: \"time\", text: \"a week ago\", value: 7, checked: false },\n  { category: \"time\", text: \"a month ago\", value: 30, checked: false },\n  { category: \"time\", text: \"three months ago\", value: 90, checked: false },\n  { category: \"time\", text: \"a year ago\", value: 100, checked: false },\n  { category: \"price\", text: \"0 ~ $100\", value: [0, 100], checked: false },\n  { category: \"price\", text: \"$100 ~ $300\", value: [100, 300], checked: false },\n  { category: \"price\", text: \"$300 ~ $500\", value: [300, 500], checked: false },\n  {\n    category: \"price\",\n    text: \"$500 ~ $1000\",\n    value: [500, 1000],\n    checked: false,\n  },\n  {\n    category: \"price\",\n    text: \"above $1000\",\n    value: [1000, Infinity],\n    checked: false,\n  },\n];\n\n*/\n"]},"metadata":{},"sourceType":"module"}