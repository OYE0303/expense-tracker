{"ast":null,"code":"var _jsxFileName = \"/Users/eyo/Desktop/project-expenseTracker-main/src/components/UI/AddDataForm/FormPrice.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction FormPrice(props) {\n  /*\n  this validation is for UI (red outline)\n  we only want to show the red outline to user when\n  1) user has selected or touched the price input\n  2) user input the wrong input\n   Note that this validation has noting to do with the final validation which is controled the button\n  */\n  const priceValid = props.isValid && props.priceTouch;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: props.classNameContainer,\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      className: props.classNameLabel,\n      children: \"price *\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      onChange: props.priceChangeHandler,\n      onBlur: props.inputPriceTouchHandler,\n      type: \"number\",\n      className: priceValid ? `${props.classNameInputNonValid} ${props.classNameInput}` : `${props.classNameInput}`,\n      value: props.price\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 5\n  }, this);\n}\n\n_c = FormPrice;\nexport default FormPrice;\n/*\n className={\n          props.isValid\n            ? `${props.classNameInput}`\n            : `${props.classNameInput} ${props.classnameInputNonValid}`\n        }\n*/\n\nvar _c;\n\n$RefreshReg$(_c, \"FormPrice\");","map":{"version":3,"sources":["/Users/eyo/Desktop/project-expenseTracker-main/src/components/UI/AddDataForm/FormPrice.js"],"names":["FormPrice","props","priceValid","isValid","priceTouch","classNameContainer","classNameLabel","priceChangeHandler","inputPriceTouchHandler","classNameInputNonValid","classNameInput","price"],"mappings":";;;AAAA,SAASA,SAAT,CAAmBC,KAAnB,EAA0B;AACxB;AACF;AACA;AACA;AACA;AACA;AACA;AAEE,QAAMC,UAAU,GAAGD,KAAK,CAACE,OAAN,IAAiBF,KAAK,CAACG,UAA1C;AAEA,sBACE;AAAK,IAAA,SAAS,EAAEH,KAAK,CAACI,kBAAtB;AAAA,4BACE;AAAO,MAAA,SAAS,EAAEJ,KAAK,CAACK,cAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AACE,MAAA,QAAQ,EAAEL,KAAK,CAACM,kBADlB;AAEE,MAAA,MAAM,EAAEN,KAAK,CAACO,sBAFhB;AAGE,MAAA,IAAI,EAAC,QAHP;AAIE,MAAA,SAAS,EACPN,UAAU,GACL,GAAED,KAAK,CAACQ,sBAAuB,IAAGR,KAAK,CAACS,cAAe,EADlD,GAEL,GAAET,KAAK,CAACS,cAAe,EAPhC;AASE,MAAA,KAAK,EAAET,KAAK,CAACU;AATf;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAgBD;;KA3BQX,S;AA6BT,eAAeA,SAAf;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["function FormPrice(props) {\n  /*\n  this validation is for UI (red outline)\n  we only want to show the red outline to user when\n  1) user has selected or touched the price input\n  2) user input the wrong input\n\n  Note that this validation has noting to do with the final validation which is controled the button\n  */\n  const priceValid = props.isValid && props.priceTouch;\n\n  return (\n    <div className={props.classNameContainer}>\n      <label className={props.classNameLabel}>price *</label>\n      <input\n        onChange={props.priceChangeHandler}\n        onBlur={props.inputPriceTouchHandler}\n        type=\"number\"\n        className={\n          priceValid\n            ? `${props.classNameInputNonValid} ${props.classNameInput}`\n            : `${props.classNameInput}`\n        }\n        value={props.price}\n      ></input>\n    </div>\n  );\n}\n\nexport default FormPrice;\n/*\n className={\n          props.isValid\n            ? `${props.classNameInput}`\n            : `${props.classNameInput} ${props.classnameInputNonValid}`\n        }\n*/\n"]},"metadata":{},"sourceType":"module"}