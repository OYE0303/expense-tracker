{"ast":null,"code":"var _jsxFileName = \"/Users/eyo/Desktop/project-expenseTracker-main/src/components/MainContent/Chart/ChartMain/ChartMain.js\",\n    _s = $RefreshSig$();\n\nimport { useRef, useEffect, useContext } from \"react\";\nimport ExpenseDataContext from \"../../../../store/expenseData/expenseData--context\";\nimport style from \"./ChartMain.module.css\";\nimport Chart from \"chart.js/auto\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst labels = [\"MON\", \"TUE\", \"WED\", \"THR\", \"FRI\", \"SUN\", \"SAT\", \"test\", \"test\", \"test\", \"test\", \"test\", \"test\"];\nconst dateOptObj = {\n  month: \"short\"\n};\n\nfunction ChartMain(props) {\n  _s();\n\n  const chartRef = useRef(null);\n  const {\n    EXPENSE_DATA\n  } = useContext(ExpenseDataContext);\n  let labels = [];\n  let labels1 = [];\n  let data = [];\n\n  if (props.chartData) {\n    var _props$chartData, _props$chartData2, _props$chartData3, _props$chartData4;\n\n    labels = createLabelsArr(props.chartData.timeDuration, props.chartData.startingDate);\n    data = createDataArr(labels, labels1, EXPENSE_DATA, (_props$chartData = props.chartData) === null || _props$chartData === void 0 ? void 0 : _props$chartData.startingDate, (_props$chartData2 = props.chartData) === null || _props$chartData2 === void 0 ? void 0 : _props$chartData2.mainCategory, (_props$chartData3 = props.chartData) === null || _props$chartData3 === void 0 ? void 0 : _props$chartData3.subCategory, (_props$chartData4 = props.chartData) === null || _props$chartData4 === void 0 ? void 0 : _props$chartData4.timeDuration);\n  }\n\n  const dataObj = {\n    labels: labels,\n    datasets: [{\n      label: \"My First Dataset\",\n      data: data,\n      backgroundColor: [\"rgba(255, 99, 132, 0.2)\", \"rgba(255, 159, 64, 0.2)\", \"rgba(255, 205, 86, 0.2)\", \"rgba(75, 192, 192, 0.2)\", \"rgba(54, 162, 235, 0.2)\", \"rgba(153, 102, 255, 0.2)\", \"rgba(201, 203, 207, 0.2)\"],\n      borderColor: [\"rgb(255, 99, 132)\", \"rgb(255, 159, 64)\", \"rgb(255, 205, 86)\", \"rgb(75, 192, 192)\", \"rgb(54, 162, 235)\", \"rgb(153, 102, 255)\", \"rgb(201, 203, 207)\"],\n      borderWidth: 1\n    }]\n  };\n  const config = {\n    type: \"bar\",\n    data: dataObj,\n    options: {\n      scales: {\n        y: {\n          beginAtZero: true\n        }\n      }\n    }\n  }; // useEffect(() => {\n  //   const chart = new Chart(chartRef.current, config);\n  //   return function cleanUp() {\n  //     chart.destroy();\n  //   };\n  // }, [labels]);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: style.chartMain,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ChartMain, \"+o1nGUf0gmfc6lFgmRh5QYfQCMo=\");\n\n_c = ChartMain;\nexport default ChartMain;\n\nfunction createDataArr(labels, labels1, expensData, start, mainCategory, subCategory, timeDuration) {\n  var _labels$, _labels$2, _labels, _labels2;\n\n  const year = new Date(start).getFullYear();\n  const startingDate = `${year}-${(_labels$ = labels[0]) === null || _labels$ === void 0 ? void 0 : _labels$.slice(0, 2)}-${(_labels$2 = labels[0]) === null || _labels$2 === void 0 ? void 0 : _labels$2.slice(2)}`;\n  const endingDate = `${year}-${(_labels = labels[labels.length - 1]) === null || _labels === void 0 ? void 0 : _labels.slice(0, 2)}-${(_labels2 = labels[labels.length - 1]) === null || _labels2 === void 0 ? void 0 : _labels2.slice(2)}`;\n  const numStartingDate = Number(new Date(startingDate));\n  const numEndingDate = Number(new Date(endingDate));\n  const filteredData = expensData.filter(element => Number(new Date(element.time)) >= numStartingDate && Number(new Date(element.time)) <= numEndingDate).sort((elementA, elementB) => Number(new Date(elementA.time)) - Number(new Date(elementB.time)));\n  console.log(filteredData);\n  const data = []; // month base\n\n  if (timeDuration === \"6\" || timeDuration === \"12\") {\n    if (mainCategory === \"income\" && subCategory.length === 3) {\n      const labelsLength = labels.length;\n      let indexLabel = 0;\n      let indexData = 0;\n      let indexCurrentDate = true;\n      let currentMonth;\n      let currentAmount = 0;\n\n      while (indexLabel < labelsLength) {\n        // keep adding if it's still at current date(time)\n        while (indexCurrentDate) {\n          var _filteredData$indexDa;\n\n          currentMonth = new Intl.DateTimeFormat(\"en-US\", dateOptObj).format(new Date((_filteredData$indexDa = filteredData[indexData]) === null || _filteredData$indexDa === void 0 ? void 0 : _filteredData$indexDa.time)); // check date(time)\n\n          if (currentMonth === labels[indexLabel]) {\n            // check main category\n            if (filteredData[indexData].category === \"income\") {\n              currentAmount += Number(filteredData[indexData].price);\n            }\n\n            indexData++;\n          } else indexCurrentDate = false;\n        }\n\n        data.push(currentAmount);\n        currentAmount = 0;\n        indexCurrentDate = true;\n        indexLabel++;\n      }\n    }\n\n    if (mainCategory === \"expense\" && subCategory.length === 6) {\n      const labelsLength = labels.length;\n      let indexLabel = 0;\n      let indexData = 0;\n      let indexCurrentDate = true;\n      let currentMonth;\n      let currentAmount = 0;\n\n      while (indexLabel < labelsLength) {\n        // keep adding if it's still at current date(time)\n        while (indexCurrentDate) {\n          // console.log(filteredData);\n          // console.log(filteredData[indexData]?.time);\n          // if (!filteredData[indexData]?.time)\n          //   currentMonth = new Intl.DateTimeFormat(\"en-US\", dateOptObj).format(\n          //     new Date(filteredData[indexData]?.time)\n          //   );\n          // check date(time)\n          if (currentMonth === labels[indexLabel]) {\n            // check main category\n            if (filteredData[indexData].category === \"income\") {\n              currentAmount += Number(filteredData[indexData].price);\n            }\n\n            indexData++;\n          } else indexCurrentDate = false;\n        }\n\n        data.push(currentAmount);\n        currentAmount = 0;\n        indexCurrentDate = true;\n        indexLabel++;\n      }\n    }\n  } // day base\n  else {\n    if (mainCategory === \"income\" && subCategory.length === 3) {\n      const labelsLength = labels.length;\n      let indexLabel = 0;\n      let indexData = 0;\n      let indexCurrentDate = true;\n      let currentDate;\n      let currentAmount = 0;\n\n      while (indexLabel < labelsLength) {\n        currentDate = `${year}-${labels[indexLabel].slice(0, 2)}-${labels[indexLabel].slice(2)}`; // keep adding if it's still at current date(time)\n\n        if (indexData < filteredData.length - 1) {\n          while (indexCurrentDate) {\n            // check date(time)\n            if (filteredData[indexData].time === currentDate) {\n              // check main category\n              if (filteredData[indexData].category === \"income\") {\n                currentAmount += Number(filteredData[indexData].price);\n              }\n\n              indexData++;\n            } else indexCurrentDate = false;\n          }\n        }\n\n        data.push(currentAmount);\n        currentAmount = 0;\n        indexCurrentDate = true;\n        indexLabel++;\n      }\n    }\n\n    if (mainCategory === \"expense\" && subCategory.length === 6) {\n      const labelsLength = labels.length;\n      let indexLabel = 0;\n      let indexData = 0;\n      let indexCurrentDate = true;\n      let currentDate;\n      let currentAmount = 0;\n\n      while (indexLabel < labelsLength) {\n        currentDate = `${year}-${labels[indexLabel].slice(0, 2)}-${labels[indexLabel].slice(2)}`; // keep adding if it's still at current date(time)\n\n        while (indexCurrentDate) {\n          var _filteredData$indexDa2;\n\n          // check date(time)\n          if (((_filteredData$indexDa2 = filteredData[indexData]) === null || _filteredData$indexDa2 === void 0 ? void 0 : _filteredData$indexDa2.time) === currentDate) {\n            // check main category\n            if (filteredData[indexData].category === \"expense\") {\n              currentAmount += Number(filteredData[indexData].price);\n            }\n\n            indexData++;\n          } else indexCurrentDate = false;\n        }\n\n        data.push(currentAmount);\n        currentAmount = 0;\n        indexCurrentDate = true;\n        indexLabel++;\n      }\n    }\n  }\n\n  console.log(filteredData);\n  console.log(labels); // console.log(data);\n\n  console.log(data);\n  return data;\n}\n\nfunction createLabelsArr(duration, startingDate) {\n  const today = new Date(startingDate);\n  let labels = []; // one week\n\n  if (duration === \"7\") {\n    createLabelsArrHelper(labels, 7, 1, \"day\", today);\n  }\n\n  if (duration === \"14\") {\n    createLabelsArrHelper(labels, 14, 1, \"day\", today);\n  }\n\n  if (duration === \"30\") {\n    createLabelsArrHelper(labels, 30, 1, \"day\", today);\n  }\n\n  if (duration === \"90\") {\n    createLabelsArrHelper(labels, 30, 3, \"day\", today);\n  }\n\n  if (duration === \"6\") {\n    createLabelsArrHelper(labels, 6, 1, \"month\", today);\n  }\n\n  if (duration === \"12\") {\n    createLabelsArrHelper(labels, 12, 1, \"month\", today);\n  }\n\n  return labels;\n}\n\nfunction createLabelsArrHelper(labels, duration, incrementAmount, dayMonth, today) {\n  let tmpDay = today;\n  let day;\n  let month; // if it's increment by month, the day is never change\n  // we could put it outisde for-loop\n\n  if (dayMonth === \"month\") {\n    if (tmpDay.getDate() < 10) day = `0${tmpDay.getDate()}`;else day = tmpDay.getDate();\n  }\n\n  for (let i = 0; i < duration; i++) {\n    // incremenet by month\n    if (dayMonth === \"month\") tmpDay.setMonth(tmpDay.getMonth() + incrementAmount); // increment by day\n\n    if (dayMonth === \"day\") {\n      tmpDay.setDate(tmpDay.getDate() + incrementAmount); // day will change, so put this inside for-loop\n\n      if (tmpDay.getDate() < 10) day = `0${tmpDay.getDate()}`;else day = tmpDay.getDate();\n    }\n\n    if (tmpDay.getMonth() + 1 < 10) month = `0${tmpDay.getMonth() + 1}`;else month = tmpDay.getMonth() + 1; // if (dayMonth === \"month\") {\n    //   labels.push(new Intl.DateTimeFormat(\"en-US\", dateOptObj).format(tmpDay));\n\n    labels.push(`${month}${day}`);\n  }\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"ChartMain\");","map":{"version":3,"sources":["/Users/eyo/Desktop/project-expenseTracker-main/src/components/MainContent/Chart/ChartMain/ChartMain.js"],"names":["useRef","useEffect","useContext","ExpenseDataContext","style","Chart","labels","dateOptObj","month","ChartMain","props","chartRef","EXPENSE_DATA","labels1","data","chartData","createLabelsArr","timeDuration","startingDate","createDataArr","mainCategory","subCategory","dataObj","datasets","label","backgroundColor","borderColor","borderWidth","config","type","options","scales","y","beginAtZero","chartMain","expensData","start","year","Date","getFullYear","slice","endingDate","length","numStartingDate","Number","numEndingDate","filteredData","filter","element","time","sort","elementA","elementB","console","log","labelsLength","indexLabel","indexData","indexCurrentDate","currentMonth","currentAmount","Intl","DateTimeFormat","format","category","price","push","currentDate","duration","today","createLabelsArrHelper","incrementAmount","dayMonth","tmpDay","day","getDate","i","setMonth","getMonth","setDate"],"mappings":"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","sourcesContent":["import { useRef, useEffect, useContext } from \"react\";\nimport ExpenseDataContext from \"../../../../store/expenseData/expenseData--context\";\nimport style from \"./ChartMain.module.css\";\nimport Chart from \"chart.js/auto\";\nconst labels = [\n  \"MON\",\n  \"TUE\",\n  \"WED\",\n  \"THR\",\n  \"FRI\",\n  \"SUN\",\n  \"SAT\",\n  \"test\",\n  \"test\",\n  \"test\",\n  \"test\",\n  \"test\",\n  \"test\",\n];\n\nconst dateOptObj = { month: \"short\" };\n\nfunction ChartMain(props) {\n  const chartRef = useRef(null);\n  const { EXPENSE_DATA } = useContext(ExpenseDataContext);\n\n  let labels = [];\n  let labels1 = [];\n  let data = [];\n  if (props.chartData) {\n    labels = createLabelsArr(\n      props.chartData.timeDuration,\n      props.chartData.startingDate\n    );\n\n    data = createDataArr(\n      labels,\n      labels1,\n      EXPENSE_DATA,\n      props.chartData?.startingDate,\n      props.chartData?.mainCategory,\n      props.chartData?.subCategory,\n      props.chartData?.timeDuration\n    );\n  }\n\n  const dataObj = {\n    labels: labels,\n    datasets: [\n      {\n        label: \"My First Dataset\",\n        data: data,\n        backgroundColor: [\n          \"rgba(255, 99, 132, 0.2)\",\n          \"rgba(255, 159, 64, 0.2)\",\n          \"rgba(255, 205, 86, 0.2)\",\n          \"rgba(75, 192, 192, 0.2)\",\n          \"rgba(54, 162, 235, 0.2)\",\n          \"rgba(153, 102, 255, 0.2)\",\n          \"rgba(201, 203, 207, 0.2)\",\n        ],\n        borderColor: [\n          \"rgb(255, 99, 132)\",\n          \"rgb(255, 159, 64)\",\n          \"rgb(255, 205, 86)\",\n          \"rgb(75, 192, 192)\",\n          \"rgb(54, 162, 235)\",\n          \"rgb(153, 102, 255)\",\n          \"rgb(201, 203, 207)\",\n        ],\n        borderWidth: 1,\n      },\n    ],\n  };\n\n  const config = {\n    type: \"bar\",\n    data: dataObj,\n    options: {\n      scales: {\n        y: {\n          beginAtZero: true,\n        },\n      },\n    },\n  };\n\n  // useEffect(() => {\n  //   const chart = new Chart(chartRef.current, config);\n\n  //   return function cleanUp() {\n  //     chart.destroy();\n  //   };\n  // }, [labels]);\n\n  return (\n    <div className={style.chartMain}>\n      <div>{/* <canvas ref={chartRef}></canvas> */}</div>\n    </div>\n  );\n}\n\nexport default ChartMain;\n\nfunction createDataArr(\n  labels,\n  labels1,\n  expensData,\n  start,\n  mainCategory,\n  subCategory,\n  timeDuration\n) {\n  const year = new Date(start).getFullYear();\n  const startingDate = `${year}-${labels[0]?.slice(0, 2)}-${labels[0]?.slice(\n    2\n  )}`;\n  const endingDate = `${year}-${labels[labels.length - 1]?.slice(\n    0,\n    2\n  )}-${labels[labels.length - 1]?.slice(2)}`;\n\n  const numStartingDate = Number(new Date(startingDate));\n  const numEndingDate = Number(new Date(endingDate));\n\n  const filteredData = expensData\n    .filter(\n      (element) =>\n        Number(new Date(element.time)) >= numStartingDate &&\n        Number(new Date(element.time)) <= numEndingDate\n    )\n    .sort(\n      (elementA, elementB) =>\n        Number(new Date(elementA.time)) - Number(new Date(elementB.time))\n    );\n\n  console.log(filteredData);\n  const data = [];\n  // month base\n  if (timeDuration === \"6\" || timeDuration === \"12\") {\n    if (mainCategory === \"income\" && subCategory.length === 3) {\n      const labelsLength = labels.length;\n      let indexLabel = 0;\n      let indexData = 0;\n      let indexCurrentDate = true;\n      let currentMonth;\n      let currentAmount = 0;\n\n      while (indexLabel < labelsLength) {\n        // keep adding if it's still at current date(time)\n        while (indexCurrentDate) {\n          currentMonth = new Intl.DateTimeFormat(\"en-US\", dateOptObj).format(\n            new Date(filteredData[indexData]?.time)\n          );\n          // check date(time)\n          if (currentMonth === labels[indexLabel]) {\n            // check main category\n            if (filteredData[indexData].category === \"income\") {\n              currentAmount += Number(filteredData[indexData].price);\n            }\n\n            indexData++;\n          } else indexCurrentDate = false;\n        }\n\n        data.push(currentAmount);\n\n        currentAmount = 0;\n        indexCurrentDate = true;\n        indexLabel++;\n      }\n    }\n\n    if (mainCategory === \"expense\" && subCategory.length === 6) {\n      const labelsLength = labels.length;\n      let indexLabel = 0;\n      let indexData = 0;\n      let indexCurrentDate = true;\n      let currentMonth;\n      let currentAmount = 0;\n\n      while (indexLabel < labelsLength) {\n        // keep adding if it's still at current date(time)\n        while (indexCurrentDate) {\n          // console.log(filteredData);\n          // console.log(filteredData[indexData]?.time);\n          // if (!filteredData[indexData]?.time)\n          //   currentMonth = new Intl.DateTimeFormat(\"en-US\", dateOptObj).format(\n          //     new Date(filteredData[indexData]?.time)\n          //   );\n          // check date(time)\n          if (currentMonth === labels[indexLabel]) {\n            // check main category\n            if (filteredData[indexData].category === \"income\") {\n              currentAmount += Number(filteredData[indexData].price);\n            }\n\n            indexData++;\n          } else indexCurrentDate = false;\n        }\n\n        data.push(currentAmount);\n\n        currentAmount = 0;\n        indexCurrentDate = true;\n        indexLabel++;\n      }\n    }\n  }\n  // day base\n  else {\n    if (mainCategory === \"income\" && subCategory.length === 3) {\n      const labelsLength = labels.length;\n      let indexLabel = 0;\n      let indexData = 0;\n      let indexCurrentDate = true;\n      let currentDate;\n      let currentAmount = 0;\n\n      while (indexLabel < labelsLength) {\n        currentDate = `${year}-${labels[indexLabel].slice(0, 2)}-${labels[\n          indexLabel\n        ].slice(2)}`;\n\n        // keep adding if it's still at current date(time)\n        if (indexData < filteredData.length - 1) {\n          while (indexCurrentDate) {\n            // check date(time)\n            if (filteredData[indexData].time === currentDate) {\n              // check main category\n              if (filteredData[indexData].category === \"income\") {\n                currentAmount += Number(filteredData[indexData].price);\n              }\n\n              indexData++;\n            } else indexCurrentDate = false;\n          }\n        }\n\n        data.push(currentAmount);\n\n        currentAmount = 0;\n        indexCurrentDate = true;\n        indexLabel++;\n      }\n    }\n\n    if (mainCategory === \"expense\" && subCategory.length === 6) {\n      const labelsLength = labels.length;\n      let indexLabel = 0;\n      let indexData = 0;\n      let indexCurrentDate = true;\n      let currentDate;\n      let currentAmount = 0;\n\n      while (indexLabel < labelsLength) {\n        currentDate = `${year}-${labels[indexLabel].slice(0, 2)}-${labels[\n          indexLabel\n        ].slice(2)}`;\n\n        // keep adding if it's still at current date(time)\n\n        while (indexCurrentDate) {\n          // check date(time)\n          if (filteredData[indexData]?.time === currentDate) {\n            // check main category\n            if (filteredData[indexData].category === \"expense\") {\n              currentAmount += Number(filteredData[indexData].price);\n            }\n\n            indexData++;\n          } else indexCurrentDate = false;\n        }\n\n        data.push(currentAmount);\n\n        currentAmount = 0;\n        indexCurrentDate = true;\n        indexLabel++;\n      }\n    }\n  }\n  console.log(filteredData);\n\n  console.log(labels);\n  // console.log(data);\n  console.log(data);\n  return data;\n}\n\nfunction createLabelsArr(duration, startingDate) {\n  const today = new Date(startingDate);\n\n  let labels = [];\n\n  // one week\n  if (duration === \"7\") {\n    createLabelsArrHelper(labels, 7, 1, \"day\", today);\n  }\n\n  if (duration === \"14\") {\n    createLabelsArrHelper(labels, 14, 1, \"day\", today);\n  }\n\n  if (duration === \"30\") {\n    createLabelsArrHelper(labels, 30, 1, \"day\", today);\n  }\n\n  if (duration === \"90\") {\n    createLabelsArrHelper(labels, 30, 3, \"day\", today);\n  }\n\n  if (duration === \"6\") {\n    createLabelsArrHelper(labels, 6, 1, \"month\", today);\n  }\n\n  if (duration === \"12\") {\n    createLabelsArrHelper(labels, 12, 1, \"month\", today);\n  }\n\n  return labels;\n}\n\nfunction createLabelsArrHelper(\n  labels,\n  duration,\n  incrementAmount,\n  dayMonth,\n  today\n) {\n  let tmpDay = today;\n  let day;\n  let month;\n\n  // if it's increment by month, the day is never change\n  // we could put it outisde for-loop\n  if (dayMonth === \"month\") {\n    if (tmpDay.getDate() < 10) day = `0${tmpDay.getDate()}`;\n    else day = tmpDay.getDate();\n  }\n\n  for (let i = 0; i < duration; i++) {\n    // incremenet by month\n    if (dayMonth === \"month\")\n      tmpDay.setMonth(tmpDay.getMonth() + incrementAmount);\n\n    // increment by day\n    if (dayMonth === \"day\") {\n      tmpDay.setDate(tmpDay.getDate() + incrementAmount);\n\n      // day will change, so put this inside for-loop\n      if (tmpDay.getDate() < 10) day = `0${tmpDay.getDate()}`;\n      else day = tmpDay.getDate();\n    }\n\n    if (tmpDay.getMonth() + 1 < 10) month = `0${tmpDay.getMonth() + 1}`;\n    else month = tmpDay.getMonth() + 1;\n\n    // if (dayMonth === \"month\") {\n    //   labels.push(new Intl.DateTimeFormat(\"en-US\", dateOptObj).format(tmpDay));\n    labels.push(`${month}${day}`);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}