{"ast":null,"code":"var _jsxFileName = \"/Users/eyo/Desktop/expense-tracker/src/components/UI/AddDataForm/FormPrice.js\";\nimport FormContainer from \"./FormContainer\";\nimport Warning from \"../Warning/Warning\";\nimport style from \"./AddDataForm.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction FormPrice(props) {\n  // Reference 1\n  const invalid = !props.isValid && props.priceTouch;\n  let classInput = `${style.input} input`;\n  if (invalid) classInput += \" input--invalid\";\n  let warningText = \"price must be positive integer\";\n  if (props.isTooLarge) warningText = \"sorry! price should be less than 1000T\";\n  return /*#__PURE__*/_jsxDEV(FormContainer, {\n    className: style[\"price__container\"],\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"price\",\n      className: `${style.label} capitalize`,\n      children: \"price\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      onChange: props.priceChangeHandler,\n      onBlur: props.inputPriceTouchHandler,\n      type: \"number\",\n      className: classInput,\n      value: props.price,\n      id: \"price\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Warning, {\n      index: invalid,\n      className: style.warning,\n      children: warningText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 5\n  }, this);\n}\n\n_c = FormPrice;\nexport default FormPrice;\n/*\nReference 1\nthis validation is for UI (red outline)\nwe only want to show the red outline to user when\n1) user has selected or touched the price input\n2) user input the wrong input\n*/\n\nvar _c;\n\n$RefreshReg$(_c, \"FormPrice\");","map":{"version":3,"sources":["/Users/eyo/Desktop/expense-tracker/src/components/UI/AddDataForm/FormPrice.js"],"names":["FormContainer","Warning","style","FormPrice","props","invalid","isValid","priceTouch","classInput","input","warningText","isTooLarge","label","priceChangeHandler","inputPriceTouchHandler","price","warning"],"mappings":";AAAA,OAAOA,aAAP,MAA0B,iBAA1B;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,OAAOC,KAAP,MAAkB,0BAAlB;;;AAEA,SAASC,SAAT,CAAmBC,KAAnB,EAA0B;AACxB;AACA,QAAMC,OAAO,GAAG,CAACD,KAAK,CAACE,OAAP,IAAkBF,KAAK,CAACG,UAAxC;AAEA,MAAIC,UAAU,GAAI,GAAEN,KAAK,CAACO,KAAM,QAAhC;AACA,MAAIJ,OAAJ,EAAaG,UAAU,IAAI,iBAAd;AAEb,MAAIE,WAAW,GAAG,gCAAlB;AACA,MAAIN,KAAK,CAACO,UAAV,EAAsBD,WAAW,GAAG,wCAAd;AAEtB,sBACE,QAAC,aAAD;AAAe,IAAA,SAAS,EAAER,KAAK,CAAC,kBAAD,CAA/B;AAAA,4BACE;AAAO,MAAA,OAAO,EAAC,OAAf;AAAuB,MAAA,SAAS,EAAG,GAAEA,KAAK,CAACU,KAAM,aAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAIE;AACE,MAAA,QAAQ,EAAER,KAAK,CAACS,kBADlB;AAEE,MAAA,MAAM,EAAET,KAAK,CAACU,sBAFhB;AAGE,MAAA,IAAI,EAAC,QAHP;AAIE,MAAA,SAAS,EAAEN,UAJb;AAKE,MAAA,KAAK,EAAEJ,KAAK,CAACW,KALf;AAME,MAAA,EAAE,EAAC;AANL;AAAA;AAAA;AAAA;AAAA,YAJF,eAYE,QAAC,OAAD;AAAS,MAAA,KAAK,EAAEV,OAAhB;AAAyB,MAAA,SAAS,EAAEH,KAAK,CAACc,OAA1C;AAAA,gBACGN;AADH;AAAA;AAAA;AAAA;AAAA,YAZF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAkBD;;KA5BQP,S;AA8BT,eAAeA,SAAf;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import FormContainer from \"./FormContainer\";\nimport Warning from \"../Warning/Warning\";\nimport style from \"./AddDataForm.module.css\";\n\nfunction FormPrice(props) {\n  // Reference 1\n  const invalid = !props.isValid && props.priceTouch;\n\n  let classInput = `${style.input} input`;\n  if (invalid) classInput += \" input--invalid\";\n\n  let warningText = \"price must be positive integer\";\n  if (props.isTooLarge) warningText = \"sorry! price should be less than 1000T\";\n\n  return (\n    <FormContainer className={style[\"price__container\"]}>\n      <label htmlFor=\"price\" className={`${style.label} capitalize`}>\n        price\n      </label>\n      <input\n        onChange={props.priceChangeHandler}\n        onBlur={props.inputPriceTouchHandler}\n        type=\"number\"\n        className={classInput}\n        value={props.price}\n        id=\"price\"\n      ></input>\n      <Warning index={invalid} className={style.warning}>\n        {warningText}\n      </Warning>\n    </FormContainer>\n  );\n}\n\nexport default FormPrice;\n/*\nReference 1\nthis validation is for UI (red outline)\nwe only want to show the red outline to user when\n1) user has selected or touched the price input\n2) user input the wrong input\n*/\n"]},"metadata":{},"sourceType":"module"}