{"ast":null,"code":"/*\nThe logic is \n1. If the year of data is less than current year, we can guarantee this data is within the range, so immediately return true\n2. If both year are the same, then need to compare month and day\n*/\nfunction compareTime(data, dateObj, curYear, curMonth, curDay) {\n  const {\n    year,\n    month,\n    day\n  } = data;\n  const yearNum = year - 0,\n        curYearNum = curYear - 0;\n  const monthNum = month - 0,\n        curMonthNum = curMonth - 0;\n  const dayNum = day - 0,\n        curDayNum = curDay - 0;\n  if (!dateObj) return yearNum < curYearNum || yearNum === curYearNum && monthNum < curMonthNum || yearNum === curYearNum && monthNum === curMonthNum && dayNum <= curDayNum;else {\n    const curYear1 = dateObj.getFullYear(),\n          curMonth1 = dateObj.getMonth() + 1,\n          curDay1 = dateObj.getDate();\n    return yearNum < curYear1 || yearNum === curYear1 && monthNum < curMonth1 || yearNum === curYear1 && monthNum === curMonth1 && dayNum <= curDay1;\n  }\n}\n\nexport default compareTime;","map":{"version":3,"sources":["/Users/eyo/Desktop/expense-tracker/src/Others/compareTime.js"],"names":["compareTime","data","dateObj","curYear","curMonth","curDay","year","month","day","yearNum","curYearNum","monthNum","curMonthNum","dayNum","curDayNum","curYear1","getFullYear","curMonth1","getMonth","curDay1","getDate"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,SAASA,WAAT,CAAqBC,IAArB,EAA2BC,OAA3B,EAAoCC,OAApC,EAA6CC,QAA7C,EAAuDC,MAAvD,EAA+D;AAC7D,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,KAAR;AAAeC,IAAAA;AAAf,MAAuBP,IAA7B;AACA,QAAMQ,OAAO,GAAGH,IAAI,GAAG,CAAvB;AAAA,QACEI,UAAU,GAAGP,OAAO,GAAG,CADzB;AAEA,QAAMQ,QAAQ,GAAGJ,KAAK,GAAG,CAAzB;AAAA,QACEK,WAAW,GAAGR,QAAQ,GAAG,CAD3B;AAEA,QAAMS,MAAM,GAAGL,GAAG,GAAG,CAArB;AAAA,QACEM,SAAS,GAAGT,MAAM,GAAG,CADvB;AAGA,MAAI,CAACH,OAAL,EACE,OACEO,OAAO,GAAGC,UAAV,IACCD,OAAO,KAAKC,UAAZ,IAA0BC,QAAQ,GAAGC,WADtC,IAECH,OAAO,KAAKC,UAAZ,IACCC,QAAQ,KAAKC,WADd,IAECC,MAAM,IAAIC,SALd,CADF,KAQK;AACH,UAAMC,QAAQ,GAAGb,OAAO,CAACc,WAAR,EAAjB;AAAA,UACEC,SAAS,GAAGf,OAAO,CAACgB,QAAR,KAAqB,CADnC;AAAA,UAEEC,OAAO,GAAGjB,OAAO,CAACkB,OAAR,EAFZ;AAIA,WACEX,OAAO,GAAGM,QAAV,IACCN,OAAO,KAAKM,QAAZ,IAAwBJ,QAAQ,GAAGM,SADpC,IAECR,OAAO,KAAKM,QAAZ,IAAwBJ,QAAQ,KAAKM,SAArC,IAAkDJ,MAAM,IAAIM,OAH/D;AAKD;AACF;;AAED,eAAenB,WAAf","sourcesContent":["/*\nThe logic is \n1. If the year of data is less than current year, we can guarantee this data is within the range, so immediately return true\n2. If both year are the same, then need to compare month and day\n*/\nfunction compareTime(data, dateObj, curYear, curMonth, curDay) {\n  const { year, month, day } = data;\n  const yearNum = year - 0,\n    curYearNum = curYear - 0;\n  const monthNum = month - 0,\n    curMonthNum = curMonth - 0;\n  const dayNum = day - 0,\n    curDayNum = curDay - 0;\n\n  if (!dateObj)\n    return (\n      yearNum < curYearNum ||\n      (yearNum === curYearNum && monthNum < curMonthNum) ||\n      (yearNum === curYearNum &&\n        monthNum === curMonthNum &&\n        dayNum <= curDayNum)\n    );\n  else {\n    const curYear1 = dateObj.getFullYear(),\n      curMonth1 = dateObj.getMonth() + 1,\n      curDay1 = dateObj.getDate();\n\n    return (\n      yearNum < curYear1 ||\n      (yearNum === curYear1 && monthNum < curMonth1) ||\n      (yearNum === curYear1 && monthNum === curMonth1 && dayNum <= curDay1)\n    );\n  }\n}\n\nexport default compareTime;\n"]},"metadata":{},"sourceType":"module"}