{"ast":null,"code":"var _jsxFileName = \"/Users/eyo/Desktop/expense-tracker/src/components/MainContent/Calendar/CalendarTable/CalendarTable.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect, useContext, useRef } from \"react\";\nimport Button from \"../../../UI/Button/Button\";\nimport CreateCalendarTable from \"./CreateCalendarTable\";\nimport ExpenseDataContext from \"../../../../store/expenseData/expenseData--context\";\nimport ExpenseListModal from \"../../../UI/ExpenseListModal/ExpenseListModal\";\nimport AddDataForm from \"../../../UI/AddDataForm/AddDateForm\";\nimport BtnIcons from \"../../../UI/BtnIcons/BtnIcons\";\nimport SmallChartModal from \"../../../UI/SmallChartModal/SmallChartModal\";\nimport DataCardModal from \"../../../UI/DataCardModal/DataCardModal\";\nimport BtnIcon from \"../../../UI/BtnIcon/BtnIcon\";\nimport useAddDataForm from \"../../../../Others/Custom/useAddDataForm\";\nimport timeObj from \"../../../assets/timeObj/timeObj\";\nimport useExpenseDataList from \"../../../../Others/Custom/useExpenseDataList\";\nimport createDateStringFormat from \"../../../../Others/CreateDateStringFormat/CreateDateStringFormat\";\nimport style from \"./CalendarTable.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst dateOptObj = {\n  month: \"long\"\n};\nconst {\n  TODAY\n} = timeObj;\n\nfunction CalendarTable(prop) {\n  _s();\n\n  var _expenseListCalendar$;\n\n  const {\n    expenseData\n  } = useContext(ExpenseDataContext);\n  const [calendarState, setcalendarState] = useState(CreateCalendarTable(TODAY, showModalHandler, expenseData));\n  const [date, setDate] = useState(new Date());\n  const [expenseListModal, setExpenseListModal] = useState(false);\n  const [expenseListCalendar, setExpenseListCalendar] = useState([]);\n  const [addDataFormModal, addDataFormModalToggler] = useAddDataForm();\n  const [modalCard, setModalCard] = useState(false);\n  const [expenseDataList, setExpenseDataList] = useExpenseDataList(date, \"monthly\"); // const [selectedDate, setSelectedDate] = useState(date);\n  // useRef can be used to store data that should be persisted across re-renders\n\n  const skipInitialRender = useRef(false);\n  useEffect(() => {\n    // skip first render\n    if (skipInitialRender.current) {\n      const calendar = CreateCalendarTable(date, showModalHandler, expenseData);\n      setcalendarState(calendar);\n    } else skipInitialRender.current = true;\n  }, [expenseData]);\n\n  function arrowBtnClickHandler(e) {\n    const newDate = new Date(date);\n\n    if (e.target.dataset.id === \"increase\") {\n      newDate.setMonth(newDate.getMonth() + 1);\n    } else {\n      newDate.setMonth(newDate.getMonth() - 1);\n    }\n\n    const calendar = CreateCalendarTable(newDate, showModalHandler, expenseData);\n    setcalendarState(calendar);\n    setDate(newDate);\n  }\n\n  function showModalHandler(e) {\n    const date = e.target.dataset.id;\n    if (!date) return;\n    setExpenseDataList(date); // const allDataArr = expenseData.filter((element) => {\n    //   return element.time === data;\n    // });\n    // setExpenseListModal(true);\n    // if (allDataArr.length === 0) setExpenseListCalendar(data);\n    // else setExpenseListCalendar(allDataArr);\n  }\n\n  function closeModalHandler() {\n    setExpenseListModal(false);\n  }\n\n  function modalCardToggler(e) {\n    if (modalCard) setModalCard(false);else {\n      const id = e.target.dataset.id;\n\n      if (id) {\n        setModalCard(id);\n      }\n    }\n  } // if expenseListCalendar is string, it means there's no data\n  // and expenseListCalendar will be the right time\n\n\n  const seletedTime = typeof expenseListCalendar === \"string\" ? expenseListCalendar : (_expenseListCalendar$ = expenseListCalendar[0]) === null || _expenseListCalendar$ === void 0 ? void 0 : _expenseListCalendar$.time;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [expenseListModal && /*#__PURE__*/_jsxDEV(ExpenseListModal, {\n      expenseListCalendar: expenseListCalendar,\n      setExpenseListCalendar: setExpenseListCalendar,\n      closeModalHandler: closeModalHandler,\n      addDataFormModalToggler: addDataFormModalToggler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }, this), addDataFormModal && /*#__PURE__*/_jsxDEV(AddDataForm, {\n      date: seletedTime,\n      addDataFormModalToggler: addDataFormModalToggler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 9\n    }, this), modalCard === \"chart\" && /*#__PURE__*/_jsxDEV(SmallChartModal, {\n      type: \"month\",\n      modalCardToggler: modalCardToggler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 9\n    }, this), modalCard === \"info\" && /*#__PURE__*/_jsxDEV(DataCardModal, {\n      type: \"month\",\n      modalCardToggler: modalCardToggler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: style[\"icon__container\"],\n      children: /*#__PURE__*/_jsxDEV(BtnIcons, {\n        onClick: modalCardToggler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: style[\"monthly__container\"],\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: style[\"monthly__month\"],\n        children: [/*#__PURE__*/_jsxDEV(BtnIcon, {\n          text: \"last month\",\n          onClick: arrowBtnClickHandler,\n          classBtn: style.btn,\n          classText: style[\"btn__text\"],\n          dataID: \"decrease\",\n          children: \"<\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: style[\"monthly__title\"],\n          children: [/*#__PURE__*/_jsxDEV(\"h6\", {\n            children: new Intl.DateTimeFormat(\"en-US\", dateOptObj).format(date)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"h6\", {\n            children: date.getFullYear()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(BtnIcon, {\n          text: \"next month\",\n          onClick: arrowBtnClickHandler,\n          classBtn: style.btn,\n          classText: style[\"btn__text\"],\n          dataID: \"increase\",\n          children: \">\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: style[\"monthly__week\"],\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Sun\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Mon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Tue\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Wed\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Thu\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Fri\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Sat\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: style[\"monthly__days\"],\n        children: calendarState\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(CalendarTable, \"KYpEfYkLKdJiK4oI/sjLEwKW5cg=\", false, function () {\n  return [useAddDataForm, useExpenseDataList];\n});\n\n_c = CalendarTable;\nexport default CalendarTable;\n/*\n  // animation for month\n  useEffect(() => {\n    // if (index === 0) {\n    //   index++;\n    //   return;\n    // }\n\n    setAnimationMonth(true);\n\n    const time = setTimeout(() => {\n      setAnimationMonth(false);\n    }, 300);\n\n    return function cleanUp() {\n      clearTimeout(time);\n    };\n  }, [month]);\n\n  // animation for year\n  useEffect(() => {\n    // if (index1 === 0) {\n    //   index1++;\n    //   return;\n    // }\n\n    setAnimationMonthYear(true);\n\n    const time = setTimeout(() => {\n      setAnimationMonthYear(false);\n    }, 300);\n\n    return function cleanUp() {\n      clearTimeout(time);\n    };\n  }, [year]);\n\n\n  */\n// const test = new Date();\n// test.setFullYear(date.getFullYear() - 1);\n// test.setMonth(11);\n// // test.setMonth(0);\n// console.log(test);\n// const initialObj = {\n//   calendar: createCalendarTable(date),\n//   month: new Intl.DateTimeFormat(\"en-US\", dateOptObj).format(date),\n//   year: date.getFullYear(),\n// };\n// function reducer(state, action) {\n//   switch (action.type) {\n//     case \"INCREMENT\": {\n//       //   if (state.month === \"December\") {\n//       //     date.setFullYear(date.getFullYear() + 1);\n//       //     date.setMonth(0);\n//       //   } else {\n//       date.setMonth(date.getMonth() + 1);\n//       //   }\n//       const month = new Intl.DateTimeFormat(\"en-US\", dateOptObj).format(date);\n//       //   console.log(month);\n//       const calendar = [];\n//       const year = date.getFullYear();\n//       //   console.log(month, year);\n//       return {\n//         calendar,\n//         month,\n//         year,\n//       };\n//     }\n//     case \"DECREMENT\": {\n//       if (state.month === \"January\") {\n//         date.setFullYear(date.getFullYear() - 1);\n//         date.setMonth(11);\n//       } else date.setMonth(date.getMonth() - 1);\n//       const calendar = createCalendarTable(date);\n//       const month = new Intl.DateTimeFormat(\"en-US\", dateOptObj).format(date);\n//       const year = date.getFullYear();\n//       return {\n//         calendar,\n//         month,\n//         year,\n//       };\n//     }\n//     default: {\n//       return state;\n//     }\n//   }\n// }\n\nvar _c;\n\n$RefreshReg$(_c, \"CalendarTable\");","map":{"version":3,"sources":["/Users/eyo/Desktop/expense-tracker/src/components/MainContent/Calendar/CalendarTable/CalendarTable.js"],"names":["useState","useEffect","useContext","useRef","Button","CreateCalendarTable","ExpenseDataContext","ExpenseListModal","AddDataForm","BtnIcons","SmallChartModal","DataCardModal","BtnIcon","useAddDataForm","timeObj","useExpenseDataList","createDateStringFormat","style","dateOptObj","month","TODAY","CalendarTable","prop","expenseData","calendarState","setcalendarState","showModalHandler","date","setDate","Date","expenseListModal","setExpenseListModal","expenseListCalendar","setExpenseListCalendar","addDataFormModal","addDataFormModalToggler","modalCard","setModalCard","expenseDataList","setExpenseDataList","skipInitialRender","current","calendar","arrowBtnClickHandler","e","newDate","target","dataset","id","setMonth","getMonth","closeModalHandler","modalCardToggler","seletedTime","time","btn","Intl","DateTimeFormat","format","getFullYear"],"mappings":"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","sourcesContent":["import { useState, useEffect, useContext, useRef } from \"react\";\nimport Button from \"../../../UI/Button/Button\";\nimport CreateCalendarTable from \"./CreateCalendarTable\";\nimport ExpenseDataContext from \"../../../../store/expenseData/expenseData--context\";\nimport ExpenseListModal from \"../../../UI/ExpenseListModal/ExpenseListModal\";\nimport AddDataForm from \"../../../UI/AddDataForm/AddDateForm\";\nimport BtnIcons from \"../../../UI/BtnIcons/BtnIcons\";\nimport SmallChartModal from \"../../../UI/SmallChartModal/SmallChartModal\";\nimport DataCardModal from \"../../../UI/DataCardModal/DataCardModal\";\nimport BtnIcon from \"../../../UI/BtnIcon/BtnIcon\";\nimport useAddDataForm from \"../../../../Others/Custom/useAddDataForm\";\nimport timeObj from \"../../../assets/timeObj/timeObj\";\nimport useExpenseDataList from \"../../../../Others/Custom/useExpenseDataList\";\nimport createDateStringFormat from \"../../../../Others/CreateDateStringFormat/CreateDateStringFormat\";\nimport style from \"./CalendarTable.module.css\";\n\nconst dateOptObj = { month: \"long\" };\nconst { TODAY } = timeObj;\n\nfunction CalendarTable(prop) {\n  const { expenseData } = useContext(ExpenseDataContext);\n  const [calendarState, setcalendarState] = useState(\n    CreateCalendarTable(TODAY, showModalHandler, expenseData)\n  );\n  const [date, setDate] = useState(new Date());\n  const [expenseListModal, setExpenseListModal] = useState(false);\n  const [expenseListCalendar, setExpenseListCalendar] = useState([]);\n  const [addDataFormModal, addDataFormModalToggler] = useAddDataForm();\n  const [modalCard, setModalCard] = useState(false);\n  const [expenseDataList, setExpenseDataList] = useExpenseDataList(\n    date,\n    \"monthly\"\n  );\n  // const [selectedDate, setSelectedDate] = useState(date);\n  // useRef can be used to store data that should be persisted across re-renders\n  const skipInitialRender = useRef(false);\n\n  useEffect(() => {\n    // skip first render\n    if (skipInitialRender.current) {\n      const calendar = CreateCalendarTable(date, showModalHandler, expenseData);\n      setcalendarState(calendar);\n    } else skipInitialRender.current = true;\n  }, [expenseData]);\n\n  function arrowBtnClickHandler(e) {\n    const newDate = new Date(date);\n    if (e.target.dataset.id === \"increase\") {\n      newDate.setMonth(newDate.getMonth() + 1);\n    } else {\n      newDate.setMonth(newDate.getMonth() - 1);\n    }\n    const calendar = CreateCalendarTable(\n      newDate,\n      showModalHandler,\n      expenseData\n    );\n    setcalendarState(calendar);\n    setDate(newDate);\n  }\n\n  function showModalHandler(e) {\n    const date = e.target.dataset.id;\n\n    if (!date) return;\n    setExpenseDataList(date);\n\n    // const allDataArr = expenseData.filter((element) => {\n    //   return element.time === data;\n    // });\n\n    // setExpenseListModal(true);\n    // if (allDataArr.length === 0) setExpenseListCalendar(data);\n    // else setExpenseListCalendar(allDataArr);\n  }\n\n  function closeModalHandler() {\n    setExpenseListModal(false);\n  }\n\n  function modalCardToggler(e) {\n    if (modalCard) setModalCard(false);\n    else {\n      const id = e.target.dataset.id;\n\n      if (id) {\n        setModalCard(id);\n      }\n    }\n  }\n\n  // if expenseListCalendar is string, it means there's no data\n  // and expenseListCalendar will be the right time\n  const seletedTime =\n    typeof expenseListCalendar === \"string\"\n      ? expenseListCalendar\n      : expenseListCalendar[0]?.time;\n\n  return (\n    <>\n      {expenseListModal && (\n        <ExpenseListModal\n          expenseListCalendar={expenseListCalendar}\n          setExpenseListCalendar={setExpenseListCalendar}\n          closeModalHandler={closeModalHandler}\n          addDataFormModalToggler={addDataFormModalToggler}\n        />\n      )}\n      {addDataFormModal && (\n        <AddDataForm\n          date={seletedTime}\n          addDataFormModalToggler={addDataFormModalToggler}\n        />\n      )}\n      {modalCard === \"chart\" && (\n        <SmallChartModal type=\"month\" modalCardToggler={modalCardToggler} />\n      )}\n      {modalCard === \"info\" && (\n        <DataCardModal type=\"month\" modalCardToggler={modalCardToggler} />\n      )}\n\n      <div className={style[\"icon__container\"]}>\n        <BtnIcons onClick={modalCardToggler} />\n      </div>\n      <div className={style[\"monthly__container\"]}>\n        <div className={style[\"monthly__month\"]}>\n          <BtnIcon\n            text=\"last month\"\n            onClick={arrowBtnClickHandler}\n            classBtn={style.btn}\n            classText={style[\"btn__text\"]}\n            dataID=\"decrease\"\n          >\n            {\"<\"}\n          </BtnIcon>\n\n          <div className={style[\"monthly__title\"]}>\n            <h6>{new Intl.DateTimeFormat(\"en-US\", dateOptObj).format(date)}</h6>\n            <h6>{date.getFullYear()}</h6>\n          </div>\n          <BtnIcon\n            text=\"next month\"\n            onClick={arrowBtnClickHandler}\n            classBtn={style.btn}\n            classText={style[\"btn__text\"]}\n            dataID=\"increase\"\n          >\n            {\">\"}\n          </BtnIcon>\n        </div>\n        <div className={style[\"monthly__week\"]}>\n          <div>Sun</div>\n          <div>Mon</div>\n          <div>Tue</div>\n          <div>Wed</div>\n          <div>Thu</div>\n          <div>Fri</div>\n          <div>Sat</div>\n        </div>\n        <div className={style[\"monthly__days\"]}>{calendarState}</div>\n      </div>\n    </>\n  );\n}\nexport default CalendarTable;\n\n/*\n  // animation for month\n  useEffect(() => {\n    // if (index === 0) {\n    //   index++;\n    //   return;\n    // }\n\n    setAnimationMonth(true);\n\n    const time = setTimeout(() => {\n      setAnimationMonth(false);\n    }, 300);\n\n    return function cleanUp() {\n      clearTimeout(time);\n    };\n  }, [month]);\n\n  // animation for year\n  useEffect(() => {\n    // if (index1 === 0) {\n    //   index1++;\n    //   return;\n    // }\n\n    setAnimationMonthYear(true);\n\n    const time = setTimeout(() => {\n      setAnimationMonthYear(false);\n    }, 300);\n\n    return function cleanUp() {\n      clearTimeout(time);\n    };\n  }, [year]);\n\n\n  */\n\n// const test = new Date();\n// test.setFullYear(date.getFullYear() - 1);\n// test.setMonth(11);\n// // test.setMonth(0);\n\n// console.log(test);\n\n// const initialObj = {\n//   calendar: createCalendarTable(date),\n//   month: new Intl.DateTimeFormat(\"en-US\", dateOptObj).format(date),\n//   year: date.getFullYear(),\n// };\n\n// function reducer(state, action) {\n//   switch (action.type) {\n//     case \"INCREMENT\": {\n//       //   if (state.month === \"December\") {\n//       //     date.setFullYear(date.getFullYear() + 1);\n//       //     date.setMonth(0);\n//       //   } else {\n//       date.setMonth(date.getMonth() + 1);\n//       //   }\n\n//       const month = new Intl.DateTimeFormat(\"en-US\", dateOptObj).format(date);\n//       //   console.log(month);\n//       const calendar = [];\n//       const year = date.getFullYear();\n\n//       //   console.log(month, year);\n\n//       return {\n//         calendar,\n//         month,\n//         year,\n//       };\n//     }\n\n//     case \"DECREMENT\": {\n//       if (state.month === \"January\") {\n//         date.setFullYear(date.getFullYear() - 1);\n//         date.setMonth(11);\n//       } else date.setMonth(date.getMonth() - 1);\n\n//       const calendar = createCalendarTable(date);\n//       const month = new Intl.DateTimeFormat(\"en-US\", dateOptObj).format(date);\n//       const year = date.getFullYear();\n\n//       return {\n//         calendar,\n//         month,\n//         year,\n//       };\n//     }\n\n//     default: {\n//       return state;\n//     }\n//   }\n// }\n"]},"metadata":{},"sourceType":"module"}