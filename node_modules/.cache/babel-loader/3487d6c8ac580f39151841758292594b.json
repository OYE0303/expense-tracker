{"ast":null,"code":"var _jsxFileName = \"/Users/eyo/Desktop/project-expenseTracker-main/src/components/MainContent/Chart/ChartMain/ChartMain.js\",\n    _s = $RefreshSig$();\n\nimport { useRef, useEffect, useContext } from \"react\";\nimport ExpenseDataContext from \"../../../../store/expenseData/expenseData--context\";\nimport style from \"./ChartMain.module.css\";\nimport Chart from \"chart.js/auto\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst dateOptObj = {\n  month: \"short\"\n};\n\nfunction ChartMain(props) {\n  _s();\n\n  const chartRef = useRef(null);\n  const {\n    EXPENSE_DATA\n  } = useContext(ExpenseDataContext);\n  let labels = [],\n      labels1 = [],\n      data = [];\n\n  if (props.chartData) {\n    var _props$chartData, _props$chartData2, _props$chartData3, _props$chartData4;\n\n    const standardLabels = createLabelsArr(props.chartData.timeDuration, props.chartData.startingDate); // labels = standardLabels.map((label) => )\n    // if (\n    //   props.chartData.timeDuration === \"6\" ||\n    //   props.chartData.timeDuration === \"12\"\n    // ) {\n    //   labels1 = labels.map((label) =>\n    //     new Intl.DateTimeFormat(\"en-US\", dateOptObj).format(\n    //       new Date(2020, label.slice(0, 2) - 1, label.slice(2) - 0)\n    //     )\n    //   );\n    // }\n\n    data = createDataArr1(standardLabels, EXPENSE_DATA, (_props$chartData = props.chartData) === null || _props$chartData === void 0 ? void 0 : _props$chartData.startingDate, (_props$chartData2 = props.chartData) === null || _props$chartData2 === void 0 ? void 0 : _props$chartData2.mainCategory, (_props$chartData3 = props.chartData) === null || _props$chartData3 === void 0 ? void 0 : _props$chartData3.subCategory, (_props$chartData4 = props.chartData) === null || _props$chartData4 === void 0 ? void 0 : _props$chartData4.timeDuration);\n  }\n\n  const dataObj = {\n    labels: labels,\n    datasets: [{\n      label: \"My First Dataset\",\n      data: data,\n      backgroundColor: [\"rgba(255, 99, 132, 0.2)\", \"rgba(255, 159, 64, 0.2)\", \"rgba(255, 205, 86, 0.2)\", \"rgba(75, 192, 192, 0.2)\", \"rgba(54, 162, 235, 0.2)\", \"rgba(153, 102, 255, 0.2)\", \"rgba(201, 203, 207, 0.2)\"],\n      borderColor: [\"rgb(255, 99, 132)\", \"rgb(255, 159, 64)\", \"rgb(255, 205, 86)\", \"rgb(75, 192, 192)\", \"rgb(54, 162, 235)\", \"rgb(153, 102, 255)\", \"rgb(201, 203, 207)\"],\n      borderWidth: 1\n    }]\n  };\n  const config = {\n    type: \"bar\",\n    data: dataObj,\n    options: {\n      scales: {\n        y: {\n          beginAtZero: true\n        }\n      }\n    }\n  }; // useEffect(() => {\n  //   const chart = new Chart(chartRef.current, config);\n  //   return function cleanUp() {\n  //     chart.destroy();\n  //   };\n  // }, [labels]);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: style.chartMain,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ChartMain, \"+o1nGUf0gmfc6lFgmRh5QYfQCMo=\");\n\n_c = ChartMain;\nexport default ChartMain;\n\nfunction createDataArr(standardLabels, expensData, start, mainCategory, subCategory, timeDuration) {\n  // const year = new Date(start).getFullYear();\n  // const startingDate = `${year}-${labels[0]?.slice(0, 2)}-${labels[0]?.slice(\n  //   2\n  // )}`;\n  // const endingDate = `${year}-${labels[labels.length - 1]?.slice(\n  //   0,\n  //   2\n  // )}-${labels[labels.length - 1]?.slice(2)}`;\n  const numStartingDate = Number(new Date(standardLabels[0]));\n  const numEndingDate = Number(new Date(standardLabels[standardLabels.length - 1]));\n  const filteredData = expensData.filter(element => Number(new Date(element.time)) >= numStartingDate && Number(new Date(element.time)) <= numEndingDate).sort((elementA, elementB) => Number(new Date(elementA.time)) - Number(new Date(elementB.time)));\n  const data = [];\n  let indexData = 0;\n  let indexCurrentDate = true;\n  let currentAmount = 0;\n  let currentLabel;\n\n  for (let i = 0; i < standardLabels.length; i++) {\n    currentLabel = Number(new Date(standardLabels[i]));\n\n    while (indexCurrentDate) {\n      var _filteredData$indexDa;\n\n      if (Number(new Date((_filteredData$indexDa = filteredData[indexData]) === null || _filteredData$indexDa === void 0 ? void 0 : _filteredData$indexDa.time)) <= currentLabel) {\n        if (filteredData[indexData].category === \"expense\") {\n          currentAmount += Number(filteredData[indexData].price);\n        }\n\n        indexData++;\n      } else indexCurrentDate = false;\n    }\n\n    data.push(currentAmount);\n    currentAmount = 0;\n    indexCurrentDate = true;\n  }\n\n  console.log(filteredData);\n  console.log(standardLabels);\n  console.log(data); // console.log(data);\n\n  return data;\n}\n\nfunction createDataArr1(standardLabels, expensData, start, mainCategory, subCategory, timeDuration) {\n  // const year = new Date(start).getFullYear();\n  // const startingDate = `${year}-${labels[0]?.slice(0, 2)}-${labels[0]?.slice(\n  //   2\n  // )}`;\n  // const endingDate = `${year}-${labels[labels.length - 1]?.slice(\n  //   0,\n  //   2\n  // )}-${labels[labels.length - 1]?.slice(2)}`;\n  const numStartingDate = Number(new Date(standardLabels[0]));\n  const numEndingDate = Number(new Date(standardLabels[standardLabels.length - 1]));\n  const filteredData = expensData.filter(element => Number(new Date(element.time)) >= numStartingDate && Number(new Date(element.time)) <= numEndingDate).sort((elementA, elementB) => Number(new Date(elementA.time)) - Number(new Date(elementB.time)));\n  const data = [];\n  const newLabels = standardLabels.map(label => new Date(label.slice(0, 4) - 0, label.slice(5, 7) - 0 + 1, 0).getMonth());\n  console.log(newLabels); // label.slice(0, 4) - 0, label.slice(5, 6) - 0, 0).getMonth()\n\n  let indexData = 0;\n  let indexCurrentDate = true;\n  let currentAmount = 0;\n  let currentLabel; // for (let i = 0; i < standardLabels.length; i++) {\n  //   currentLabel = Number(new Date(standardLabels[i]));\n  //   while (indexCurrentDate) {\n  //     if (Number(new Date(filteredData[indexData]?.time)) <= currentLabel) {\n  //       if (filteredData[indexData].category === \"expense\") {\n  //         currentAmount += Number(filteredData[indexData].price);\n  //       }\n  //       indexData++;\n  //     } else indexCurrentDate = false;\n  //   }\n  //   data.push(currentAmount);\n  //   currentAmount = 0;\n  //   indexCurrentDate = true;\n  // }\n  // console.log(filteredData);\n\n  console.log(standardLabels); // console.log(data);\n  // console.log(data);\n\n  return data;\n}\n\nfunction createLabelsArr(duration, startingDate) {\n  const today = new Date(startingDate);\n  let labels = []; // one week\n\n  if (duration === \"7\") {\n    createLabelsArrHelper(labels, 7, 1, \"day\", today);\n  }\n\n  if (duration === \"14\") {\n    createLabelsArrHelper(labels, 14, 1, \"day\", today);\n  }\n\n  if (duration === \"30\") {\n    createLabelsArrHelper(labels, 30, 1, \"day\", today);\n  }\n\n  if (duration === \"90\") {\n    createLabelsArrHelper(labels, 30, 3, \"day\", today);\n  }\n\n  if (duration === \"6\") {\n    createLabelsArrHelper(labels, 6, 1, \"month\", today);\n  }\n\n  if (duration === \"12\") {\n    createLabelsArrHelper(labels, 12, 1, \"month\", today);\n  }\n\n  return labels;\n}\n\nfunction createLabelsArrHelper(labels, duration, incrementAmount, dayMonth, today) {\n  let tmpDay = today;\n  let day;\n  let month;\n  let year = today.getFullYear();\n  let changeYear = false; // if it's increment by month, the day is never change\n  // we could put it outisde for-loop\n\n  if (dayMonth === \"month\") {\n    if (tmpDay.getDate() < 10) day = `0${tmpDay.getDate()}`;else day = tmpDay.getDate();\n  }\n\n  for (let i = 0; i < duration; i++) {\n    // incremenet by month\n    if (dayMonth === \"month\") tmpDay.setMonth(tmpDay.getMonth() + incrementAmount); // increment by day\n\n    if (dayMonth === \"day\") {\n      tmpDay.setDate(tmpDay.getDate() + incrementAmount); // day will change, so put this inside for-loop\n\n      if (tmpDay.getDate() < 10) day = `0${tmpDay.getDate()}`;else day = tmpDay.getDate();\n    }\n\n    if (tmpDay.getMonth() + 1 < 10) month = `0${tmpDay.getMonth() + 1}`;else month = tmpDay.getMonth() + 1; // increment year\n\n    if (changeYear) {\n      year++;\n      changeYear = false;\n    }\n\n    if (tmpDay.getMonth() === 11) changeYear = true;\n    labels.push(`${year}-${month}-${day}`);\n  }\n}\n/*\n if (timeDuration === \"6\" || timeDuration === \"12\") {\n    if (mainCategory === \"income\" && subCategory.length === 3) {\n      const labelsLength = labels.length;\n      let indexLabel = 0;\n      let indexData = 0;\n      let indexCurrentDate = true;\n      let currentMonth;\n      let currentAmount = 0;\n\n      while (indexLabel < labelsLength) {\n        // keep adding if it's still at current date(time)\n        while (indexCurrentDate) {\n          currentMonth = new Intl.DateTimeFormat(\"en-US\", dateOptObj).format(\n            new Date(filteredData[indexData]?.time)\n          );\n          // check date(time)\n          if (currentMonth === labels1[indexLabel]) {\n            // check main category\n            if (filteredData[indexData].category === \"income\") {\n              currentAmount += Number(filteredData[indexData].price);\n            }\n\n            indexData++;\n          } else indexCurrentDate = false;\n        }\n\n        data.push(currentAmount);\n\n        currentAmount = 0;\n        indexCurrentDate = true;\n        indexLabel++;\n      }\n    }\n\n    if (mainCategory === \"expense\" && subCategory.length === 6) {\n      const labelsLength = labels.length;\n      let indexLabel = 0;\n      let indexData = 0;\n      let indexCurrentDate = true;\n      let currentMonth;\n      let currentAmount = 0;\n\n      while (indexLabel < labelsLength) {\n        // keep adding if it's still at current date(time)\n        while (indexCurrentDate) {\n          console.log(filteredData);\n          if (!filteredData[indexData]?.time)\n            currentMonth = new Intl.DateTimeFormat(\"en-US\", dateOptObj).format(\n              new Date(filteredData[indexData]?.time)\n            );\n          console.log(currentMonth);\n\n          if (currentMonth === labels1[indexLabel]) {\n            // check main category\n            if (filteredData[indexData].category === \"income\") {\n              currentAmount += Number(filteredData[indexData].price);\n            }\n\n            indexData++;\n          } else indexCurrentDate = false;\n        }\n\n        data.push(currentAmount);\n\n        currentAmount = 0;\n        indexCurrentDate = true;\n        indexLabel++;\n      }\n    }\n  }\n  // day base\n  else {\n    if (mainCategory === \"income\" && subCategory.length === 3) {\n      const labelsLength = labels.length;\n      let indexLabel = 0;\n      let indexData = 0;\n      let indexCurrentDate = true;\n      let currentDate;\n      let currentAmount = 0;\n\n      while (indexLabel < labelsLength) {\n        currentDate = `${year}-${labels[indexLabel].slice(0, 2)}-${labels[\n          indexLabel\n        ].slice(2)}`;\n\n        // keep adding if it's still at current date(time)\n        if (indexData < filteredData.length - 1) {\n          while (indexCurrentDate) {\n            // check date(time)\n            if (filteredData[indexData].time === currentDate) {\n              // check main category\n              if (filteredData[indexData].category === \"income\") {\n                currentAmount += Number(filteredData[indexData].price);\n              }\n\n              indexData++;\n            } else indexCurrentDate = false;\n          }\n        }\n\n        data.push(currentAmount);\n\n        currentAmount = 0;\n        indexCurrentDate = true;\n        indexLabel++;\n      }\n    }\n\n    if (mainCategory === \"expense\" && subCategory.length === 6) {\n      const labelsLength = labels.length;\n      let indexLabel = 0;\n      let indexData = 0;\n      let indexCurrentDate = true;\n      let currentDate;\n      let currentAmount = 0;\n\n      while (indexLabel < labelsLength) {\n        currentDate = `${year}-${labels[indexLabel].slice(0, 2)}-${labels[\n          indexLabel\n        ].slice(2)}`;\n\n        // keep adding if it's still at current date(time)\n\n        while (indexCurrentDate) {\n          // check date(time)\n          if (filteredData[indexData]?.time === currentDate) {\n            // check main category\n            if (filteredData[indexData].category === \"expense\") {\n              currentAmount += Number(filteredData[indexData].price);\n            }\n\n            indexData++;\n          } else indexCurrentDate = false;\n        }\n\n        data.push(currentAmount);\n\n        currentAmount = 0;\n        indexCurrentDate = true;\n        indexLabel++;\n      }\n    }\n  }\n*/\n\n\nvar _c;\n\n$RefreshReg$(_c, \"ChartMain\");","map":{"version":3,"sources":["/Users/eyo/Desktop/project-expenseTracker-main/src/components/MainContent/Chart/ChartMain/ChartMain.js"],"names":["useRef","useEffect","useContext","ExpenseDataContext","style","Chart","dateOptObj","month","ChartMain","props","chartRef","EXPENSE_DATA","labels","labels1","data","chartData","standardLabels","createLabelsArr","timeDuration","startingDate","createDataArr1","mainCategory","subCategory","dataObj","datasets","label","backgroundColor","borderColor","borderWidth","config","type","options","scales","y","beginAtZero","chartMain","createDataArr","expensData","start","numStartingDate","Number","Date","numEndingDate","length","filteredData","filter","element","time","sort","elementA","elementB","indexData","indexCurrentDate","currentAmount","currentLabel","i","category","price","push","console","log","newLabels","map","slice","getMonth","duration","today","createLabelsArrHelper","incrementAmount","dayMonth","tmpDay","day","year","getFullYear","changeYear","getDate","setMonth","setDate"],"mappings":"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":["import { useRef, useEffect, useContext } from \"react\";\nimport ExpenseDataContext from \"../../../../store/expenseData/expenseData--context\";\nimport style from \"./ChartMain.module.css\";\nimport Chart from \"chart.js/auto\";\n\nconst dateOptObj = { month: \"short\" };\n\nfunction ChartMain(props) {\n  const chartRef = useRef(null);\n  const { EXPENSE_DATA } = useContext(ExpenseDataContext);\n\n  let labels = [],\n    labels1 = [],\n    data = [];\n\n  if (props.chartData) {\n    const standardLabels = createLabelsArr(\n      props.chartData.timeDuration,\n      props.chartData.startingDate\n    );\n\n    // labels = standardLabels.map((label) => )\n\n    // if (\n    //   props.chartData.timeDuration === \"6\" ||\n    //   props.chartData.timeDuration === \"12\"\n    // ) {\n    //   labels1 = labels.map((label) =>\n    //     new Intl.DateTimeFormat(\"en-US\", dateOptObj).format(\n    //       new Date(2020, label.slice(0, 2) - 1, label.slice(2) - 0)\n    //     )\n    //   );\n    // }\n\n    data = createDataArr1(\n      standardLabels,\n      EXPENSE_DATA,\n      props.chartData?.startingDate,\n      props.chartData?.mainCategory,\n      props.chartData?.subCategory,\n      props.chartData?.timeDuration\n    );\n  }\n\n  const dataObj = {\n    labels: labels,\n    datasets: [\n      {\n        label: \"My First Dataset\",\n        data: data,\n        backgroundColor: [\n          \"rgba(255, 99, 132, 0.2)\",\n          \"rgba(255, 159, 64, 0.2)\",\n          \"rgba(255, 205, 86, 0.2)\",\n          \"rgba(75, 192, 192, 0.2)\",\n          \"rgba(54, 162, 235, 0.2)\",\n          \"rgba(153, 102, 255, 0.2)\",\n          \"rgba(201, 203, 207, 0.2)\",\n        ],\n        borderColor: [\n          \"rgb(255, 99, 132)\",\n          \"rgb(255, 159, 64)\",\n          \"rgb(255, 205, 86)\",\n          \"rgb(75, 192, 192)\",\n          \"rgb(54, 162, 235)\",\n          \"rgb(153, 102, 255)\",\n          \"rgb(201, 203, 207)\",\n        ],\n        borderWidth: 1,\n      },\n    ],\n  };\n\n  const config = {\n    type: \"bar\",\n    data: dataObj,\n    options: {\n      scales: {\n        y: {\n          beginAtZero: true,\n        },\n      },\n    },\n  };\n\n  // useEffect(() => {\n  //   const chart = new Chart(chartRef.current, config);\n\n  //   return function cleanUp() {\n  //     chart.destroy();\n  //   };\n  // }, [labels]);\n\n  return (\n    <div className={style.chartMain}>\n      <div>{/* <canvas ref={chartRef}></canvas> */}</div>\n    </div>\n  );\n}\n\nexport default ChartMain;\n\nfunction createDataArr(\n  standardLabels,\n  expensData,\n  start,\n  mainCategory,\n  subCategory,\n  timeDuration\n) {\n  // const year = new Date(start).getFullYear();\n  // const startingDate = `${year}-${labels[0]?.slice(0, 2)}-${labels[0]?.slice(\n  //   2\n  // )}`;\n  // const endingDate = `${year}-${labels[labels.length - 1]?.slice(\n  //   0,\n  //   2\n  // )}-${labels[labels.length - 1]?.slice(2)}`;\n\n  const numStartingDate = Number(new Date(standardLabels[0]));\n  const numEndingDate = Number(\n    new Date(standardLabels[standardLabels.length - 1])\n  );\n\n  const filteredData = expensData\n    .filter(\n      (element) =>\n        Number(new Date(element.time)) >= numStartingDate &&\n        Number(new Date(element.time)) <= numEndingDate\n    )\n    .sort(\n      (elementA, elementB) =>\n        Number(new Date(elementA.time)) - Number(new Date(elementB.time))\n    );\n\n  const data = [];\n\n  let indexData = 0;\n  let indexCurrentDate = true;\n  let currentAmount = 0;\n  let currentLabel;\n\n  for (let i = 0; i < standardLabels.length; i++) {\n    currentLabel = Number(new Date(standardLabels[i]));\n    while (indexCurrentDate) {\n      if (Number(new Date(filteredData[indexData]?.time)) <= currentLabel) {\n        if (filteredData[indexData].category === \"expense\") {\n          currentAmount += Number(filteredData[indexData].price);\n        }\n\n        indexData++;\n      } else indexCurrentDate = false;\n    }\n\n    data.push(currentAmount);\n    currentAmount = 0;\n    indexCurrentDate = true;\n  }\n\n  console.log(filteredData);\n  console.log(standardLabels);\n  console.log(data);\n  // console.log(data);\n  return data;\n}\n\nfunction createDataArr1(\n  standardLabels,\n  expensData,\n  start,\n  mainCategory,\n  subCategory,\n  timeDuration\n) {\n  // const year = new Date(start).getFullYear();\n  // const startingDate = `${year}-${labels[0]?.slice(0, 2)}-${labels[0]?.slice(\n  //   2\n  // )}`;\n  // const endingDate = `${year}-${labels[labels.length - 1]?.slice(\n  //   0,\n  //   2\n  // )}-${labels[labels.length - 1]?.slice(2)}`;\n\n  const numStartingDate = Number(new Date(standardLabels[0]));\n  const numEndingDate = Number(\n    new Date(standardLabels[standardLabels.length - 1])\n  );\n\n  const filteredData = expensData\n    .filter(\n      (element) =>\n        Number(new Date(element.time)) >= numStartingDate &&\n        Number(new Date(element.time)) <= numEndingDate\n    )\n    .sort(\n      (elementA, elementB) =>\n        Number(new Date(elementA.time)) - Number(new Date(elementB.time))\n    );\n\n  const data = [];\n  const newLabels = standardLabels.map((label) =>\n    new Date(label.slice(0, 4) - 0, label.slice(5, 7) - 0 + 1, 0).getMonth()\n  );\n  console.log(newLabels);\n\n  // label.slice(0, 4) - 0, label.slice(5, 6) - 0, 0).getMonth()\n\n  let indexData = 0;\n  let indexCurrentDate = true;\n  let currentAmount = 0;\n  let currentLabel;\n\n  // for (let i = 0; i < standardLabels.length; i++) {\n  //   currentLabel = Number(new Date(standardLabels[i]));\n  //   while (indexCurrentDate) {\n  //     if (Number(new Date(filteredData[indexData]?.time)) <= currentLabel) {\n  //       if (filteredData[indexData].category === \"expense\") {\n  //         currentAmount += Number(filteredData[indexData].price);\n  //       }\n\n  //       indexData++;\n  //     } else indexCurrentDate = false;\n  //   }\n\n  //   data.push(currentAmount);\n  //   currentAmount = 0;\n  //   indexCurrentDate = true;\n  // }\n\n  // console.log(filteredData);\n  console.log(standardLabels);\n\n  // console.log(data);\n  // console.log(data);\n  return data;\n}\n\nfunction createLabelsArr(duration, startingDate) {\n  const today = new Date(startingDate);\n\n  let labels = [];\n\n  // one week\n  if (duration === \"7\") {\n    createLabelsArrHelper(labels, 7, 1, \"day\", today);\n  }\n\n  if (duration === \"14\") {\n    createLabelsArrHelper(labels, 14, 1, \"day\", today);\n  }\n\n  if (duration === \"30\") {\n    createLabelsArrHelper(labels, 30, 1, \"day\", today);\n  }\n\n  if (duration === \"90\") {\n    createLabelsArrHelper(labels, 30, 3, \"day\", today);\n  }\n\n  if (duration === \"6\") {\n    createLabelsArrHelper(labels, 6, 1, \"month\", today);\n  }\n\n  if (duration === \"12\") {\n    createLabelsArrHelper(labels, 12, 1, \"month\", today);\n  }\n\n  return labels;\n}\n\nfunction createLabelsArrHelper(\n  labels,\n  duration,\n  incrementAmount,\n  dayMonth,\n  today\n) {\n  let tmpDay = today;\n  let day;\n  let month;\n  let year = today.getFullYear();\n  let changeYear = false;\n\n  // if it's increment by month, the day is never change\n  // we could put it outisde for-loop\n  if (dayMonth === \"month\") {\n    if (tmpDay.getDate() < 10) day = `0${tmpDay.getDate()}`;\n    else day = tmpDay.getDate();\n  }\n\n  for (let i = 0; i < duration; i++) {\n    // incremenet by month\n    if (dayMonth === \"month\")\n      tmpDay.setMonth(tmpDay.getMonth() + incrementAmount);\n\n    // increment by day\n    if (dayMonth === \"day\") {\n      tmpDay.setDate(tmpDay.getDate() + incrementAmount);\n\n      // day will change, so put this inside for-loop\n      if (tmpDay.getDate() < 10) day = `0${tmpDay.getDate()}`;\n      else day = tmpDay.getDate();\n    }\n\n    if (tmpDay.getMonth() + 1 < 10) month = `0${tmpDay.getMonth() + 1}`;\n    else month = tmpDay.getMonth() + 1;\n\n    // increment year\n    if (changeYear) {\n      year++;\n      changeYear = false;\n    }\n    if (tmpDay.getMonth() === 11) changeYear = true;\n\n    labels.push(`${year}-${month}-${day}`);\n  }\n}\n\n/*\n if (timeDuration === \"6\" || timeDuration === \"12\") {\n    if (mainCategory === \"income\" && subCategory.length === 3) {\n      const labelsLength = labels.length;\n      let indexLabel = 0;\n      let indexData = 0;\n      let indexCurrentDate = true;\n      let currentMonth;\n      let currentAmount = 0;\n\n      while (indexLabel < labelsLength) {\n        // keep adding if it's still at current date(time)\n        while (indexCurrentDate) {\n          currentMonth = new Intl.DateTimeFormat(\"en-US\", dateOptObj).format(\n            new Date(filteredData[indexData]?.time)\n          );\n          // check date(time)\n          if (currentMonth === labels1[indexLabel]) {\n            // check main category\n            if (filteredData[indexData].category === \"income\") {\n              currentAmount += Number(filteredData[indexData].price);\n            }\n\n            indexData++;\n          } else indexCurrentDate = false;\n        }\n\n        data.push(currentAmount);\n\n        currentAmount = 0;\n        indexCurrentDate = true;\n        indexLabel++;\n      }\n    }\n\n    if (mainCategory === \"expense\" && subCategory.length === 6) {\n      const labelsLength = labels.length;\n      let indexLabel = 0;\n      let indexData = 0;\n      let indexCurrentDate = true;\n      let currentMonth;\n      let currentAmount = 0;\n\n      while (indexLabel < labelsLength) {\n        // keep adding if it's still at current date(time)\n        while (indexCurrentDate) {\n          console.log(filteredData);\n          if (!filteredData[indexData]?.time)\n            currentMonth = new Intl.DateTimeFormat(\"en-US\", dateOptObj).format(\n              new Date(filteredData[indexData]?.time)\n            );\n          console.log(currentMonth);\n\n          if (currentMonth === labels1[indexLabel]) {\n            // check main category\n            if (filteredData[indexData].category === \"income\") {\n              currentAmount += Number(filteredData[indexData].price);\n            }\n\n            indexData++;\n          } else indexCurrentDate = false;\n        }\n\n        data.push(currentAmount);\n\n        currentAmount = 0;\n        indexCurrentDate = true;\n        indexLabel++;\n      }\n    }\n  }\n  // day base\n  else {\n    if (mainCategory === \"income\" && subCategory.length === 3) {\n      const labelsLength = labels.length;\n      let indexLabel = 0;\n      let indexData = 0;\n      let indexCurrentDate = true;\n      let currentDate;\n      let currentAmount = 0;\n\n      while (indexLabel < labelsLength) {\n        currentDate = `${year}-${labels[indexLabel].slice(0, 2)}-${labels[\n          indexLabel\n        ].slice(2)}`;\n\n        // keep adding if it's still at current date(time)\n        if (indexData < filteredData.length - 1) {\n          while (indexCurrentDate) {\n            // check date(time)\n            if (filteredData[indexData].time === currentDate) {\n              // check main category\n              if (filteredData[indexData].category === \"income\") {\n                currentAmount += Number(filteredData[indexData].price);\n              }\n\n              indexData++;\n            } else indexCurrentDate = false;\n          }\n        }\n\n        data.push(currentAmount);\n\n        currentAmount = 0;\n        indexCurrentDate = true;\n        indexLabel++;\n      }\n    }\n\n    if (mainCategory === \"expense\" && subCategory.length === 6) {\n      const labelsLength = labels.length;\n      let indexLabel = 0;\n      let indexData = 0;\n      let indexCurrentDate = true;\n      let currentDate;\n      let currentAmount = 0;\n\n      while (indexLabel < labelsLength) {\n        currentDate = `${year}-${labels[indexLabel].slice(0, 2)}-${labels[\n          indexLabel\n        ].slice(2)}`;\n\n        // keep adding if it's still at current date(time)\n\n        while (indexCurrentDate) {\n          // check date(time)\n          if (filteredData[indexData]?.time === currentDate) {\n            // check main category\n            if (filteredData[indexData].category === \"expense\") {\n              currentAmount += Number(filteredData[indexData].price);\n            }\n\n            indexData++;\n          } else indexCurrentDate = false;\n        }\n\n        data.push(currentAmount);\n\n        currentAmount = 0;\n        indexCurrentDate = true;\n        indexLabel++;\n      }\n    }\n  }\n*/\n"]},"metadata":{},"sourceType":"module"}